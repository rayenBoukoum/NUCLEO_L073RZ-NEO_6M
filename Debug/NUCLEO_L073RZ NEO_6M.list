
NUCLEO_L073RZ NEO_6M.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b960  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006fc  0800ba20  0800ba20  0001ba20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c11c  0800c11c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c11c  0800c11c  0001c11c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c124  0800c124  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c124  0800c124  0001c124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c128  0800c128  0001c128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c12c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  200001e0  0800c30c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  0800c30c  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b53b  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e35  00000000  00000000  0002b743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b8  00000000  00000000  0002d578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007f0  00000000  00000000  0002de30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000158de  00000000  00000000  0002e620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b996  00000000  00000000  00043efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ef91  00000000  00000000  0004f894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ce825  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003634  00000000  00000000  000ce878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800ba08 	.word	0x0800ba08

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800ba08 	.word	0x0800ba08

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fd69 	bl	8001f14 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fcb9 	bl	8001dc4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fd5b 	bl	8001f14 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fd51 	bl	8001f14 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fce1 	bl	8001e48 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fcd7 	bl	8001e48 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f8a4 	bl	8000624 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4647      	mov	r7, r8
 80004ee:	b580      	push	{r7, lr}
 80004f0:	0007      	movs	r7, r0
 80004f2:	4699      	mov	r9, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	469c      	mov	ip, r3
 80004f8:	0413      	lsls	r3, r2, #16
 80004fa:	0c1b      	lsrs	r3, r3, #16
 80004fc:	001d      	movs	r5, r3
 80004fe:	000e      	movs	r6, r1
 8000500:	4661      	mov	r1, ip
 8000502:	0400      	lsls	r0, r0, #16
 8000504:	0c14      	lsrs	r4, r2, #16
 8000506:	0c00      	lsrs	r0, r0, #16
 8000508:	4345      	muls	r5, r0
 800050a:	434b      	muls	r3, r1
 800050c:	4360      	muls	r0, r4
 800050e:	4361      	muls	r1, r4
 8000510:	18c0      	adds	r0, r0, r3
 8000512:	0c2c      	lsrs	r4, r5, #16
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4372      	muls	r2, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	4463      	add	r3, ip
 800052e:	042d      	lsls	r5, r5, #16
 8000530:	0c2d      	lsrs	r5, r5, #16
 8000532:	18c9      	adds	r1, r1, r3
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	1889      	adds	r1, r1, r2
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__aeabi_d2uiz>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	2200      	movs	r2, #0
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <__aeabi_d2uiz+0x38>)
 800054a:	0004      	movs	r4, r0
 800054c:	000d      	movs	r5, r1
 800054e:	f7ff ffa1 	bl	8000494 <__aeabi_dcmpge>
 8000552:	2800      	cmp	r0, #0
 8000554:	d104      	bne.n	8000560 <__aeabi_d2uiz+0x1c>
 8000556:	0020      	movs	r0, r4
 8000558:	0029      	movs	r1, r5
 800055a:	f002 fb5b 	bl	8002c14 <__aeabi_d2iz>
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <__aeabi_d2uiz+0x38>)
 8000562:	2200      	movs	r2, #0
 8000564:	0020      	movs	r0, r4
 8000566:	0029      	movs	r1, r5
 8000568:	f001 ffa4 	bl	80024b4 <__aeabi_dsub>
 800056c:	f002 fb52 	bl	8002c14 <__aeabi_d2iz>
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	061b      	lsls	r3, r3, #24
 8000574:	469c      	mov	ip, r3
 8000576:	4460      	add	r0, ip
 8000578:	e7f1      	b.n	800055e <__aeabi_d2uiz+0x1a>
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	41e00000 	.word	0x41e00000

08000580 <__aeabi_d2lz>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	0005      	movs	r5, r0
 8000584:	000c      	movs	r4, r1
 8000586:	2200      	movs	r2, #0
 8000588:	2300      	movs	r3, #0
 800058a:	0028      	movs	r0, r5
 800058c:	0021      	movs	r1, r4
 800058e:	f7ff ff63 	bl	8000458 <__aeabi_dcmplt>
 8000592:	2800      	cmp	r0, #0
 8000594:	d108      	bne.n	80005a8 <__aeabi_d2lz+0x28>
 8000596:	0028      	movs	r0, r5
 8000598:	0021      	movs	r1, r4
 800059a:	f000 f80f 	bl	80005bc <__aeabi_d2ulz>
 800059e:	0002      	movs	r2, r0
 80005a0:	000b      	movs	r3, r1
 80005a2:	0010      	movs	r0, r2
 80005a4:	0019      	movs	r1, r3
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	061b      	lsls	r3, r3, #24
 80005ac:	18e1      	adds	r1, r4, r3
 80005ae:	0028      	movs	r0, r5
 80005b0:	f000 f804 	bl	80005bc <__aeabi_d2ulz>
 80005b4:	2300      	movs	r3, #0
 80005b6:	4242      	negs	r2, r0
 80005b8:	418b      	sbcs	r3, r1
 80005ba:	e7f2      	b.n	80005a2 <__aeabi_d2lz+0x22>

080005bc <__aeabi_d2ulz>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	2200      	movs	r2, #0
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <__aeabi_d2ulz+0x34>)
 80005c2:	000d      	movs	r5, r1
 80005c4:	0004      	movs	r4, r0
 80005c6:	f001 fd09 	bl	8001fdc <__aeabi_dmul>
 80005ca:	f7ff ffbb 	bl	8000544 <__aeabi_d2uiz>
 80005ce:	0006      	movs	r6, r0
 80005d0:	f002 fb86 	bl	8002ce0 <__aeabi_ui2d>
 80005d4:	2200      	movs	r2, #0
 80005d6:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <__aeabi_d2ulz+0x38>)
 80005d8:	f001 fd00 	bl	8001fdc <__aeabi_dmul>
 80005dc:	0002      	movs	r2, r0
 80005de:	000b      	movs	r3, r1
 80005e0:	0020      	movs	r0, r4
 80005e2:	0029      	movs	r1, r5
 80005e4:	f001 ff66 	bl	80024b4 <__aeabi_dsub>
 80005e8:	f7ff ffac 	bl	8000544 <__aeabi_d2uiz>
 80005ec:	0031      	movs	r1, r6
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	3df00000 	.word	0x3df00000
 80005f4:	41f00000 	.word	0x41f00000

080005f8 <__aeabi_l2d>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	0006      	movs	r6, r0
 80005fc:	0008      	movs	r0, r1
 80005fe:	f002 fb3f 	bl	8002c80 <__aeabi_i2d>
 8000602:	2200      	movs	r2, #0
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <__aeabi_l2d+0x28>)
 8000606:	f001 fce9 	bl	8001fdc <__aeabi_dmul>
 800060a:	000d      	movs	r5, r1
 800060c:	0004      	movs	r4, r0
 800060e:	0030      	movs	r0, r6
 8000610:	f002 fb66 	bl	8002ce0 <__aeabi_ui2d>
 8000614:	002b      	movs	r3, r5
 8000616:	0022      	movs	r2, r4
 8000618:	f000 fda2 	bl	8001160 <__aeabi_dadd>
 800061c:	bd70      	pop	{r4, r5, r6, pc}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	41f00000 	.word	0x41f00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f002 fc60 	bl	8002f08 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f002 fc5b 	bl	8002f08 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	469b      	mov	fp, r3
 800065a:	d433      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065c:	465a      	mov	r2, fp
 800065e:	4653      	mov	r3, sl
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83a      	bhi.n	80006e6 <__udivmoddi4+0xc2>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e078      	b.n	8000768 <__udivmoddi4+0x144>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e075      	b.n	800076e <__udivmoddi4+0x14a>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e028      	b.n	80006ee <__udivmoddi4+0xca>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	2320      	movs	r3, #32
 80006c8:	1a9b      	subs	r3, r3, r2
 80006ca:	4652      	mov	r2, sl
 80006cc:	40da      	lsrs	r2, r3
 80006ce:	4641      	mov	r1, r8
 80006d0:	0013      	movs	r3, r2
 80006d2:	464a      	mov	r2, r9
 80006d4:	408a      	lsls	r2, r1
 80006d6:	0017      	movs	r7, r2
 80006d8:	4642      	mov	r2, r8
 80006da:	431f      	orrs	r7, r3
 80006dc:	4653      	mov	r3, sl
 80006de:	4093      	lsls	r3, r2
 80006e0:	001e      	movs	r6, r3
 80006e2:	42af      	cmp	r7, r5
 80006e4:	d9c4      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e6:	2200      	movs	r2, #0
 80006e8:	2300      	movs	r3, #0
 80006ea:	9200      	str	r2, [sp, #0]
 80006ec:	9301      	str	r3, [sp, #4]
 80006ee:	4643      	mov	r3, r8
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d0d9      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f4:	07fb      	lsls	r3, r7, #31
 80006f6:	0872      	lsrs	r2, r6, #1
 80006f8:	431a      	orrs	r2, r3
 80006fa:	4646      	mov	r6, r8
 80006fc:	087b      	lsrs	r3, r7, #1
 80006fe:	e00e      	b.n	800071e <__udivmoddi4+0xfa>
 8000700:	42ab      	cmp	r3, r5
 8000702:	d101      	bne.n	8000708 <__udivmoddi4+0xe4>
 8000704:	42a2      	cmp	r2, r4
 8000706:	d80c      	bhi.n	8000722 <__udivmoddi4+0xfe>
 8000708:	1aa4      	subs	r4, r4, r2
 800070a:	419d      	sbcs	r5, r3
 800070c:	2001      	movs	r0, #1
 800070e:	1924      	adds	r4, r4, r4
 8000710:	416d      	adcs	r5, r5
 8000712:	2100      	movs	r1, #0
 8000714:	3e01      	subs	r6, #1
 8000716:	1824      	adds	r4, r4, r0
 8000718:	414d      	adcs	r5, r1
 800071a:	2e00      	cmp	r6, #0
 800071c:	d006      	beq.n	800072c <__udivmoddi4+0x108>
 800071e:	42ab      	cmp	r3, r5
 8000720:	d9ee      	bls.n	8000700 <__udivmoddi4+0xdc>
 8000722:	3e01      	subs	r6, #1
 8000724:	1924      	adds	r4, r4, r4
 8000726:	416d      	adcs	r5, r5
 8000728:	2e00      	cmp	r6, #0
 800072a:	d1f8      	bne.n	800071e <__udivmoddi4+0xfa>
 800072c:	9800      	ldr	r0, [sp, #0]
 800072e:	9901      	ldr	r1, [sp, #4]
 8000730:	465b      	mov	r3, fp
 8000732:	1900      	adds	r0, r0, r4
 8000734:	4169      	adcs	r1, r5
 8000736:	2b00      	cmp	r3, #0
 8000738:	db24      	blt.n	8000784 <__udivmoddi4+0x160>
 800073a:	002b      	movs	r3, r5
 800073c:	465a      	mov	r2, fp
 800073e:	4644      	mov	r4, r8
 8000740:	40d3      	lsrs	r3, r2
 8000742:	002a      	movs	r2, r5
 8000744:	40e2      	lsrs	r2, r4
 8000746:	001c      	movs	r4, r3
 8000748:	465b      	mov	r3, fp
 800074a:	0015      	movs	r5, r2
 800074c:	2b00      	cmp	r3, #0
 800074e:	db2a      	blt.n	80007a6 <__udivmoddi4+0x182>
 8000750:	0026      	movs	r6, r4
 8000752:	409e      	lsls	r6, r3
 8000754:	0033      	movs	r3, r6
 8000756:	0026      	movs	r6, r4
 8000758:	4647      	mov	r7, r8
 800075a:	40be      	lsls	r6, r7
 800075c:	0032      	movs	r2, r6
 800075e:	1a80      	subs	r0, r0, r2
 8000760:	4199      	sbcs	r1, r3
 8000762:	9000      	str	r0, [sp, #0]
 8000764:	9101      	str	r1, [sp, #4]
 8000766:	e79f      	b.n	80006a8 <__udivmoddi4+0x84>
 8000768:	42a3      	cmp	r3, r4
 800076a:	d8bc      	bhi.n	80006e6 <__udivmoddi4+0xc2>
 800076c:	e783      	b.n	8000676 <__udivmoddi4+0x52>
 800076e:	4642      	mov	r2, r8
 8000770:	2320      	movs	r3, #32
 8000772:	2100      	movs	r1, #0
 8000774:	1a9b      	subs	r3, r3, r2
 8000776:	2200      	movs	r2, #0
 8000778:	9100      	str	r1, [sp, #0]
 800077a:	9201      	str	r2, [sp, #4]
 800077c:	2201      	movs	r2, #1
 800077e:	40da      	lsrs	r2, r3
 8000780:	9201      	str	r2, [sp, #4]
 8000782:	e786      	b.n	8000692 <__udivmoddi4+0x6e>
 8000784:	4642      	mov	r2, r8
 8000786:	2320      	movs	r3, #32
 8000788:	1a9b      	subs	r3, r3, r2
 800078a:	002a      	movs	r2, r5
 800078c:	4646      	mov	r6, r8
 800078e:	409a      	lsls	r2, r3
 8000790:	0023      	movs	r3, r4
 8000792:	40f3      	lsrs	r3, r6
 8000794:	4644      	mov	r4, r8
 8000796:	4313      	orrs	r3, r2
 8000798:	002a      	movs	r2, r5
 800079a:	40e2      	lsrs	r2, r4
 800079c:	001c      	movs	r4, r3
 800079e:	465b      	mov	r3, fp
 80007a0:	0015      	movs	r5, r2
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	dad4      	bge.n	8000750 <__udivmoddi4+0x12c>
 80007a6:	4642      	mov	r2, r8
 80007a8:	002f      	movs	r7, r5
 80007aa:	2320      	movs	r3, #32
 80007ac:	0026      	movs	r6, r4
 80007ae:	4097      	lsls	r7, r2
 80007b0:	1a9b      	subs	r3, r3, r2
 80007b2:	40de      	lsrs	r6, r3
 80007b4:	003b      	movs	r3, r7
 80007b6:	4333      	orrs	r3, r6
 80007b8:	e7cd      	b.n	8000756 <__udivmoddi4+0x132>
 80007ba:	46c0      	nop			; (mov r8, r8)

080007bc <__aeabi_fadd>:
 80007bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007be:	46c6      	mov	lr, r8
 80007c0:	0243      	lsls	r3, r0, #9
 80007c2:	0a5b      	lsrs	r3, r3, #9
 80007c4:	024e      	lsls	r6, r1, #9
 80007c6:	0045      	lsls	r5, r0, #1
 80007c8:	004f      	lsls	r7, r1, #1
 80007ca:	00da      	lsls	r2, r3, #3
 80007cc:	0fc4      	lsrs	r4, r0, #31
 80007ce:	469c      	mov	ip, r3
 80007d0:	0a70      	lsrs	r0, r6, #9
 80007d2:	4690      	mov	r8, r2
 80007d4:	b500      	push	{lr}
 80007d6:	0e2d      	lsrs	r5, r5, #24
 80007d8:	0e3f      	lsrs	r7, r7, #24
 80007da:	0fc9      	lsrs	r1, r1, #31
 80007dc:	09b6      	lsrs	r6, r6, #6
 80007de:	428c      	cmp	r4, r1
 80007e0:	d04b      	beq.n	800087a <__aeabi_fadd+0xbe>
 80007e2:	1bea      	subs	r2, r5, r7
 80007e4:	2a00      	cmp	r2, #0
 80007e6:	dd36      	ble.n	8000856 <__aeabi_fadd+0x9a>
 80007e8:	2f00      	cmp	r7, #0
 80007ea:	d061      	beq.n	80008b0 <__aeabi_fadd+0xf4>
 80007ec:	2dff      	cmp	r5, #255	; 0xff
 80007ee:	d100      	bne.n	80007f2 <__aeabi_fadd+0x36>
 80007f0:	e0ad      	b.n	800094e <__aeabi_fadd+0x192>
 80007f2:	2380      	movs	r3, #128	; 0x80
 80007f4:	04db      	lsls	r3, r3, #19
 80007f6:	431e      	orrs	r6, r3
 80007f8:	2a1b      	cmp	r2, #27
 80007fa:	dc00      	bgt.n	80007fe <__aeabi_fadd+0x42>
 80007fc:	e0d3      	b.n	80009a6 <__aeabi_fadd+0x1ea>
 80007fe:	2001      	movs	r0, #1
 8000800:	4643      	mov	r3, r8
 8000802:	1a18      	subs	r0, r3, r0
 8000804:	0143      	lsls	r3, r0, #5
 8000806:	d400      	bmi.n	800080a <__aeabi_fadd+0x4e>
 8000808:	e08c      	b.n	8000924 <__aeabi_fadd+0x168>
 800080a:	0180      	lsls	r0, r0, #6
 800080c:	0987      	lsrs	r7, r0, #6
 800080e:	0038      	movs	r0, r7
 8000810:	f002 fb5c 	bl	8002ecc <__clzsi2>
 8000814:	3805      	subs	r0, #5
 8000816:	4087      	lsls	r7, r0
 8000818:	4285      	cmp	r5, r0
 800081a:	dc00      	bgt.n	800081e <__aeabi_fadd+0x62>
 800081c:	e0b6      	b.n	800098c <__aeabi_fadd+0x1d0>
 800081e:	1a2d      	subs	r5, r5, r0
 8000820:	48b3      	ldr	r0, [pc, #716]	; (8000af0 <__aeabi_fadd+0x334>)
 8000822:	4038      	ands	r0, r7
 8000824:	0743      	lsls	r3, r0, #29
 8000826:	d004      	beq.n	8000832 <__aeabi_fadd+0x76>
 8000828:	230f      	movs	r3, #15
 800082a:	4003      	ands	r3, r0
 800082c:	2b04      	cmp	r3, #4
 800082e:	d000      	beq.n	8000832 <__aeabi_fadd+0x76>
 8000830:	3004      	adds	r0, #4
 8000832:	0143      	lsls	r3, r0, #5
 8000834:	d400      	bmi.n	8000838 <__aeabi_fadd+0x7c>
 8000836:	e078      	b.n	800092a <__aeabi_fadd+0x16e>
 8000838:	1c6a      	adds	r2, r5, #1
 800083a:	2dfe      	cmp	r5, #254	; 0xfe
 800083c:	d065      	beq.n	800090a <__aeabi_fadd+0x14e>
 800083e:	0180      	lsls	r0, r0, #6
 8000840:	0a43      	lsrs	r3, r0, #9
 8000842:	469c      	mov	ip, r3
 8000844:	b2d2      	uxtb	r2, r2
 8000846:	4663      	mov	r3, ip
 8000848:	05d0      	lsls	r0, r2, #23
 800084a:	4318      	orrs	r0, r3
 800084c:	07e4      	lsls	r4, r4, #31
 800084e:	4320      	orrs	r0, r4
 8000850:	bc80      	pop	{r7}
 8000852:	46b8      	mov	r8, r7
 8000854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000856:	2a00      	cmp	r2, #0
 8000858:	d035      	beq.n	80008c6 <__aeabi_fadd+0x10a>
 800085a:	1b7a      	subs	r2, r7, r5
 800085c:	2d00      	cmp	r5, #0
 800085e:	d000      	beq.n	8000862 <__aeabi_fadd+0xa6>
 8000860:	e0af      	b.n	80009c2 <__aeabi_fadd+0x206>
 8000862:	4643      	mov	r3, r8
 8000864:	2b00      	cmp	r3, #0
 8000866:	d100      	bne.n	800086a <__aeabi_fadd+0xae>
 8000868:	e0a7      	b.n	80009ba <__aeabi_fadd+0x1fe>
 800086a:	1e53      	subs	r3, r2, #1
 800086c:	2a01      	cmp	r2, #1
 800086e:	d100      	bne.n	8000872 <__aeabi_fadd+0xb6>
 8000870:	e12f      	b.n	8000ad2 <__aeabi_fadd+0x316>
 8000872:	2aff      	cmp	r2, #255	; 0xff
 8000874:	d069      	beq.n	800094a <__aeabi_fadd+0x18e>
 8000876:	001a      	movs	r2, r3
 8000878:	e0aa      	b.n	80009d0 <__aeabi_fadd+0x214>
 800087a:	1be9      	subs	r1, r5, r7
 800087c:	2900      	cmp	r1, #0
 800087e:	dd70      	ble.n	8000962 <__aeabi_fadd+0x1a6>
 8000880:	2f00      	cmp	r7, #0
 8000882:	d037      	beq.n	80008f4 <__aeabi_fadd+0x138>
 8000884:	2dff      	cmp	r5, #255	; 0xff
 8000886:	d062      	beq.n	800094e <__aeabi_fadd+0x192>
 8000888:	2380      	movs	r3, #128	; 0x80
 800088a:	04db      	lsls	r3, r3, #19
 800088c:	431e      	orrs	r6, r3
 800088e:	291b      	cmp	r1, #27
 8000890:	dc00      	bgt.n	8000894 <__aeabi_fadd+0xd8>
 8000892:	e0b0      	b.n	80009f6 <__aeabi_fadd+0x23a>
 8000894:	2001      	movs	r0, #1
 8000896:	4440      	add	r0, r8
 8000898:	0143      	lsls	r3, r0, #5
 800089a:	d543      	bpl.n	8000924 <__aeabi_fadd+0x168>
 800089c:	3501      	adds	r5, #1
 800089e:	2dff      	cmp	r5, #255	; 0xff
 80008a0:	d033      	beq.n	800090a <__aeabi_fadd+0x14e>
 80008a2:	2301      	movs	r3, #1
 80008a4:	4a93      	ldr	r2, [pc, #588]	; (8000af4 <__aeabi_fadd+0x338>)
 80008a6:	4003      	ands	r3, r0
 80008a8:	0840      	lsrs	r0, r0, #1
 80008aa:	4010      	ands	r0, r2
 80008ac:	4318      	orrs	r0, r3
 80008ae:	e7b9      	b.n	8000824 <__aeabi_fadd+0x68>
 80008b0:	2e00      	cmp	r6, #0
 80008b2:	d100      	bne.n	80008b6 <__aeabi_fadd+0xfa>
 80008b4:	e083      	b.n	80009be <__aeabi_fadd+0x202>
 80008b6:	1e51      	subs	r1, r2, #1
 80008b8:	2a01      	cmp	r2, #1
 80008ba:	d100      	bne.n	80008be <__aeabi_fadd+0x102>
 80008bc:	e0d8      	b.n	8000a70 <__aeabi_fadd+0x2b4>
 80008be:	2aff      	cmp	r2, #255	; 0xff
 80008c0:	d045      	beq.n	800094e <__aeabi_fadd+0x192>
 80008c2:	000a      	movs	r2, r1
 80008c4:	e798      	b.n	80007f8 <__aeabi_fadd+0x3c>
 80008c6:	27fe      	movs	r7, #254	; 0xfe
 80008c8:	1c6a      	adds	r2, r5, #1
 80008ca:	4217      	tst	r7, r2
 80008cc:	d000      	beq.n	80008d0 <__aeabi_fadd+0x114>
 80008ce:	e086      	b.n	80009de <__aeabi_fadd+0x222>
 80008d0:	2d00      	cmp	r5, #0
 80008d2:	d000      	beq.n	80008d6 <__aeabi_fadd+0x11a>
 80008d4:	e0b7      	b.n	8000a46 <__aeabi_fadd+0x28a>
 80008d6:	4643      	mov	r3, r8
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d100      	bne.n	80008de <__aeabi_fadd+0x122>
 80008dc:	e0f3      	b.n	8000ac6 <__aeabi_fadd+0x30a>
 80008de:	2200      	movs	r2, #0
 80008e0:	2e00      	cmp	r6, #0
 80008e2:	d0b0      	beq.n	8000846 <__aeabi_fadd+0x8a>
 80008e4:	1b98      	subs	r0, r3, r6
 80008e6:	0143      	lsls	r3, r0, #5
 80008e8:	d400      	bmi.n	80008ec <__aeabi_fadd+0x130>
 80008ea:	e0fa      	b.n	8000ae2 <__aeabi_fadd+0x326>
 80008ec:	4643      	mov	r3, r8
 80008ee:	000c      	movs	r4, r1
 80008f0:	1af0      	subs	r0, r6, r3
 80008f2:	e797      	b.n	8000824 <__aeabi_fadd+0x68>
 80008f4:	2e00      	cmp	r6, #0
 80008f6:	d100      	bne.n	80008fa <__aeabi_fadd+0x13e>
 80008f8:	e0c8      	b.n	8000a8c <__aeabi_fadd+0x2d0>
 80008fa:	1e4a      	subs	r2, r1, #1
 80008fc:	2901      	cmp	r1, #1
 80008fe:	d100      	bne.n	8000902 <__aeabi_fadd+0x146>
 8000900:	e0ae      	b.n	8000a60 <__aeabi_fadd+0x2a4>
 8000902:	29ff      	cmp	r1, #255	; 0xff
 8000904:	d023      	beq.n	800094e <__aeabi_fadd+0x192>
 8000906:	0011      	movs	r1, r2
 8000908:	e7c1      	b.n	800088e <__aeabi_fadd+0xd2>
 800090a:	2300      	movs	r3, #0
 800090c:	22ff      	movs	r2, #255	; 0xff
 800090e:	469c      	mov	ip, r3
 8000910:	e799      	b.n	8000846 <__aeabi_fadd+0x8a>
 8000912:	21fe      	movs	r1, #254	; 0xfe
 8000914:	1c6a      	adds	r2, r5, #1
 8000916:	4211      	tst	r1, r2
 8000918:	d077      	beq.n	8000a0a <__aeabi_fadd+0x24e>
 800091a:	2aff      	cmp	r2, #255	; 0xff
 800091c:	d0f5      	beq.n	800090a <__aeabi_fadd+0x14e>
 800091e:	0015      	movs	r5, r2
 8000920:	4446      	add	r6, r8
 8000922:	0870      	lsrs	r0, r6, #1
 8000924:	0743      	lsls	r3, r0, #29
 8000926:	d000      	beq.n	800092a <__aeabi_fadd+0x16e>
 8000928:	e77e      	b.n	8000828 <__aeabi_fadd+0x6c>
 800092a:	08c3      	lsrs	r3, r0, #3
 800092c:	2dff      	cmp	r5, #255	; 0xff
 800092e:	d00e      	beq.n	800094e <__aeabi_fadd+0x192>
 8000930:	025b      	lsls	r3, r3, #9
 8000932:	0a5b      	lsrs	r3, r3, #9
 8000934:	469c      	mov	ip, r3
 8000936:	b2ea      	uxtb	r2, r5
 8000938:	e785      	b.n	8000846 <__aeabi_fadd+0x8a>
 800093a:	2e00      	cmp	r6, #0
 800093c:	d007      	beq.n	800094e <__aeabi_fadd+0x192>
 800093e:	2280      	movs	r2, #128	; 0x80
 8000940:	03d2      	lsls	r2, r2, #15
 8000942:	4213      	tst	r3, r2
 8000944:	d003      	beq.n	800094e <__aeabi_fadd+0x192>
 8000946:	4210      	tst	r0, r2
 8000948:	d101      	bne.n	800094e <__aeabi_fadd+0x192>
 800094a:	000c      	movs	r4, r1
 800094c:	0003      	movs	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d0db      	beq.n	800090a <__aeabi_fadd+0x14e>
 8000952:	2080      	movs	r0, #128	; 0x80
 8000954:	03c0      	lsls	r0, r0, #15
 8000956:	4318      	orrs	r0, r3
 8000958:	0240      	lsls	r0, r0, #9
 800095a:	0a43      	lsrs	r3, r0, #9
 800095c:	469c      	mov	ip, r3
 800095e:	22ff      	movs	r2, #255	; 0xff
 8000960:	e771      	b.n	8000846 <__aeabi_fadd+0x8a>
 8000962:	2900      	cmp	r1, #0
 8000964:	d0d5      	beq.n	8000912 <__aeabi_fadd+0x156>
 8000966:	1b7a      	subs	r2, r7, r5
 8000968:	2d00      	cmp	r5, #0
 800096a:	d160      	bne.n	8000a2e <__aeabi_fadd+0x272>
 800096c:	4643      	mov	r3, r8
 800096e:	2b00      	cmp	r3, #0
 8000970:	d024      	beq.n	80009bc <__aeabi_fadd+0x200>
 8000972:	1e53      	subs	r3, r2, #1
 8000974:	2a01      	cmp	r2, #1
 8000976:	d073      	beq.n	8000a60 <__aeabi_fadd+0x2a4>
 8000978:	2aff      	cmp	r2, #255	; 0xff
 800097a:	d0e7      	beq.n	800094c <__aeabi_fadd+0x190>
 800097c:	001a      	movs	r2, r3
 800097e:	2a1b      	cmp	r2, #27
 8000980:	dc00      	bgt.n	8000984 <__aeabi_fadd+0x1c8>
 8000982:	e085      	b.n	8000a90 <__aeabi_fadd+0x2d4>
 8000984:	2001      	movs	r0, #1
 8000986:	003d      	movs	r5, r7
 8000988:	1980      	adds	r0, r0, r6
 800098a:	e785      	b.n	8000898 <__aeabi_fadd+0xdc>
 800098c:	2320      	movs	r3, #32
 800098e:	003a      	movs	r2, r7
 8000990:	1b45      	subs	r5, r0, r5
 8000992:	0038      	movs	r0, r7
 8000994:	3501      	adds	r5, #1
 8000996:	40ea      	lsrs	r2, r5
 8000998:	1b5d      	subs	r5, r3, r5
 800099a:	40a8      	lsls	r0, r5
 800099c:	1e43      	subs	r3, r0, #1
 800099e:	4198      	sbcs	r0, r3
 80009a0:	2500      	movs	r5, #0
 80009a2:	4310      	orrs	r0, r2
 80009a4:	e73e      	b.n	8000824 <__aeabi_fadd+0x68>
 80009a6:	2320      	movs	r3, #32
 80009a8:	0030      	movs	r0, r6
 80009aa:	1a9b      	subs	r3, r3, r2
 80009ac:	0031      	movs	r1, r6
 80009ae:	4098      	lsls	r0, r3
 80009b0:	40d1      	lsrs	r1, r2
 80009b2:	1e43      	subs	r3, r0, #1
 80009b4:	4198      	sbcs	r0, r3
 80009b6:	4308      	orrs	r0, r1
 80009b8:	e722      	b.n	8000800 <__aeabi_fadd+0x44>
 80009ba:	000c      	movs	r4, r1
 80009bc:	0003      	movs	r3, r0
 80009be:	0015      	movs	r5, r2
 80009c0:	e7b4      	b.n	800092c <__aeabi_fadd+0x170>
 80009c2:	2fff      	cmp	r7, #255	; 0xff
 80009c4:	d0c1      	beq.n	800094a <__aeabi_fadd+0x18e>
 80009c6:	2380      	movs	r3, #128	; 0x80
 80009c8:	4640      	mov	r0, r8
 80009ca:	04db      	lsls	r3, r3, #19
 80009cc:	4318      	orrs	r0, r3
 80009ce:	4680      	mov	r8, r0
 80009d0:	2a1b      	cmp	r2, #27
 80009d2:	dd51      	ble.n	8000a78 <__aeabi_fadd+0x2bc>
 80009d4:	2001      	movs	r0, #1
 80009d6:	000c      	movs	r4, r1
 80009d8:	003d      	movs	r5, r7
 80009da:	1a30      	subs	r0, r6, r0
 80009dc:	e712      	b.n	8000804 <__aeabi_fadd+0x48>
 80009de:	4643      	mov	r3, r8
 80009e0:	1b9f      	subs	r7, r3, r6
 80009e2:	017b      	lsls	r3, r7, #5
 80009e4:	d42b      	bmi.n	8000a3e <__aeabi_fadd+0x282>
 80009e6:	2f00      	cmp	r7, #0
 80009e8:	d000      	beq.n	80009ec <__aeabi_fadd+0x230>
 80009ea:	e710      	b.n	800080e <__aeabi_fadd+0x52>
 80009ec:	2300      	movs	r3, #0
 80009ee:	2400      	movs	r4, #0
 80009f0:	2200      	movs	r2, #0
 80009f2:	469c      	mov	ip, r3
 80009f4:	e727      	b.n	8000846 <__aeabi_fadd+0x8a>
 80009f6:	2320      	movs	r3, #32
 80009f8:	0032      	movs	r2, r6
 80009fa:	0030      	movs	r0, r6
 80009fc:	40ca      	lsrs	r2, r1
 80009fe:	1a59      	subs	r1, r3, r1
 8000a00:	4088      	lsls	r0, r1
 8000a02:	1e43      	subs	r3, r0, #1
 8000a04:	4198      	sbcs	r0, r3
 8000a06:	4310      	orrs	r0, r2
 8000a08:	e745      	b.n	8000896 <__aeabi_fadd+0xda>
 8000a0a:	2d00      	cmp	r5, #0
 8000a0c:	d14a      	bne.n	8000aa4 <__aeabi_fadd+0x2e8>
 8000a0e:	4643      	mov	r3, r8
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d063      	beq.n	8000adc <__aeabi_fadd+0x320>
 8000a14:	2200      	movs	r2, #0
 8000a16:	2e00      	cmp	r6, #0
 8000a18:	d100      	bne.n	8000a1c <__aeabi_fadd+0x260>
 8000a1a:	e714      	b.n	8000846 <__aeabi_fadd+0x8a>
 8000a1c:	0030      	movs	r0, r6
 8000a1e:	4440      	add	r0, r8
 8000a20:	0143      	lsls	r3, r0, #5
 8000a22:	d400      	bmi.n	8000a26 <__aeabi_fadd+0x26a>
 8000a24:	e77e      	b.n	8000924 <__aeabi_fadd+0x168>
 8000a26:	4b32      	ldr	r3, [pc, #200]	; (8000af0 <__aeabi_fadd+0x334>)
 8000a28:	3501      	adds	r5, #1
 8000a2a:	4018      	ands	r0, r3
 8000a2c:	e77a      	b.n	8000924 <__aeabi_fadd+0x168>
 8000a2e:	2fff      	cmp	r7, #255	; 0xff
 8000a30:	d08c      	beq.n	800094c <__aeabi_fadd+0x190>
 8000a32:	2380      	movs	r3, #128	; 0x80
 8000a34:	4641      	mov	r1, r8
 8000a36:	04db      	lsls	r3, r3, #19
 8000a38:	4319      	orrs	r1, r3
 8000a3a:	4688      	mov	r8, r1
 8000a3c:	e79f      	b.n	800097e <__aeabi_fadd+0x1c2>
 8000a3e:	4643      	mov	r3, r8
 8000a40:	000c      	movs	r4, r1
 8000a42:	1af7      	subs	r7, r6, r3
 8000a44:	e6e3      	b.n	800080e <__aeabi_fadd+0x52>
 8000a46:	4642      	mov	r2, r8
 8000a48:	2a00      	cmp	r2, #0
 8000a4a:	d000      	beq.n	8000a4e <__aeabi_fadd+0x292>
 8000a4c:	e775      	b.n	800093a <__aeabi_fadd+0x17e>
 8000a4e:	2e00      	cmp	r6, #0
 8000a50:	d000      	beq.n	8000a54 <__aeabi_fadd+0x298>
 8000a52:	e77a      	b.n	800094a <__aeabi_fadd+0x18e>
 8000a54:	2380      	movs	r3, #128	; 0x80
 8000a56:	03db      	lsls	r3, r3, #15
 8000a58:	2400      	movs	r4, #0
 8000a5a:	469c      	mov	ip, r3
 8000a5c:	22ff      	movs	r2, #255	; 0xff
 8000a5e:	e6f2      	b.n	8000846 <__aeabi_fadd+0x8a>
 8000a60:	0030      	movs	r0, r6
 8000a62:	4440      	add	r0, r8
 8000a64:	2501      	movs	r5, #1
 8000a66:	0143      	lsls	r3, r0, #5
 8000a68:	d400      	bmi.n	8000a6c <__aeabi_fadd+0x2b0>
 8000a6a:	e75b      	b.n	8000924 <__aeabi_fadd+0x168>
 8000a6c:	2502      	movs	r5, #2
 8000a6e:	e718      	b.n	80008a2 <__aeabi_fadd+0xe6>
 8000a70:	4643      	mov	r3, r8
 8000a72:	2501      	movs	r5, #1
 8000a74:	1b98      	subs	r0, r3, r6
 8000a76:	e6c5      	b.n	8000804 <__aeabi_fadd+0x48>
 8000a78:	2320      	movs	r3, #32
 8000a7a:	4644      	mov	r4, r8
 8000a7c:	4640      	mov	r0, r8
 8000a7e:	40d4      	lsrs	r4, r2
 8000a80:	1a9a      	subs	r2, r3, r2
 8000a82:	4090      	lsls	r0, r2
 8000a84:	1e43      	subs	r3, r0, #1
 8000a86:	4198      	sbcs	r0, r3
 8000a88:	4320      	orrs	r0, r4
 8000a8a:	e7a4      	b.n	80009d6 <__aeabi_fadd+0x21a>
 8000a8c:	000d      	movs	r5, r1
 8000a8e:	e74d      	b.n	800092c <__aeabi_fadd+0x170>
 8000a90:	2320      	movs	r3, #32
 8000a92:	4641      	mov	r1, r8
 8000a94:	4640      	mov	r0, r8
 8000a96:	40d1      	lsrs	r1, r2
 8000a98:	1a9a      	subs	r2, r3, r2
 8000a9a:	4090      	lsls	r0, r2
 8000a9c:	1e43      	subs	r3, r0, #1
 8000a9e:	4198      	sbcs	r0, r3
 8000aa0:	4308      	orrs	r0, r1
 8000aa2:	e770      	b.n	8000986 <__aeabi_fadd+0x1ca>
 8000aa4:	4642      	mov	r2, r8
 8000aa6:	2a00      	cmp	r2, #0
 8000aa8:	d100      	bne.n	8000aac <__aeabi_fadd+0x2f0>
 8000aaa:	e74f      	b.n	800094c <__aeabi_fadd+0x190>
 8000aac:	2e00      	cmp	r6, #0
 8000aae:	d100      	bne.n	8000ab2 <__aeabi_fadd+0x2f6>
 8000ab0:	e74d      	b.n	800094e <__aeabi_fadd+0x192>
 8000ab2:	2280      	movs	r2, #128	; 0x80
 8000ab4:	03d2      	lsls	r2, r2, #15
 8000ab6:	4213      	tst	r3, r2
 8000ab8:	d100      	bne.n	8000abc <__aeabi_fadd+0x300>
 8000aba:	e748      	b.n	800094e <__aeabi_fadd+0x192>
 8000abc:	4210      	tst	r0, r2
 8000abe:	d000      	beq.n	8000ac2 <__aeabi_fadd+0x306>
 8000ac0:	e745      	b.n	800094e <__aeabi_fadd+0x192>
 8000ac2:	0003      	movs	r3, r0
 8000ac4:	e743      	b.n	800094e <__aeabi_fadd+0x192>
 8000ac6:	2e00      	cmp	r6, #0
 8000ac8:	d090      	beq.n	80009ec <__aeabi_fadd+0x230>
 8000aca:	000c      	movs	r4, r1
 8000acc:	4684      	mov	ip, r0
 8000ace:	2200      	movs	r2, #0
 8000ad0:	e6b9      	b.n	8000846 <__aeabi_fadd+0x8a>
 8000ad2:	4643      	mov	r3, r8
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	1af0      	subs	r0, r6, r3
 8000ad8:	3501      	adds	r5, #1
 8000ada:	e693      	b.n	8000804 <__aeabi_fadd+0x48>
 8000adc:	4684      	mov	ip, r0
 8000ade:	2200      	movs	r2, #0
 8000ae0:	e6b1      	b.n	8000846 <__aeabi_fadd+0x8a>
 8000ae2:	2800      	cmp	r0, #0
 8000ae4:	d000      	beq.n	8000ae8 <__aeabi_fadd+0x32c>
 8000ae6:	e71d      	b.n	8000924 <__aeabi_fadd+0x168>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	2400      	movs	r4, #0
 8000aec:	469c      	mov	ip, r3
 8000aee:	e6aa      	b.n	8000846 <__aeabi_fadd+0x8a>
 8000af0:	fbffffff 	.word	0xfbffffff
 8000af4:	7dffffff 	.word	0x7dffffff

08000af8 <__aeabi_fdiv>:
 8000af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000afa:	464f      	mov	r7, r9
 8000afc:	4646      	mov	r6, r8
 8000afe:	46d6      	mov	lr, sl
 8000b00:	0245      	lsls	r5, r0, #9
 8000b02:	b5c0      	push	{r6, r7, lr}
 8000b04:	0047      	lsls	r7, r0, #1
 8000b06:	1c0c      	adds	r4, r1, #0
 8000b08:	0a6d      	lsrs	r5, r5, #9
 8000b0a:	0e3f      	lsrs	r7, r7, #24
 8000b0c:	0fc6      	lsrs	r6, r0, #31
 8000b0e:	2f00      	cmp	r7, #0
 8000b10:	d100      	bne.n	8000b14 <__aeabi_fdiv+0x1c>
 8000b12:	e070      	b.n	8000bf6 <__aeabi_fdiv+0xfe>
 8000b14:	2fff      	cmp	r7, #255	; 0xff
 8000b16:	d100      	bne.n	8000b1a <__aeabi_fdiv+0x22>
 8000b18:	e075      	b.n	8000c06 <__aeabi_fdiv+0x10e>
 8000b1a:	00eb      	lsls	r3, r5, #3
 8000b1c:	2580      	movs	r5, #128	; 0x80
 8000b1e:	04ed      	lsls	r5, r5, #19
 8000b20:	431d      	orrs	r5, r3
 8000b22:	2300      	movs	r3, #0
 8000b24:	4699      	mov	r9, r3
 8000b26:	469a      	mov	sl, r3
 8000b28:	3f7f      	subs	r7, #127	; 0x7f
 8000b2a:	0260      	lsls	r0, r4, #9
 8000b2c:	0a43      	lsrs	r3, r0, #9
 8000b2e:	4698      	mov	r8, r3
 8000b30:	0063      	lsls	r3, r4, #1
 8000b32:	0e1b      	lsrs	r3, r3, #24
 8000b34:	0fe4      	lsrs	r4, r4, #31
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d04e      	beq.n	8000bd8 <__aeabi_fdiv+0xe0>
 8000b3a:	2bff      	cmp	r3, #255	; 0xff
 8000b3c:	d046      	beq.n	8000bcc <__aeabi_fdiv+0xd4>
 8000b3e:	4642      	mov	r2, r8
 8000b40:	00d0      	lsls	r0, r2, #3
 8000b42:	2280      	movs	r2, #128	; 0x80
 8000b44:	04d2      	lsls	r2, r2, #19
 8000b46:	4302      	orrs	r2, r0
 8000b48:	4690      	mov	r8, r2
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	3b7f      	subs	r3, #127	; 0x7f
 8000b4e:	0031      	movs	r1, r6
 8000b50:	1aff      	subs	r7, r7, r3
 8000b52:	464b      	mov	r3, r9
 8000b54:	4061      	eors	r1, r4
 8000b56:	b2c9      	uxtb	r1, r1
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	2b0f      	cmp	r3, #15
 8000b5c:	d900      	bls.n	8000b60 <__aeabi_fdiv+0x68>
 8000b5e:	e0b5      	b.n	8000ccc <__aeabi_fdiv+0x1d4>
 8000b60:	486e      	ldr	r0, [pc, #440]	; (8000d1c <__aeabi_fdiv+0x224>)
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	58c3      	ldr	r3, [r0, r3]
 8000b66:	469f      	mov	pc, r3
 8000b68:	2300      	movs	r3, #0
 8000b6a:	4698      	mov	r8, r3
 8000b6c:	0026      	movs	r6, r4
 8000b6e:	4645      	mov	r5, r8
 8000b70:	4692      	mov	sl, r2
 8000b72:	4653      	mov	r3, sl
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d100      	bne.n	8000b7a <__aeabi_fdiv+0x82>
 8000b78:	e089      	b.n	8000c8e <__aeabi_fdiv+0x196>
 8000b7a:	2b03      	cmp	r3, #3
 8000b7c:	d100      	bne.n	8000b80 <__aeabi_fdiv+0x88>
 8000b7e:	e09e      	b.n	8000cbe <__aeabi_fdiv+0x1c6>
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d018      	beq.n	8000bb6 <__aeabi_fdiv+0xbe>
 8000b84:	003b      	movs	r3, r7
 8000b86:	337f      	adds	r3, #127	; 0x7f
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	dd69      	ble.n	8000c60 <__aeabi_fdiv+0x168>
 8000b8c:	076a      	lsls	r2, r5, #29
 8000b8e:	d004      	beq.n	8000b9a <__aeabi_fdiv+0xa2>
 8000b90:	220f      	movs	r2, #15
 8000b92:	402a      	ands	r2, r5
 8000b94:	2a04      	cmp	r2, #4
 8000b96:	d000      	beq.n	8000b9a <__aeabi_fdiv+0xa2>
 8000b98:	3504      	adds	r5, #4
 8000b9a:	012a      	lsls	r2, r5, #4
 8000b9c:	d503      	bpl.n	8000ba6 <__aeabi_fdiv+0xae>
 8000b9e:	4b60      	ldr	r3, [pc, #384]	; (8000d20 <__aeabi_fdiv+0x228>)
 8000ba0:	401d      	ands	r5, r3
 8000ba2:	003b      	movs	r3, r7
 8000ba4:	3380      	adds	r3, #128	; 0x80
 8000ba6:	2bfe      	cmp	r3, #254	; 0xfe
 8000ba8:	dd00      	ble.n	8000bac <__aeabi_fdiv+0xb4>
 8000baa:	e070      	b.n	8000c8e <__aeabi_fdiv+0x196>
 8000bac:	01ad      	lsls	r5, r5, #6
 8000bae:	0a6d      	lsrs	r5, r5, #9
 8000bb0:	b2d8      	uxtb	r0, r3
 8000bb2:	e002      	b.n	8000bba <__aeabi_fdiv+0xc2>
 8000bb4:	000e      	movs	r6, r1
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	2500      	movs	r5, #0
 8000bba:	05c0      	lsls	r0, r0, #23
 8000bbc:	4328      	orrs	r0, r5
 8000bbe:	07f6      	lsls	r6, r6, #31
 8000bc0:	4330      	orrs	r0, r6
 8000bc2:	bce0      	pop	{r5, r6, r7}
 8000bc4:	46ba      	mov	sl, r7
 8000bc6:	46b1      	mov	r9, r6
 8000bc8:	46a8      	mov	r8, r5
 8000bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bcc:	4643      	mov	r3, r8
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d13f      	bne.n	8000c52 <__aeabi_fdiv+0x15a>
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	3fff      	subs	r7, #255	; 0xff
 8000bd6:	e003      	b.n	8000be0 <__aeabi_fdiv+0xe8>
 8000bd8:	4643      	mov	r3, r8
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d12d      	bne.n	8000c3a <__aeabi_fdiv+0x142>
 8000bde:	2201      	movs	r2, #1
 8000be0:	0031      	movs	r1, r6
 8000be2:	464b      	mov	r3, r9
 8000be4:	4061      	eors	r1, r4
 8000be6:	b2c9      	uxtb	r1, r1
 8000be8:	4313      	orrs	r3, r2
 8000bea:	2b0f      	cmp	r3, #15
 8000bec:	d834      	bhi.n	8000c58 <__aeabi_fdiv+0x160>
 8000bee:	484d      	ldr	r0, [pc, #308]	; (8000d24 <__aeabi_fdiv+0x22c>)
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	58c3      	ldr	r3, [r0, r3]
 8000bf4:	469f      	mov	pc, r3
 8000bf6:	2d00      	cmp	r5, #0
 8000bf8:	d113      	bne.n	8000c22 <__aeabi_fdiv+0x12a>
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	4699      	mov	r9, r3
 8000bfe:	3b03      	subs	r3, #3
 8000c00:	2700      	movs	r7, #0
 8000c02:	469a      	mov	sl, r3
 8000c04:	e791      	b.n	8000b2a <__aeabi_fdiv+0x32>
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	d105      	bne.n	8000c16 <__aeabi_fdiv+0x11e>
 8000c0a:	2308      	movs	r3, #8
 8000c0c:	4699      	mov	r9, r3
 8000c0e:	3b06      	subs	r3, #6
 8000c10:	27ff      	movs	r7, #255	; 0xff
 8000c12:	469a      	mov	sl, r3
 8000c14:	e789      	b.n	8000b2a <__aeabi_fdiv+0x32>
 8000c16:	230c      	movs	r3, #12
 8000c18:	4699      	mov	r9, r3
 8000c1a:	3b09      	subs	r3, #9
 8000c1c:	27ff      	movs	r7, #255	; 0xff
 8000c1e:	469a      	mov	sl, r3
 8000c20:	e783      	b.n	8000b2a <__aeabi_fdiv+0x32>
 8000c22:	0028      	movs	r0, r5
 8000c24:	f002 f952 	bl	8002ecc <__clzsi2>
 8000c28:	2776      	movs	r7, #118	; 0x76
 8000c2a:	1f43      	subs	r3, r0, #5
 8000c2c:	409d      	lsls	r5, r3
 8000c2e:	2300      	movs	r3, #0
 8000c30:	427f      	negs	r7, r7
 8000c32:	4699      	mov	r9, r3
 8000c34:	469a      	mov	sl, r3
 8000c36:	1a3f      	subs	r7, r7, r0
 8000c38:	e777      	b.n	8000b2a <__aeabi_fdiv+0x32>
 8000c3a:	4640      	mov	r0, r8
 8000c3c:	f002 f946 	bl	8002ecc <__clzsi2>
 8000c40:	4642      	mov	r2, r8
 8000c42:	1f43      	subs	r3, r0, #5
 8000c44:	409a      	lsls	r2, r3
 8000c46:	2376      	movs	r3, #118	; 0x76
 8000c48:	425b      	negs	r3, r3
 8000c4a:	4690      	mov	r8, r2
 8000c4c:	1a1b      	subs	r3, r3, r0
 8000c4e:	2200      	movs	r2, #0
 8000c50:	e77d      	b.n	8000b4e <__aeabi_fdiv+0x56>
 8000c52:	23ff      	movs	r3, #255	; 0xff
 8000c54:	2203      	movs	r2, #3
 8000c56:	e77a      	b.n	8000b4e <__aeabi_fdiv+0x56>
 8000c58:	000e      	movs	r6, r1
 8000c5a:	20ff      	movs	r0, #255	; 0xff
 8000c5c:	2500      	movs	r5, #0
 8000c5e:	e7ac      	b.n	8000bba <__aeabi_fdiv+0xc2>
 8000c60:	2001      	movs	r0, #1
 8000c62:	1ac0      	subs	r0, r0, r3
 8000c64:	281b      	cmp	r0, #27
 8000c66:	dca6      	bgt.n	8000bb6 <__aeabi_fdiv+0xbe>
 8000c68:	379e      	adds	r7, #158	; 0x9e
 8000c6a:	002a      	movs	r2, r5
 8000c6c:	40bd      	lsls	r5, r7
 8000c6e:	40c2      	lsrs	r2, r0
 8000c70:	1e6b      	subs	r3, r5, #1
 8000c72:	419d      	sbcs	r5, r3
 8000c74:	4315      	orrs	r5, r2
 8000c76:	076b      	lsls	r3, r5, #29
 8000c78:	d004      	beq.n	8000c84 <__aeabi_fdiv+0x18c>
 8000c7a:	230f      	movs	r3, #15
 8000c7c:	402b      	ands	r3, r5
 8000c7e:	2b04      	cmp	r3, #4
 8000c80:	d000      	beq.n	8000c84 <__aeabi_fdiv+0x18c>
 8000c82:	3504      	adds	r5, #4
 8000c84:	016b      	lsls	r3, r5, #5
 8000c86:	d544      	bpl.n	8000d12 <__aeabi_fdiv+0x21a>
 8000c88:	2001      	movs	r0, #1
 8000c8a:	2500      	movs	r5, #0
 8000c8c:	e795      	b.n	8000bba <__aeabi_fdiv+0xc2>
 8000c8e:	20ff      	movs	r0, #255	; 0xff
 8000c90:	2500      	movs	r5, #0
 8000c92:	e792      	b.n	8000bba <__aeabi_fdiv+0xc2>
 8000c94:	2580      	movs	r5, #128	; 0x80
 8000c96:	2600      	movs	r6, #0
 8000c98:	20ff      	movs	r0, #255	; 0xff
 8000c9a:	03ed      	lsls	r5, r5, #15
 8000c9c:	e78d      	b.n	8000bba <__aeabi_fdiv+0xc2>
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	4698      	mov	r8, r3
 8000ca2:	2080      	movs	r0, #128	; 0x80
 8000ca4:	03c0      	lsls	r0, r0, #15
 8000ca6:	4205      	tst	r5, r0
 8000ca8:	d009      	beq.n	8000cbe <__aeabi_fdiv+0x1c6>
 8000caa:	4643      	mov	r3, r8
 8000cac:	4203      	tst	r3, r0
 8000cae:	d106      	bne.n	8000cbe <__aeabi_fdiv+0x1c6>
 8000cb0:	4645      	mov	r5, r8
 8000cb2:	4305      	orrs	r5, r0
 8000cb4:	026d      	lsls	r5, r5, #9
 8000cb6:	0026      	movs	r6, r4
 8000cb8:	20ff      	movs	r0, #255	; 0xff
 8000cba:	0a6d      	lsrs	r5, r5, #9
 8000cbc:	e77d      	b.n	8000bba <__aeabi_fdiv+0xc2>
 8000cbe:	2080      	movs	r0, #128	; 0x80
 8000cc0:	03c0      	lsls	r0, r0, #15
 8000cc2:	4305      	orrs	r5, r0
 8000cc4:	026d      	lsls	r5, r5, #9
 8000cc6:	20ff      	movs	r0, #255	; 0xff
 8000cc8:	0a6d      	lsrs	r5, r5, #9
 8000cca:	e776      	b.n	8000bba <__aeabi_fdiv+0xc2>
 8000ccc:	4642      	mov	r2, r8
 8000cce:	016b      	lsls	r3, r5, #5
 8000cd0:	0150      	lsls	r0, r2, #5
 8000cd2:	4283      	cmp	r3, r0
 8000cd4:	d219      	bcs.n	8000d0a <__aeabi_fdiv+0x212>
 8000cd6:	221b      	movs	r2, #27
 8000cd8:	2500      	movs	r5, #0
 8000cda:	3f01      	subs	r7, #1
 8000cdc:	2601      	movs	r6, #1
 8000cde:	001c      	movs	r4, r3
 8000ce0:	006d      	lsls	r5, r5, #1
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	2c00      	cmp	r4, #0
 8000ce6:	db01      	blt.n	8000cec <__aeabi_fdiv+0x1f4>
 8000ce8:	4298      	cmp	r0, r3
 8000cea:	d801      	bhi.n	8000cf0 <__aeabi_fdiv+0x1f8>
 8000cec:	1a1b      	subs	r3, r3, r0
 8000cee:	4335      	orrs	r5, r6
 8000cf0:	3a01      	subs	r2, #1
 8000cf2:	2a00      	cmp	r2, #0
 8000cf4:	d1f3      	bne.n	8000cde <__aeabi_fdiv+0x1e6>
 8000cf6:	1e5a      	subs	r2, r3, #1
 8000cf8:	4193      	sbcs	r3, r2
 8000cfa:	431d      	orrs	r5, r3
 8000cfc:	003b      	movs	r3, r7
 8000cfe:	337f      	adds	r3, #127	; 0x7f
 8000d00:	000e      	movs	r6, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	dd00      	ble.n	8000d08 <__aeabi_fdiv+0x210>
 8000d06:	e741      	b.n	8000b8c <__aeabi_fdiv+0x94>
 8000d08:	e7aa      	b.n	8000c60 <__aeabi_fdiv+0x168>
 8000d0a:	221a      	movs	r2, #26
 8000d0c:	2501      	movs	r5, #1
 8000d0e:	1a1b      	subs	r3, r3, r0
 8000d10:	e7e4      	b.n	8000cdc <__aeabi_fdiv+0x1e4>
 8000d12:	01ad      	lsls	r5, r5, #6
 8000d14:	2000      	movs	r0, #0
 8000d16:	0a6d      	lsrs	r5, r5, #9
 8000d18:	e74f      	b.n	8000bba <__aeabi_fdiv+0xc2>
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	0800baf8 	.word	0x0800baf8
 8000d20:	f7ffffff 	.word	0xf7ffffff
 8000d24:	0800bb38 	.word	0x0800bb38

08000d28 <__aeabi_fsub>:
 8000d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d2a:	46ce      	mov	lr, r9
 8000d2c:	4647      	mov	r7, r8
 8000d2e:	0243      	lsls	r3, r0, #9
 8000d30:	0a5b      	lsrs	r3, r3, #9
 8000d32:	024e      	lsls	r6, r1, #9
 8000d34:	00da      	lsls	r2, r3, #3
 8000d36:	4694      	mov	ip, r2
 8000d38:	0a72      	lsrs	r2, r6, #9
 8000d3a:	4691      	mov	r9, r2
 8000d3c:	0045      	lsls	r5, r0, #1
 8000d3e:	004a      	lsls	r2, r1, #1
 8000d40:	b580      	push	{r7, lr}
 8000d42:	0e2d      	lsrs	r5, r5, #24
 8000d44:	001f      	movs	r7, r3
 8000d46:	0fc4      	lsrs	r4, r0, #31
 8000d48:	0e12      	lsrs	r2, r2, #24
 8000d4a:	0fc9      	lsrs	r1, r1, #31
 8000d4c:	09b6      	lsrs	r6, r6, #6
 8000d4e:	2aff      	cmp	r2, #255	; 0xff
 8000d50:	d05b      	beq.n	8000e0a <__aeabi_fsub+0xe2>
 8000d52:	2001      	movs	r0, #1
 8000d54:	4041      	eors	r1, r0
 8000d56:	428c      	cmp	r4, r1
 8000d58:	d039      	beq.n	8000dce <__aeabi_fsub+0xa6>
 8000d5a:	1aa8      	subs	r0, r5, r2
 8000d5c:	2800      	cmp	r0, #0
 8000d5e:	dd5a      	ble.n	8000e16 <__aeabi_fsub+0xee>
 8000d60:	2a00      	cmp	r2, #0
 8000d62:	d06a      	beq.n	8000e3a <__aeabi_fsub+0x112>
 8000d64:	2dff      	cmp	r5, #255	; 0xff
 8000d66:	d100      	bne.n	8000d6a <__aeabi_fsub+0x42>
 8000d68:	e0d9      	b.n	8000f1e <__aeabi_fsub+0x1f6>
 8000d6a:	2280      	movs	r2, #128	; 0x80
 8000d6c:	04d2      	lsls	r2, r2, #19
 8000d6e:	4316      	orrs	r6, r2
 8000d70:	281b      	cmp	r0, #27
 8000d72:	dc00      	bgt.n	8000d76 <__aeabi_fsub+0x4e>
 8000d74:	e0e9      	b.n	8000f4a <__aeabi_fsub+0x222>
 8000d76:	2001      	movs	r0, #1
 8000d78:	4663      	mov	r3, ip
 8000d7a:	1a18      	subs	r0, r3, r0
 8000d7c:	0143      	lsls	r3, r0, #5
 8000d7e:	d400      	bmi.n	8000d82 <__aeabi_fsub+0x5a>
 8000d80:	e0b4      	b.n	8000eec <__aeabi_fsub+0x1c4>
 8000d82:	0180      	lsls	r0, r0, #6
 8000d84:	0987      	lsrs	r7, r0, #6
 8000d86:	0038      	movs	r0, r7
 8000d88:	f002 f8a0 	bl	8002ecc <__clzsi2>
 8000d8c:	3805      	subs	r0, #5
 8000d8e:	4087      	lsls	r7, r0
 8000d90:	4285      	cmp	r5, r0
 8000d92:	dc00      	bgt.n	8000d96 <__aeabi_fsub+0x6e>
 8000d94:	e0cc      	b.n	8000f30 <__aeabi_fsub+0x208>
 8000d96:	1a2d      	subs	r5, r5, r0
 8000d98:	48b5      	ldr	r0, [pc, #724]	; (8001070 <__aeabi_fsub+0x348>)
 8000d9a:	4038      	ands	r0, r7
 8000d9c:	0743      	lsls	r3, r0, #29
 8000d9e:	d004      	beq.n	8000daa <__aeabi_fsub+0x82>
 8000da0:	230f      	movs	r3, #15
 8000da2:	4003      	ands	r3, r0
 8000da4:	2b04      	cmp	r3, #4
 8000da6:	d000      	beq.n	8000daa <__aeabi_fsub+0x82>
 8000da8:	3004      	adds	r0, #4
 8000daa:	0143      	lsls	r3, r0, #5
 8000dac:	d400      	bmi.n	8000db0 <__aeabi_fsub+0x88>
 8000dae:	e0a0      	b.n	8000ef2 <__aeabi_fsub+0x1ca>
 8000db0:	1c6a      	adds	r2, r5, #1
 8000db2:	2dfe      	cmp	r5, #254	; 0xfe
 8000db4:	d100      	bne.n	8000db8 <__aeabi_fsub+0x90>
 8000db6:	e08d      	b.n	8000ed4 <__aeabi_fsub+0x1ac>
 8000db8:	0180      	lsls	r0, r0, #6
 8000dba:	0a47      	lsrs	r7, r0, #9
 8000dbc:	b2d2      	uxtb	r2, r2
 8000dbe:	05d0      	lsls	r0, r2, #23
 8000dc0:	4338      	orrs	r0, r7
 8000dc2:	07e4      	lsls	r4, r4, #31
 8000dc4:	4320      	orrs	r0, r4
 8000dc6:	bcc0      	pop	{r6, r7}
 8000dc8:	46b9      	mov	r9, r7
 8000dca:	46b0      	mov	r8, r6
 8000dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000dce:	1aa8      	subs	r0, r5, r2
 8000dd0:	4680      	mov	r8, r0
 8000dd2:	2800      	cmp	r0, #0
 8000dd4:	dd45      	ble.n	8000e62 <__aeabi_fsub+0x13a>
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	d070      	beq.n	8000ebc <__aeabi_fsub+0x194>
 8000dda:	2dff      	cmp	r5, #255	; 0xff
 8000ddc:	d100      	bne.n	8000de0 <__aeabi_fsub+0xb8>
 8000dde:	e09e      	b.n	8000f1e <__aeabi_fsub+0x1f6>
 8000de0:	2380      	movs	r3, #128	; 0x80
 8000de2:	04db      	lsls	r3, r3, #19
 8000de4:	431e      	orrs	r6, r3
 8000de6:	4643      	mov	r3, r8
 8000de8:	2b1b      	cmp	r3, #27
 8000dea:	dc00      	bgt.n	8000dee <__aeabi_fsub+0xc6>
 8000dec:	e0d2      	b.n	8000f94 <__aeabi_fsub+0x26c>
 8000dee:	2001      	movs	r0, #1
 8000df0:	4460      	add	r0, ip
 8000df2:	0143      	lsls	r3, r0, #5
 8000df4:	d57a      	bpl.n	8000eec <__aeabi_fsub+0x1c4>
 8000df6:	3501      	adds	r5, #1
 8000df8:	2dff      	cmp	r5, #255	; 0xff
 8000dfa:	d06b      	beq.n	8000ed4 <__aeabi_fsub+0x1ac>
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	4a9d      	ldr	r2, [pc, #628]	; (8001074 <__aeabi_fsub+0x34c>)
 8000e00:	4003      	ands	r3, r0
 8000e02:	0840      	lsrs	r0, r0, #1
 8000e04:	4010      	ands	r0, r2
 8000e06:	4318      	orrs	r0, r3
 8000e08:	e7c8      	b.n	8000d9c <__aeabi_fsub+0x74>
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d020      	beq.n	8000e50 <__aeabi_fsub+0x128>
 8000e0e:	428c      	cmp	r4, r1
 8000e10:	d023      	beq.n	8000e5a <__aeabi_fsub+0x132>
 8000e12:	0028      	movs	r0, r5
 8000e14:	38ff      	subs	r0, #255	; 0xff
 8000e16:	2800      	cmp	r0, #0
 8000e18:	d039      	beq.n	8000e8e <__aeabi_fsub+0x166>
 8000e1a:	1b57      	subs	r7, r2, r5
 8000e1c:	2d00      	cmp	r5, #0
 8000e1e:	d000      	beq.n	8000e22 <__aeabi_fsub+0xfa>
 8000e20:	e09d      	b.n	8000f5e <__aeabi_fsub+0x236>
 8000e22:	4663      	mov	r3, ip
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d100      	bne.n	8000e2a <__aeabi_fsub+0x102>
 8000e28:	e0db      	b.n	8000fe2 <__aeabi_fsub+0x2ba>
 8000e2a:	1e7b      	subs	r3, r7, #1
 8000e2c:	2f01      	cmp	r7, #1
 8000e2e:	d100      	bne.n	8000e32 <__aeabi_fsub+0x10a>
 8000e30:	e10d      	b.n	800104e <__aeabi_fsub+0x326>
 8000e32:	2fff      	cmp	r7, #255	; 0xff
 8000e34:	d071      	beq.n	8000f1a <__aeabi_fsub+0x1f2>
 8000e36:	001f      	movs	r7, r3
 8000e38:	e098      	b.n	8000f6c <__aeabi_fsub+0x244>
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d100      	bne.n	8000e40 <__aeabi_fsub+0x118>
 8000e3e:	e0a7      	b.n	8000f90 <__aeabi_fsub+0x268>
 8000e40:	1e42      	subs	r2, r0, #1
 8000e42:	2801      	cmp	r0, #1
 8000e44:	d100      	bne.n	8000e48 <__aeabi_fsub+0x120>
 8000e46:	e0e6      	b.n	8001016 <__aeabi_fsub+0x2ee>
 8000e48:	28ff      	cmp	r0, #255	; 0xff
 8000e4a:	d068      	beq.n	8000f1e <__aeabi_fsub+0x1f6>
 8000e4c:	0010      	movs	r0, r2
 8000e4e:	e78f      	b.n	8000d70 <__aeabi_fsub+0x48>
 8000e50:	2001      	movs	r0, #1
 8000e52:	4041      	eors	r1, r0
 8000e54:	42a1      	cmp	r1, r4
 8000e56:	d000      	beq.n	8000e5a <__aeabi_fsub+0x132>
 8000e58:	e77f      	b.n	8000d5a <__aeabi_fsub+0x32>
 8000e5a:	20ff      	movs	r0, #255	; 0xff
 8000e5c:	4240      	negs	r0, r0
 8000e5e:	4680      	mov	r8, r0
 8000e60:	44a8      	add	r8, r5
 8000e62:	4640      	mov	r0, r8
 8000e64:	2800      	cmp	r0, #0
 8000e66:	d038      	beq.n	8000eda <__aeabi_fsub+0x1b2>
 8000e68:	1b51      	subs	r1, r2, r5
 8000e6a:	2d00      	cmp	r5, #0
 8000e6c:	d100      	bne.n	8000e70 <__aeabi_fsub+0x148>
 8000e6e:	e0ae      	b.n	8000fce <__aeabi_fsub+0x2a6>
 8000e70:	2aff      	cmp	r2, #255	; 0xff
 8000e72:	d100      	bne.n	8000e76 <__aeabi_fsub+0x14e>
 8000e74:	e0df      	b.n	8001036 <__aeabi_fsub+0x30e>
 8000e76:	2380      	movs	r3, #128	; 0x80
 8000e78:	4660      	mov	r0, ip
 8000e7a:	04db      	lsls	r3, r3, #19
 8000e7c:	4318      	orrs	r0, r3
 8000e7e:	4684      	mov	ip, r0
 8000e80:	291b      	cmp	r1, #27
 8000e82:	dc00      	bgt.n	8000e86 <__aeabi_fsub+0x15e>
 8000e84:	e0d9      	b.n	800103a <__aeabi_fsub+0x312>
 8000e86:	2001      	movs	r0, #1
 8000e88:	0015      	movs	r5, r2
 8000e8a:	1980      	adds	r0, r0, r6
 8000e8c:	e7b1      	b.n	8000df2 <__aeabi_fsub+0xca>
 8000e8e:	20fe      	movs	r0, #254	; 0xfe
 8000e90:	1c6a      	adds	r2, r5, #1
 8000e92:	4210      	tst	r0, r2
 8000e94:	d171      	bne.n	8000f7a <__aeabi_fsub+0x252>
 8000e96:	2d00      	cmp	r5, #0
 8000e98:	d000      	beq.n	8000e9c <__aeabi_fsub+0x174>
 8000e9a:	e0a6      	b.n	8000fea <__aeabi_fsub+0x2c2>
 8000e9c:	4663      	mov	r3, ip
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d100      	bne.n	8000ea4 <__aeabi_fsub+0x17c>
 8000ea2:	e0d9      	b.n	8001058 <__aeabi_fsub+0x330>
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2e00      	cmp	r6, #0
 8000ea8:	d100      	bne.n	8000eac <__aeabi_fsub+0x184>
 8000eaa:	e788      	b.n	8000dbe <__aeabi_fsub+0x96>
 8000eac:	1b98      	subs	r0, r3, r6
 8000eae:	0143      	lsls	r3, r0, #5
 8000eb0:	d400      	bmi.n	8000eb4 <__aeabi_fsub+0x18c>
 8000eb2:	e0e1      	b.n	8001078 <__aeabi_fsub+0x350>
 8000eb4:	4663      	mov	r3, ip
 8000eb6:	000c      	movs	r4, r1
 8000eb8:	1af0      	subs	r0, r6, r3
 8000eba:	e76f      	b.n	8000d9c <__aeabi_fsub+0x74>
 8000ebc:	2e00      	cmp	r6, #0
 8000ebe:	d100      	bne.n	8000ec2 <__aeabi_fsub+0x19a>
 8000ec0:	e0b7      	b.n	8001032 <__aeabi_fsub+0x30a>
 8000ec2:	0002      	movs	r2, r0
 8000ec4:	3a01      	subs	r2, #1
 8000ec6:	2801      	cmp	r0, #1
 8000ec8:	d100      	bne.n	8000ecc <__aeabi_fsub+0x1a4>
 8000eca:	e09c      	b.n	8001006 <__aeabi_fsub+0x2de>
 8000ecc:	28ff      	cmp	r0, #255	; 0xff
 8000ece:	d026      	beq.n	8000f1e <__aeabi_fsub+0x1f6>
 8000ed0:	4690      	mov	r8, r2
 8000ed2:	e788      	b.n	8000de6 <__aeabi_fsub+0xbe>
 8000ed4:	22ff      	movs	r2, #255	; 0xff
 8000ed6:	2700      	movs	r7, #0
 8000ed8:	e771      	b.n	8000dbe <__aeabi_fsub+0x96>
 8000eda:	20fe      	movs	r0, #254	; 0xfe
 8000edc:	1c6a      	adds	r2, r5, #1
 8000ede:	4210      	tst	r0, r2
 8000ee0:	d064      	beq.n	8000fac <__aeabi_fsub+0x284>
 8000ee2:	2aff      	cmp	r2, #255	; 0xff
 8000ee4:	d0f6      	beq.n	8000ed4 <__aeabi_fsub+0x1ac>
 8000ee6:	0015      	movs	r5, r2
 8000ee8:	4466      	add	r6, ip
 8000eea:	0870      	lsrs	r0, r6, #1
 8000eec:	0743      	lsls	r3, r0, #29
 8000eee:	d000      	beq.n	8000ef2 <__aeabi_fsub+0x1ca>
 8000ef0:	e756      	b.n	8000da0 <__aeabi_fsub+0x78>
 8000ef2:	08c3      	lsrs	r3, r0, #3
 8000ef4:	2dff      	cmp	r5, #255	; 0xff
 8000ef6:	d012      	beq.n	8000f1e <__aeabi_fsub+0x1f6>
 8000ef8:	025b      	lsls	r3, r3, #9
 8000efa:	0a5f      	lsrs	r7, r3, #9
 8000efc:	b2ea      	uxtb	r2, r5
 8000efe:	e75e      	b.n	8000dbe <__aeabi_fsub+0x96>
 8000f00:	4662      	mov	r2, ip
 8000f02:	2a00      	cmp	r2, #0
 8000f04:	d100      	bne.n	8000f08 <__aeabi_fsub+0x1e0>
 8000f06:	e096      	b.n	8001036 <__aeabi_fsub+0x30e>
 8000f08:	2e00      	cmp	r6, #0
 8000f0a:	d008      	beq.n	8000f1e <__aeabi_fsub+0x1f6>
 8000f0c:	2280      	movs	r2, #128	; 0x80
 8000f0e:	03d2      	lsls	r2, r2, #15
 8000f10:	4213      	tst	r3, r2
 8000f12:	d004      	beq.n	8000f1e <__aeabi_fsub+0x1f6>
 8000f14:	4648      	mov	r0, r9
 8000f16:	4210      	tst	r0, r2
 8000f18:	d101      	bne.n	8000f1e <__aeabi_fsub+0x1f6>
 8000f1a:	000c      	movs	r4, r1
 8000f1c:	464b      	mov	r3, r9
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d0d8      	beq.n	8000ed4 <__aeabi_fsub+0x1ac>
 8000f22:	2780      	movs	r7, #128	; 0x80
 8000f24:	03ff      	lsls	r7, r7, #15
 8000f26:	431f      	orrs	r7, r3
 8000f28:	027f      	lsls	r7, r7, #9
 8000f2a:	22ff      	movs	r2, #255	; 0xff
 8000f2c:	0a7f      	lsrs	r7, r7, #9
 8000f2e:	e746      	b.n	8000dbe <__aeabi_fsub+0x96>
 8000f30:	2320      	movs	r3, #32
 8000f32:	003a      	movs	r2, r7
 8000f34:	1b45      	subs	r5, r0, r5
 8000f36:	0038      	movs	r0, r7
 8000f38:	3501      	adds	r5, #1
 8000f3a:	40ea      	lsrs	r2, r5
 8000f3c:	1b5d      	subs	r5, r3, r5
 8000f3e:	40a8      	lsls	r0, r5
 8000f40:	1e43      	subs	r3, r0, #1
 8000f42:	4198      	sbcs	r0, r3
 8000f44:	2500      	movs	r5, #0
 8000f46:	4310      	orrs	r0, r2
 8000f48:	e728      	b.n	8000d9c <__aeabi_fsub+0x74>
 8000f4a:	2320      	movs	r3, #32
 8000f4c:	1a1b      	subs	r3, r3, r0
 8000f4e:	0032      	movs	r2, r6
 8000f50:	409e      	lsls	r6, r3
 8000f52:	40c2      	lsrs	r2, r0
 8000f54:	0030      	movs	r0, r6
 8000f56:	1e43      	subs	r3, r0, #1
 8000f58:	4198      	sbcs	r0, r3
 8000f5a:	4310      	orrs	r0, r2
 8000f5c:	e70c      	b.n	8000d78 <__aeabi_fsub+0x50>
 8000f5e:	2aff      	cmp	r2, #255	; 0xff
 8000f60:	d0db      	beq.n	8000f1a <__aeabi_fsub+0x1f2>
 8000f62:	2380      	movs	r3, #128	; 0x80
 8000f64:	4660      	mov	r0, ip
 8000f66:	04db      	lsls	r3, r3, #19
 8000f68:	4318      	orrs	r0, r3
 8000f6a:	4684      	mov	ip, r0
 8000f6c:	2f1b      	cmp	r7, #27
 8000f6e:	dd56      	ble.n	800101e <__aeabi_fsub+0x2f6>
 8000f70:	2001      	movs	r0, #1
 8000f72:	000c      	movs	r4, r1
 8000f74:	0015      	movs	r5, r2
 8000f76:	1a30      	subs	r0, r6, r0
 8000f78:	e700      	b.n	8000d7c <__aeabi_fsub+0x54>
 8000f7a:	4663      	mov	r3, ip
 8000f7c:	1b9f      	subs	r7, r3, r6
 8000f7e:	017b      	lsls	r3, r7, #5
 8000f80:	d43d      	bmi.n	8000ffe <__aeabi_fsub+0x2d6>
 8000f82:	2f00      	cmp	r7, #0
 8000f84:	d000      	beq.n	8000f88 <__aeabi_fsub+0x260>
 8000f86:	e6fe      	b.n	8000d86 <__aeabi_fsub+0x5e>
 8000f88:	2400      	movs	r4, #0
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2700      	movs	r7, #0
 8000f8e:	e716      	b.n	8000dbe <__aeabi_fsub+0x96>
 8000f90:	0005      	movs	r5, r0
 8000f92:	e7af      	b.n	8000ef4 <__aeabi_fsub+0x1cc>
 8000f94:	0032      	movs	r2, r6
 8000f96:	4643      	mov	r3, r8
 8000f98:	4641      	mov	r1, r8
 8000f9a:	40da      	lsrs	r2, r3
 8000f9c:	2320      	movs	r3, #32
 8000f9e:	1a5b      	subs	r3, r3, r1
 8000fa0:	409e      	lsls	r6, r3
 8000fa2:	0030      	movs	r0, r6
 8000fa4:	1e43      	subs	r3, r0, #1
 8000fa6:	4198      	sbcs	r0, r3
 8000fa8:	4310      	orrs	r0, r2
 8000faa:	e721      	b.n	8000df0 <__aeabi_fsub+0xc8>
 8000fac:	2d00      	cmp	r5, #0
 8000fae:	d1a7      	bne.n	8000f00 <__aeabi_fsub+0x1d8>
 8000fb0:	4663      	mov	r3, ip
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d059      	beq.n	800106a <__aeabi_fsub+0x342>
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2e00      	cmp	r6, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fsub+0x296>
 8000fbc:	e6ff      	b.n	8000dbe <__aeabi_fsub+0x96>
 8000fbe:	0030      	movs	r0, r6
 8000fc0:	4460      	add	r0, ip
 8000fc2:	0143      	lsls	r3, r0, #5
 8000fc4:	d592      	bpl.n	8000eec <__aeabi_fsub+0x1c4>
 8000fc6:	4b2a      	ldr	r3, [pc, #168]	; (8001070 <__aeabi_fsub+0x348>)
 8000fc8:	3501      	adds	r5, #1
 8000fca:	4018      	ands	r0, r3
 8000fcc:	e78e      	b.n	8000eec <__aeabi_fsub+0x1c4>
 8000fce:	4663      	mov	r3, ip
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d047      	beq.n	8001064 <__aeabi_fsub+0x33c>
 8000fd4:	1e4b      	subs	r3, r1, #1
 8000fd6:	2901      	cmp	r1, #1
 8000fd8:	d015      	beq.n	8001006 <__aeabi_fsub+0x2de>
 8000fda:	29ff      	cmp	r1, #255	; 0xff
 8000fdc:	d02b      	beq.n	8001036 <__aeabi_fsub+0x30e>
 8000fde:	0019      	movs	r1, r3
 8000fe0:	e74e      	b.n	8000e80 <__aeabi_fsub+0x158>
 8000fe2:	000c      	movs	r4, r1
 8000fe4:	464b      	mov	r3, r9
 8000fe6:	003d      	movs	r5, r7
 8000fe8:	e784      	b.n	8000ef4 <__aeabi_fsub+0x1cc>
 8000fea:	4662      	mov	r2, ip
 8000fec:	2a00      	cmp	r2, #0
 8000fee:	d18b      	bne.n	8000f08 <__aeabi_fsub+0x1e0>
 8000ff0:	2e00      	cmp	r6, #0
 8000ff2:	d192      	bne.n	8000f1a <__aeabi_fsub+0x1f2>
 8000ff4:	2780      	movs	r7, #128	; 0x80
 8000ff6:	2400      	movs	r4, #0
 8000ff8:	22ff      	movs	r2, #255	; 0xff
 8000ffa:	03ff      	lsls	r7, r7, #15
 8000ffc:	e6df      	b.n	8000dbe <__aeabi_fsub+0x96>
 8000ffe:	4663      	mov	r3, ip
 8001000:	000c      	movs	r4, r1
 8001002:	1af7      	subs	r7, r6, r3
 8001004:	e6bf      	b.n	8000d86 <__aeabi_fsub+0x5e>
 8001006:	0030      	movs	r0, r6
 8001008:	4460      	add	r0, ip
 800100a:	2501      	movs	r5, #1
 800100c:	0143      	lsls	r3, r0, #5
 800100e:	d400      	bmi.n	8001012 <__aeabi_fsub+0x2ea>
 8001010:	e76c      	b.n	8000eec <__aeabi_fsub+0x1c4>
 8001012:	2502      	movs	r5, #2
 8001014:	e6f2      	b.n	8000dfc <__aeabi_fsub+0xd4>
 8001016:	4663      	mov	r3, ip
 8001018:	2501      	movs	r5, #1
 800101a:	1b98      	subs	r0, r3, r6
 800101c:	e6ae      	b.n	8000d7c <__aeabi_fsub+0x54>
 800101e:	2320      	movs	r3, #32
 8001020:	4664      	mov	r4, ip
 8001022:	4660      	mov	r0, ip
 8001024:	40fc      	lsrs	r4, r7
 8001026:	1bdf      	subs	r7, r3, r7
 8001028:	40b8      	lsls	r0, r7
 800102a:	1e43      	subs	r3, r0, #1
 800102c:	4198      	sbcs	r0, r3
 800102e:	4320      	orrs	r0, r4
 8001030:	e79f      	b.n	8000f72 <__aeabi_fsub+0x24a>
 8001032:	0005      	movs	r5, r0
 8001034:	e75e      	b.n	8000ef4 <__aeabi_fsub+0x1cc>
 8001036:	464b      	mov	r3, r9
 8001038:	e771      	b.n	8000f1e <__aeabi_fsub+0x1f6>
 800103a:	2320      	movs	r3, #32
 800103c:	4665      	mov	r5, ip
 800103e:	4660      	mov	r0, ip
 8001040:	40cd      	lsrs	r5, r1
 8001042:	1a59      	subs	r1, r3, r1
 8001044:	4088      	lsls	r0, r1
 8001046:	1e43      	subs	r3, r0, #1
 8001048:	4198      	sbcs	r0, r3
 800104a:	4328      	orrs	r0, r5
 800104c:	e71c      	b.n	8000e88 <__aeabi_fsub+0x160>
 800104e:	4663      	mov	r3, ip
 8001050:	000c      	movs	r4, r1
 8001052:	2501      	movs	r5, #1
 8001054:	1af0      	subs	r0, r6, r3
 8001056:	e691      	b.n	8000d7c <__aeabi_fsub+0x54>
 8001058:	2e00      	cmp	r6, #0
 800105a:	d095      	beq.n	8000f88 <__aeabi_fsub+0x260>
 800105c:	000c      	movs	r4, r1
 800105e:	464f      	mov	r7, r9
 8001060:	2200      	movs	r2, #0
 8001062:	e6ac      	b.n	8000dbe <__aeabi_fsub+0x96>
 8001064:	464b      	mov	r3, r9
 8001066:	000d      	movs	r5, r1
 8001068:	e744      	b.n	8000ef4 <__aeabi_fsub+0x1cc>
 800106a:	464f      	mov	r7, r9
 800106c:	2200      	movs	r2, #0
 800106e:	e6a6      	b.n	8000dbe <__aeabi_fsub+0x96>
 8001070:	fbffffff 	.word	0xfbffffff
 8001074:	7dffffff 	.word	0x7dffffff
 8001078:	2800      	cmp	r0, #0
 800107a:	d000      	beq.n	800107e <__aeabi_fsub+0x356>
 800107c:	e736      	b.n	8000eec <__aeabi_fsub+0x1c4>
 800107e:	2400      	movs	r4, #0
 8001080:	2700      	movs	r7, #0
 8001082:	e69c      	b.n	8000dbe <__aeabi_fsub+0x96>

08001084 <__aeabi_f2iz>:
 8001084:	0241      	lsls	r1, r0, #9
 8001086:	0042      	lsls	r2, r0, #1
 8001088:	0fc3      	lsrs	r3, r0, #31
 800108a:	0a49      	lsrs	r1, r1, #9
 800108c:	2000      	movs	r0, #0
 800108e:	0e12      	lsrs	r2, r2, #24
 8001090:	2a7e      	cmp	r2, #126	; 0x7e
 8001092:	dd03      	ble.n	800109c <__aeabi_f2iz+0x18>
 8001094:	2a9d      	cmp	r2, #157	; 0x9d
 8001096:	dd02      	ble.n	800109e <__aeabi_f2iz+0x1a>
 8001098:	4a09      	ldr	r2, [pc, #36]	; (80010c0 <__aeabi_f2iz+0x3c>)
 800109a:	1898      	adds	r0, r3, r2
 800109c:	4770      	bx	lr
 800109e:	2080      	movs	r0, #128	; 0x80
 80010a0:	0400      	lsls	r0, r0, #16
 80010a2:	4301      	orrs	r1, r0
 80010a4:	2a95      	cmp	r2, #149	; 0x95
 80010a6:	dc07      	bgt.n	80010b8 <__aeabi_f2iz+0x34>
 80010a8:	2096      	movs	r0, #150	; 0x96
 80010aa:	1a82      	subs	r2, r0, r2
 80010ac:	40d1      	lsrs	r1, r2
 80010ae:	4248      	negs	r0, r1
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d1f3      	bne.n	800109c <__aeabi_f2iz+0x18>
 80010b4:	0008      	movs	r0, r1
 80010b6:	e7f1      	b.n	800109c <__aeabi_f2iz+0x18>
 80010b8:	3a96      	subs	r2, #150	; 0x96
 80010ba:	4091      	lsls	r1, r2
 80010bc:	e7f7      	b.n	80010ae <__aeabi_f2iz+0x2a>
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	7fffffff 	.word	0x7fffffff

080010c4 <__aeabi_i2f>:
 80010c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010c6:	2800      	cmp	r0, #0
 80010c8:	d013      	beq.n	80010f2 <__aeabi_i2f+0x2e>
 80010ca:	17c3      	asrs	r3, r0, #31
 80010cc:	18c6      	adds	r6, r0, r3
 80010ce:	405e      	eors	r6, r3
 80010d0:	0fc4      	lsrs	r4, r0, #31
 80010d2:	0030      	movs	r0, r6
 80010d4:	f001 fefa 	bl	8002ecc <__clzsi2>
 80010d8:	239e      	movs	r3, #158	; 0x9e
 80010da:	0005      	movs	r5, r0
 80010dc:	1a1b      	subs	r3, r3, r0
 80010de:	2b96      	cmp	r3, #150	; 0x96
 80010e0:	dc0f      	bgt.n	8001102 <__aeabi_i2f+0x3e>
 80010e2:	2808      	cmp	r0, #8
 80010e4:	dd01      	ble.n	80010ea <__aeabi_i2f+0x26>
 80010e6:	3d08      	subs	r5, #8
 80010e8:	40ae      	lsls	r6, r5
 80010ea:	0276      	lsls	r6, r6, #9
 80010ec:	0a76      	lsrs	r6, r6, #9
 80010ee:	b2d8      	uxtb	r0, r3
 80010f0:	e002      	b.n	80010f8 <__aeabi_i2f+0x34>
 80010f2:	2400      	movs	r4, #0
 80010f4:	2000      	movs	r0, #0
 80010f6:	2600      	movs	r6, #0
 80010f8:	05c0      	lsls	r0, r0, #23
 80010fa:	4330      	orrs	r0, r6
 80010fc:	07e4      	lsls	r4, r4, #31
 80010fe:	4320      	orrs	r0, r4
 8001100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001102:	2b99      	cmp	r3, #153	; 0x99
 8001104:	dd0c      	ble.n	8001120 <__aeabi_i2f+0x5c>
 8001106:	2205      	movs	r2, #5
 8001108:	0031      	movs	r1, r6
 800110a:	1a12      	subs	r2, r2, r0
 800110c:	40d1      	lsrs	r1, r2
 800110e:	000a      	movs	r2, r1
 8001110:	0001      	movs	r1, r0
 8001112:	0030      	movs	r0, r6
 8001114:	311b      	adds	r1, #27
 8001116:	4088      	lsls	r0, r1
 8001118:	1e41      	subs	r1, r0, #1
 800111a:	4188      	sbcs	r0, r1
 800111c:	4302      	orrs	r2, r0
 800111e:	0016      	movs	r6, r2
 8001120:	2d05      	cmp	r5, #5
 8001122:	dc12      	bgt.n	800114a <__aeabi_i2f+0x86>
 8001124:	0031      	movs	r1, r6
 8001126:	4f0d      	ldr	r7, [pc, #52]	; (800115c <__aeabi_i2f+0x98>)
 8001128:	4039      	ands	r1, r7
 800112a:	0772      	lsls	r2, r6, #29
 800112c:	d009      	beq.n	8001142 <__aeabi_i2f+0x7e>
 800112e:	200f      	movs	r0, #15
 8001130:	4030      	ands	r0, r6
 8001132:	2804      	cmp	r0, #4
 8001134:	d005      	beq.n	8001142 <__aeabi_i2f+0x7e>
 8001136:	3104      	adds	r1, #4
 8001138:	014a      	lsls	r2, r1, #5
 800113a:	d502      	bpl.n	8001142 <__aeabi_i2f+0x7e>
 800113c:	239f      	movs	r3, #159	; 0x9f
 800113e:	4039      	ands	r1, r7
 8001140:	1b5b      	subs	r3, r3, r5
 8001142:	0189      	lsls	r1, r1, #6
 8001144:	0a4e      	lsrs	r6, r1, #9
 8001146:	b2d8      	uxtb	r0, r3
 8001148:	e7d6      	b.n	80010f8 <__aeabi_i2f+0x34>
 800114a:	1f6a      	subs	r2, r5, #5
 800114c:	4096      	lsls	r6, r2
 800114e:	0031      	movs	r1, r6
 8001150:	4f02      	ldr	r7, [pc, #8]	; (800115c <__aeabi_i2f+0x98>)
 8001152:	4039      	ands	r1, r7
 8001154:	0772      	lsls	r2, r6, #29
 8001156:	d0f4      	beq.n	8001142 <__aeabi_i2f+0x7e>
 8001158:	e7e9      	b.n	800112e <__aeabi_i2f+0x6a>
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	fbffffff 	.word	0xfbffffff

08001160 <__aeabi_dadd>:
 8001160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001162:	464f      	mov	r7, r9
 8001164:	4646      	mov	r6, r8
 8001166:	46d6      	mov	lr, sl
 8001168:	000d      	movs	r5, r1
 800116a:	0004      	movs	r4, r0
 800116c:	b5c0      	push	{r6, r7, lr}
 800116e:	001f      	movs	r7, r3
 8001170:	0011      	movs	r1, r2
 8001172:	0328      	lsls	r0, r5, #12
 8001174:	0f62      	lsrs	r2, r4, #29
 8001176:	0a40      	lsrs	r0, r0, #9
 8001178:	4310      	orrs	r0, r2
 800117a:	007a      	lsls	r2, r7, #1
 800117c:	0d52      	lsrs	r2, r2, #21
 800117e:	00e3      	lsls	r3, r4, #3
 8001180:	033c      	lsls	r4, r7, #12
 8001182:	4691      	mov	r9, r2
 8001184:	0a64      	lsrs	r4, r4, #9
 8001186:	0ffa      	lsrs	r2, r7, #31
 8001188:	0f4f      	lsrs	r7, r1, #29
 800118a:	006e      	lsls	r6, r5, #1
 800118c:	4327      	orrs	r7, r4
 800118e:	4692      	mov	sl, r2
 8001190:	46b8      	mov	r8, r7
 8001192:	0d76      	lsrs	r6, r6, #21
 8001194:	0fed      	lsrs	r5, r5, #31
 8001196:	00c9      	lsls	r1, r1, #3
 8001198:	4295      	cmp	r5, r2
 800119a:	d100      	bne.n	800119e <__aeabi_dadd+0x3e>
 800119c:	e099      	b.n	80012d2 <__aeabi_dadd+0x172>
 800119e:	464c      	mov	r4, r9
 80011a0:	1b34      	subs	r4, r6, r4
 80011a2:	46a4      	mov	ip, r4
 80011a4:	2c00      	cmp	r4, #0
 80011a6:	dc00      	bgt.n	80011aa <__aeabi_dadd+0x4a>
 80011a8:	e07c      	b.n	80012a4 <__aeabi_dadd+0x144>
 80011aa:	464a      	mov	r2, r9
 80011ac:	2a00      	cmp	r2, #0
 80011ae:	d100      	bne.n	80011b2 <__aeabi_dadd+0x52>
 80011b0:	e0b8      	b.n	8001324 <__aeabi_dadd+0x1c4>
 80011b2:	4ac5      	ldr	r2, [pc, #788]	; (80014c8 <__aeabi_dadd+0x368>)
 80011b4:	4296      	cmp	r6, r2
 80011b6:	d100      	bne.n	80011ba <__aeabi_dadd+0x5a>
 80011b8:	e11c      	b.n	80013f4 <__aeabi_dadd+0x294>
 80011ba:	2280      	movs	r2, #128	; 0x80
 80011bc:	003c      	movs	r4, r7
 80011be:	0412      	lsls	r2, r2, #16
 80011c0:	4314      	orrs	r4, r2
 80011c2:	46a0      	mov	r8, r4
 80011c4:	4662      	mov	r2, ip
 80011c6:	2a38      	cmp	r2, #56	; 0x38
 80011c8:	dd00      	ble.n	80011cc <__aeabi_dadd+0x6c>
 80011ca:	e161      	b.n	8001490 <__aeabi_dadd+0x330>
 80011cc:	2a1f      	cmp	r2, #31
 80011ce:	dd00      	ble.n	80011d2 <__aeabi_dadd+0x72>
 80011d0:	e1cc      	b.n	800156c <__aeabi_dadd+0x40c>
 80011d2:	4664      	mov	r4, ip
 80011d4:	2220      	movs	r2, #32
 80011d6:	1b12      	subs	r2, r2, r4
 80011d8:	4644      	mov	r4, r8
 80011da:	4094      	lsls	r4, r2
 80011dc:	000f      	movs	r7, r1
 80011de:	46a1      	mov	r9, r4
 80011e0:	4664      	mov	r4, ip
 80011e2:	4091      	lsls	r1, r2
 80011e4:	40e7      	lsrs	r7, r4
 80011e6:	464c      	mov	r4, r9
 80011e8:	1e4a      	subs	r2, r1, #1
 80011ea:	4191      	sbcs	r1, r2
 80011ec:	433c      	orrs	r4, r7
 80011ee:	4642      	mov	r2, r8
 80011f0:	4321      	orrs	r1, r4
 80011f2:	4664      	mov	r4, ip
 80011f4:	40e2      	lsrs	r2, r4
 80011f6:	1a80      	subs	r0, r0, r2
 80011f8:	1a5c      	subs	r4, r3, r1
 80011fa:	42a3      	cmp	r3, r4
 80011fc:	419b      	sbcs	r3, r3
 80011fe:	425f      	negs	r7, r3
 8001200:	1bc7      	subs	r7, r0, r7
 8001202:	023b      	lsls	r3, r7, #8
 8001204:	d400      	bmi.n	8001208 <__aeabi_dadd+0xa8>
 8001206:	e0d0      	b.n	80013aa <__aeabi_dadd+0x24a>
 8001208:	027f      	lsls	r7, r7, #9
 800120a:	0a7f      	lsrs	r7, r7, #9
 800120c:	2f00      	cmp	r7, #0
 800120e:	d100      	bne.n	8001212 <__aeabi_dadd+0xb2>
 8001210:	e0ff      	b.n	8001412 <__aeabi_dadd+0x2b2>
 8001212:	0038      	movs	r0, r7
 8001214:	f001 fe5a 	bl	8002ecc <__clzsi2>
 8001218:	0001      	movs	r1, r0
 800121a:	3908      	subs	r1, #8
 800121c:	2320      	movs	r3, #32
 800121e:	0022      	movs	r2, r4
 8001220:	1a5b      	subs	r3, r3, r1
 8001222:	408f      	lsls	r7, r1
 8001224:	40da      	lsrs	r2, r3
 8001226:	408c      	lsls	r4, r1
 8001228:	4317      	orrs	r7, r2
 800122a:	42b1      	cmp	r1, r6
 800122c:	da00      	bge.n	8001230 <__aeabi_dadd+0xd0>
 800122e:	e0ff      	b.n	8001430 <__aeabi_dadd+0x2d0>
 8001230:	1b89      	subs	r1, r1, r6
 8001232:	1c4b      	adds	r3, r1, #1
 8001234:	2b1f      	cmp	r3, #31
 8001236:	dd00      	ble.n	800123a <__aeabi_dadd+0xda>
 8001238:	e0a8      	b.n	800138c <__aeabi_dadd+0x22c>
 800123a:	2220      	movs	r2, #32
 800123c:	0039      	movs	r1, r7
 800123e:	1ad2      	subs	r2, r2, r3
 8001240:	0020      	movs	r0, r4
 8001242:	4094      	lsls	r4, r2
 8001244:	4091      	lsls	r1, r2
 8001246:	40d8      	lsrs	r0, r3
 8001248:	1e62      	subs	r2, r4, #1
 800124a:	4194      	sbcs	r4, r2
 800124c:	40df      	lsrs	r7, r3
 800124e:	2600      	movs	r6, #0
 8001250:	4301      	orrs	r1, r0
 8001252:	430c      	orrs	r4, r1
 8001254:	0763      	lsls	r3, r4, #29
 8001256:	d009      	beq.n	800126c <__aeabi_dadd+0x10c>
 8001258:	230f      	movs	r3, #15
 800125a:	4023      	ands	r3, r4
 800125c:	2b04      	cmp	r3, #4
 800125e:	d005      	beq.n	800126c <__aeabi_dadd+0x10c>
 8001260:	1d23      	adds	r3, r4, #4
 8001262:	42a3      	cmp	r3, r4
 8001264:	41a4      	sbcs	r4, r4
 8001266:	4264      	negs	r4, r4
 8001268:	193f      	adds	r7, r7, r4
 800126a:	001c      	movs	r4, r3
 800126c:	023b      	lsls	r3, r7, #8
 800126e:	d400      	bmi.n	8001272 <__aeabi_dadd+0x112>
 8001270:	e09e      	b.n	80013b0 <__aeabi_dadd+0x250>
 8001272:	4b95      	ldr	r3, [pc, #596]	; (80014c8 <__aeabi_dadd+0x368>)
 8001274:	3601      	adds	r6, #1
 8001276:	429e      	cmp	r6, r3
 8001278:	d100      	bne.n	800127c <__aeabi_dadd+0x11c>
 800127a:	e0b7      	b.n	80013ec <__aeabi_dadd+0x28c>
 800127c:	4a93      	ldr	r2, [pc, #588]	; (80014cc <__aeabi_dadd+0x36c>)
 800127e:	08e4      	lsrs	r4, r4, #3
 8001280:	4017      	ands	r7, r2
 8001282:	077b      	lsls	r3, r7, #29
 8001284:	0571      	lsls	r1, r6, #21
 8001286:	027f      	lsls	r7, r7, #9
 8001288:	4323      	orrs	r3, r4
 800128a:	0b3f      	lsrs	r7, r7, #12
 800128c:	0d4a      	lsrs	r2, r1, #21
 800128e:	0512      	lsls	r2, r2, #20
 8001290:	433a      	orrs	r2, r7
 8001292:	07ed      	lsls	r5, r5, #31
 8001294:	432a      	orrs	r2, r5
 8001296:	0018      	movs	r0, r3
 8001298:	0011      	movs	r1, r2
 800129a:	bce0      	pop	{r5, r6, r7}
 800129c:	46ba      	mov	sl, r7
 800129e:	46b1      	mov	r9, r6
 80012a0:	46a8      	mov	r8, r5
 80012a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012a4:	2c00      	cmp	r4, #0
 80012a6:	d04b      	beq.n	8001340 <__aeabi_dadd+0x1e0>
 80012a8:	464c      	mov	r4, r9
 80012aa:	1ba4      	subs	r4, r4, r6
 80012ac:	46a4      	mov	ip, r4
 80012ae:	2e00      	cmp	r6, #0
 80012b0:	d000      	beq.n	80012b4 <__aeabi_dadd+0x154>
 80012b2:	e123      	b.n	80014fc <__aeabi_dadd+0x39c>
 80012b4:	0004      	movs	r4, r0
 80012b6:	431c      	orrs	r4, r3
 80012b8:	d100      	bne.n	80012bc <__aeabi_dadd+0x15c>
 80012ba:	e1af      	b.n	800161c <__aeabi_dadd+0x4bc>
 80012bc:	4662      	mov	r2, ip
 80012be:	1e54      	subs	r4, r2, #1
 80012c0:	2a01      	cmp	r2, #1
 80012c2:	d100      	bne.n	80012c6 <__aeabi_dadd+0x166>
 80012c4:	e215      	b.n	80016f2 <__aeabi_dadd+0x592>
 80012c6:	4d80      	ldr	r5, [pc, #512]	; (80014c8 <__aeabi_dadd+0x368>)
 80012c8:	45ac      	cmp	ip, r5
 80012ca:	d100      	bne.n	80012ce <__aeabi_dadd+0x16e>
 80012cc:	e1c8      	b.n	8001660 <__aeabi_dadd+0x500>
 80012ce:	46a4      	mov	ip, r4
 80012d0:	e11b      	b.n	800150a <__aeabi_dadd+0x3aa>
 80012d2:	464a      	mov	r2, r9
 80012d4:	1ab2      	subs	r2, r6, r2
 80012d6:	4694      	mov	ip, r2
 80012d8:	2a00      	cmp	r2, #0
 80012da:	dc00      	bgt.n	80012de <__aeabi_dadd+0x17e>
 80012dc:	e0ac      	b.n	8001438 <__aeabi_dadd+0x2d8>
 80012de:	464a      	mov	r2, r9
 80012e0:	2a00      	cmp	r2, #0
 80012e2:	d043      	beq.n	800136c <__aeabi_dadd+0x20c>
 80012e4:	4a78      	ldr	r2, [pc, #480]	; (80014c8 <__aeabi_dadd+0x368>)
 80012e6:	4296      	cmp	r6, r2
 80012e8:	d100      	bne.n	80012ec <__aeabi_dadd+0x18c>
 80012ea:	e1af      	b.n	800164c <__aeabi_dadd+0x4ec>
 80012ec:	2280      	movs	r2, #128	; 0x80
 80012ee:	003c      	movs	r4, r7
 80012f0:	0412      	lsls	r2, r2, #16
 80012f2:	4314      	orrs	r4, r2
 80012f4:	46a0      	mov	r8, r4
 80012f6:	4662      	mov	r2, ip
 80012f8:	2a38      	cmp	r2, #56	; 0x38
 80012fa:	dc67      	bgt.n	80013cc <__aeabi_dadd+0x26c>
 80012fc:	2a1f      	cmp	r2, #31
 80012fe:	dc00      	bgt.n	8001302 <__aeabi_dadd+0x1a2>
 8001300:	e15f      	b.n	80015c2 <__aeabi_dadd+0x462>
 8001302:	4647      	mov	r7, r8
 8001304:	3a20      	subs	r2, #32
 8001306:	40d7      	lsrs	r7, r2
 8001308:	4662      	mov	r2, ip
 800130a:	2a20      	cmp	r2, #32
 800130c:	d005      	beq.n	800131a <__aeabi_dadd+0x1ba>
 800130e:	4664      	mov	r4, ip
 8001310:	2240      	movs	r2, #64	; 0x40
 8001312:	1b12      	subs	r2, r2, r4
 8001314:	4644      	mov	r4, r8
 8001316:	4094      	lsls	r4, r2
 8001318:	4321      	orrs	r1, r4
 800131a:	1e4a      	subs	r2, r1, #1
 800131c:	4191      	sbcs	r1, r2
 800131e:	000c      	movs	r4, r1
 8001320:	433c      	orrs	r4, r7
 8001322:	e057      	b.n	80013d4 <__aeabi_dadd+0x274>
 8001324:	003a      	movs	r2, r7
 8001326:	430a      	orrs	r2, r1
 8001328:	d100      	bne.n	800132c <__aeabi_dadd+0x1cc>
 800132a:	e105      	b.n	8001538 <__aeabi_dadd+0x3d8>
 800132c:	0022      	movs	r2, r4
 800132e:	3a01      	subs	r2, #1
 8001330:	2c01      	cmp	r4, #1
 8001332:	d100      	bne.n	8001336 <__aeabi_dadd+0x1d6>
 8001334:	e182      	b.n	800163c <__aeabi_dadd+0x4dc>
 8001336:	4c64      	ldr	r4, [pc, #400]	; (80014c8 <__aeabi_dadd+0x368>)
 8001338:	45a4      	cmp	ip, r4
 800133a:	d05b      	beq.n	80013f4 <__aeabi_dadd+0x294>
 800133c:	4694      	mov	ip, r2
 800133e:	e741      	b.n	80011c4 <__aeabi_dadd+0x64>
 8001340:	4c63      	ldr	r4, [pc, #396]	; (80014d0 <__aeabi_dadd+0x370>)
 8001342:	1c77      	adds	r7, r6, #1
 8001344:	4227      	tst	r7, r4
 8001346:	d000      	beq.n	800134a <__aeabi_dadd+0x1ea>
 8001348:	e0c4      	b.n	80014d4 <__aeabi_dadd+0x374>
 800134a:	0004      	movs	r4, r0
 800134c:	431c      	orrs	r4, r3
 800134e:	2e00      	cmp	r6, #0
 8001350:	d000      	beq.n	8001354 <__aeabi_dadd+0x1f4>
 8001352:	e169      	b.n	8001628 <__aeabi_dadd+0x4c8>
 8001354:	2c00      	cmp	r4, #0
 8001356:	d100      	bne.n	800135a <__aeabi_dadd+0x1fa>
 8001358:	e1bf      	b.n	80016da <__aeabi_dadd+0x57a>
 800135a:	4644      	mov	r4, r8
 800135c:	430c      	orrs	r4, r1
 800135e:	d000      	beq.n	8001362 <__aeabi_dadd+0x202>
 8001360:	e1d0      	b.n	8001704 <__aeabi_dadd+0x5a4>
 8001362:	0742      	lsls	r2, r0, #29
 8001364:	08db      	lsrs	r3, r3, #3
 8001366:	4313      	orrs	r3, r2
 8001368:	08c0      	lsrs	r0, r0, #3
 800136a:	e029      	b.n	80013c0 <__aeabi_dadd+0x260>
 800136c:	003a      	movs	r2, r7
 800136e:	430a      	orrs	r2, r1
 8001370:	d100      	bne.n	8001374 <__aeabi_dadd+0x214>
 8001372:	e170      	b.n	8001656 <__aeabi_dadd+0x4f6>
 8001374:	4662      	mov	r2, ip
 8001376:	4664      	mov	r4, ip
 8001378:	3a01      	subs	r2, #1
 800137a:	2c01      	cmp	r4, #1
 800137c:	d100      	bne.n	8001380 <__aeabi_dadd+0x220>
 800137e:	e0e0      	b.n	8001542 <__aeabi_dadd+0x3e2>
 8001380:	4c51      	ldr	r4, [pc, #324]	; (80014c8 <__aeabi_dadd+0x368>)
 8001382:	45a4      	cmp	ip, r4
 8001384:	d100      	bne.n	8001388 <__aeabi_dadd+0x228>
 8001386:	e161      	b.n	800164c <__aeabi_dadd+0x4ec>
 8001388:	4694      	mov	ip, r2
 800138a:	e7b4      	b.n	80012f6 <__aeabi_dadd+0x196>
 800138c:	003a      	movs	r2, r7
 800138e:	391f      	subs	r1, #31
 8001390:	40ca      	lsrs	r2, r1
 8001392:	0011      	movs	r1, r2
 8001394:	2b20      	cmp	r3, #32
 8001396:	d003      	beq.n	80013a0 <__aeabi_dadd+0x240>
 8001398:	2240      	movs	r2, #64	; 0x40
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	409f      	lsls	r7, r3
 800139e:	433c      	orrs	r4, r7
 80013a0:	1e63      	subs	r3, r4, #1
 80013a2:	419c      	sbcs	r4, r3
 80013a4:	2700      	movs	r7, #0
 80013a6:	2600      	movs	r6, #0
 80013a8:	430c      	orrs	r4, r1
 80013aa:	0763      	lsls	r3, r4, #29
 80013ac:	d000      	beq.n	80013b0 <__aeabi_dadd+0x250>
 80013ae:	e753      	b.n	8001258 <__aeabi_dadd+0xf8>
 80013b0:	46b4      	mov	ip, r6
 80013b2:	08e4      	lsrs	r4, r4, #3
 80013b4:	077b      	lsls	r3, r7, #29
 80013b6:	4323      	orrs	r3, r4
 80013b8:	08f8      	lsrs	r0, r7, #3
 80013ba:	4a43      	ldr	r2, [pc, #268]	; (80014c8 <__aeabi_dadd+0x368>)
 80013bc:	4594      	cmp	ip, r2
 80013be:	d01d      	beq.n	80013fc <__aeabi_dadd+0x29c>
 80013c0:	4662      	mov	r2, ip
 80013c2:	0307      	lsls	r7, r0, #12
 80013c4:	0552      	lsls	r2, r2, #21
 80013c6:	0b3f      	lsrs	r7, r7, #12
 80013c8:	0d52      	lsrs	r2, r2, #21
 80013ca:	e760      	b.n	800128e <__aeabi_dadd+0x12e>
 80013cc:	4644      	mov	r4, r8
 80013ce:	430c      	orrs	r4, r1
 80013d0:	1e62      	subs	r2, r4, #1
 80013d2:	4194      	sbcs	r4, r2
 80013d4:	18e4      	adds	r4, r4, r3
 80013d6:	429c      	cmp	r4, r3
 80013d8:	419b      	sbcs	r3, r3
 80013da:	425f      	negs	r7, r3
 80013dc:	183f      	adds	r7, r7, r0
 80013de:	023b      	lsls	r3, r7, #8
 80013e0:	d5e3      	bpl.n	80013aa <__aeabi_dadd+0x24a>
 80013e2:	4b39      	ldr	r3, [pc, #228]	; (80014c8 <__aeabi_dadd+0x368>)
 80013e4:	3601      	adds	r6, #1
 80013e6:	429e      	cmp	r6, r3
 80013e8:	d000      	beq.n	80013ec <__aeabi_dadd+0x28c>
 80013ea:	e0b5      	b.n	8001558 <__aeabi_dadd+0x3f8>
 80013ec:	0032      	movs	r2, r6
 80013ee:	2700      	movs	r7, #0
 80013f0:	2300      	movs	r3, #0
 80013f2:	e74c      	b.n	800128e <__aeabi_dadd+0x12e>
 80013f4:	0742      	lsls	r2, r0, #29
 80013f6:	08db      	lsrs	r3, r3, #3
 80013f8:	4313      	orrs	r3, r2
 80013fa:	08c0      	lsrs	r0, r0, #3
 80013fc:	001a      	movs	r2, r3
 80013fe:	4302      	orrs	r2, r0
 8001400:	d100      	bne.n	8001404 <__aeabi_dadd+0x2a4>
 8001402:	e1e1      	b.n	80017c8 <__aeabi_dadd+0x668>
 8001404:	2780      	movs	r7, #128	; 0x80
 8001406:	033f      	lsls	r7, r7, #12
 8001408:	4307      	orrs	r7, r0
 800140a:	033f      	lsls	r7, r7, #12
 800140c:	4a2e      	ldr	r2, [pc, #184]	; (80014c8 <__aeabi_dadd+0x368>)
 800140e:	0b3f      	lsrs	r7, r7, #12
 8001410:	e73d      	b.n	800128e <__aeabi_dadd+0x12e>
 8001412:	0020      	movs	r0, r4
 8001414:	f001 fd5a 	bl	8002ecc <__clzsi2>
 8001418:	0001      	movs	r1, r0
 800141a:	3118      	adds	r1, #24
 800141c:	291f      	cmp	r1, #31
 800141e:	dc00      	bgt.n	8001422 <__aeabi_dadd+0x2c2>
 8001420:	e6fc      	b.n	800121c <__aeabi_dadd+0xbc>
 8001422:	3808      	subs	r0, #8
 8001424:	4084      	lsls	r4, r0
 8001426:	0027      	movs	r7, r4
 8001428:	2400      	movs	r4, #0
 800142a:	42b1      	cmp	r1, r6
 800142c:	db00      	blt.n	8001430 <__aeabi_dadd+0x2d0>
 800142e:	e6ff      	b.n	8001230 <__aeabi_dadd+0xd0>
 8001430:	4a26      	ldr	r2, [pc, #152]	; (80014cc <__aeabi_dadd+0x36c>)
 8001432:	1a76      	subs	r6, r6, r1
 8001434:	4017      	ands	r7, r2
 8001436:	e70d      	b.n	8001254 <__aeabi_dadd+0xf4>
 8001438:	2a00      	cmp	r2, #0
 800143a:	d02f      	beq.n	800149c <__aeabi_dadd+0x33c>
 800143c:	464a      	mov	r2, r9
 800143e:	1b92      	subs	r2, r2, r6
 8001440:	4694      	mov	ip, r2
 8001442:	2e00      	cmp	r6, #0
 8001444:	d100      	bne.n	8001448 <__aeabi_dadd+0x2e8>
 8001446:	e0ad      	b.n	80015a4 <__aeabi_dadd+0x444>
 8001448:	4a1f      	ldr	r2, [pc, #124]	; (80014c8 <__aeabi_dadd+0x368>)
 800144a:	4591      	cmp	r9, r2
 800144c:	d100      	bne.n	8001450 <__aeabi_dadd+0x2f0>
 800144e:	e10f      	b.n	8001670 <__aeabi_dadd+0x510>
 8001450:	2280      	movs	r2, #128	; 0x80
 8001452:	0412      	lsls	r2, r2, #16
 8001454:	4310      	orrs	r0, r2
 8001456:	4662      	mov	r2, ip
 8001458:	2a38      	cmp	r2, #56	; 0x38
 800145a:	dd00      	ble.n	800145e <__aeabi_dadd+0x2fe>
 800145c:	e10f      	b.n	800167e <__aeabi_dadd+0x51e>
 800145e:	2a1f      	cmp	r2, #31
 8001460:	dd00      	ble.n	8001464 <__aeabi_dadd+0x304>
 8001462:	e180      	b.n	8001766 <__aeabi_dadd+0x606>
 8001464:	4664      	mov	r4, ip
 8001466:	2220      	movs	r2, #32
 8001468:	001e      	movs	r6, r3
 800146a:	1b12      	subs	r2, r2, r4
 800146c:	4667      	mov	r7, ip
 800146e:	0004      	movs	r4, r0
 8001470:	4093      	lsls	r3, r2
 8001472:	4094      	lsls	r4, r2
 8001474:	40fe      	lsrs	r6, r7
 8001476:	1e5a      	subs	r2, r3, #1
 8001478:	4193      	sbcs	r3, r2
 800147a:	40f8      	lsrs	r0, r7
 800147c:	4334      	orrs	r4, r6
 800147e:	431c      	orrs	r4, r3
 8001480:	4480      	add	r8, r0
 8001482:	1864      	adds	r4, r4, r1
 8001484:	428c      	cmp	r4, r1
 8001486:	41bf      	sbcs	r7, r7
 8001488:	427f      	negs	r7, r7
 800148a:	464e      	mov	r6, r9
 800148c:	4447      	add	r7, r8
 800148e:	e7a6      	b.n	80013de <__aeabi_dadd+0x27e>
 8001490:	4642      	mov	r2, r8
 8001492:	430a      	orrs	r2, r1
 8001494:	0011      	movs	r1, r2
 8001496:	1e4a      	subs	r2, r1, #1
 8001498:	4191      	sbcs	r1, r2
 800149a:	e6ad      	b.n	80011f8 <__aeabi_dadd+0x98>
 800149c:	4c0c      	ldr	r4, [pc, #48]	; (80014d0 <__aeabi_dadd+0x370>)
 800149e:	1c72      	adds	r2, r6, #1
 80014a0:	4222      	tst	r2, r4
 80014a2:	d000      	beq.n	80014a6 <__aeabi_dadd+0x346>
 80014a4:	e0a1      	b.n	80015ea <__aeabi_dadd+0x48a>
 80014a6:	0002      	movs	r2, r0
 80014a8:	431a      	orrs	r2, r3
 80014aa:	2e00      	cmp	r6, #0
 80014ac:	d000      	beq.n	80014b0 <__aeabi_dadd+0x350>
 80014ae:	e0fa      	b.n	80016a6 <__aeabi_dadd+0x546>
 80014b0:	2a00      	cmp	r2, #0
 80014b2:	d100      	bne.n	80014b6 <__aeabi_dadd+0x356>
 80014b4:	e145      	b.n	8001742 <__aeabi_dadd+0x5e2>
 80014b6:	003a      	movs	r2, r7
 80014b8:	430a      	orrs	r2, r1
 80014ba:	d000      	beq.n	80014be <__aeabi_dadd+0x35e>
 80014bc:	e146      	b.n	800174c <__aeabi_dadd+0x5ec>
 80014be:	0742      	lsls	r2, r0, #29
 80014c0:	08db      	lsrs	r3, r3, #3
 80014c2:	4313      	orrs	r3, r2
 80014c4:	08c0      	lsrs	r0, r0, #3
 80014c6:	e77b      	b.n	80013c0 <__aeabi_dadd+0x260>
 80014c8:	000007ff 	.word	0x000007ff
 80014cc:	ff7fffff 	.word	0xff7fffff
 80014d0:	000007fe 	.word	0x000007fe
 80014d4:	4647      	mov	r7, r8
 80014d6:	1a5c      	subs	r4, r3, r1
 80014d8:	1bc2      	subs	r2, r0, r7
 80014da:	42a3      	cmp	r3, r4
 80014dc:	41bf      	sbcs	r7, r7
 80014de:	427f      	negs	r7, r7
 80014e0:	46b9      	mov	r9, r7
 80014e2:	0017      	movs	r7, r2
 80014e4:	464a      	mov	r2, r9
 80014e6:	1abf      	subs	r7, r7, r2
 80014e8:	023a      	lsls	r2, r7, #8
 80014ea:	d500      	bpl.n	80014ee <__aeabi_dadd+0x38e>
 80014ec:	e08d      	b.n	800160a <__aeabi_dadd+0x4aa>
 80014ee:	0023      	movs	r3, r4
 80014f0:	433b      	orrs	r3, r7
 80014f2:	d000      	beq.n	80014f6 <__aeabi_dadd+0x396>
 80014f4:	e68a      	b.n	800120c <__aeabi_dadd+0xac>
 80014f6:	2000      	movs	r0, #0
 80014f8:	2500      	movs	r5, #0
 80014fa:	e761      	b.n	80013c0 <__aeabi_dadd+0x260>
 80014fc:	4cb4      	ldr	r4, [pc, #720]	; (80017d0 <__aeabi_dadd+0x670>)
 80014fe:	45a1      	cmp	r9, r4
 8001500:	d100      	bne.n	8001504 <__aeabi_dadd+0x3a4>
 8001502:	e0ad      	b.n	8001660 <__aeabi_dadd+0x500>
 8001504:	2480      	movs	r4, #128	; 0x80
 8001506:	0424      	lsls	r4, r4, #16
 8001508:	4320      	orrs	r0, r4
 800150a:	4664      	mov	r4, ip
 800150c:	2c38      	cmp	r4, #56	; 0x38
 800150e:	dc3d      	bgt.n	800158c <__aeabi_dadd+0x42c>
 8001510:	4662      	mov	r2, ip
 8001512:	2c1f      	cmp	r4, #31
 8001514:	dd00      	ble.n	8001518 <__aeabi_dadd+0x3b8>
 8001516:	e0b7      	b.n	8001688 <__aeabi_dadd+0x528>
 8001518:	2520      	movs	r5, #32
 800151a:	001e      	movs	r6, r3
 800151c:	1b2d      	subs	r5, r5, r4
 800151e:	0004      	movs	r4, r0
 8001520:	40ab      	lsls	r3, r5
 8001522:	40ac      	lsls	r4, r5
 8001524:	40d6      	lsrs	r6, r2
 8001526:	40d0      	lsrs	r0, r2
 8001528:	4642      	mov	r2, r8
 800152a:	1e5d      	subs	r5, r3, #1
 800152c:	41ab      	sbcs	r3, r5
 800152e:	4334      	orrs	r4, r6
 8001530:	1a12      	subs	r2, r2, r0
 8001532:	4690      	mov	r8, r2
 8001534:	4323      	orrs	r3, r4
 8001536:	e02c      	b.n	8001592 <__aeabi_dadd+0x432>
 8001538:	0742      	lsls	r2, r0, #29
 800153a:	08db      	lsrs	r3, r3, #3
 800153c:	4313      	orrs	r3, r2
 800153e:	08c0      	lsrs	r0, r0, #3
 8001540:	e73b      	b.n	80013ba <__aeabi_dadd+0x25a>
 8001542:	185c      	adds	r4, r3, r1
 8001544:	429c      	cmp	r4, r3
 8001546:	419b      	sbcs	r3, r3
 8001548:	4440      	add	r0, r8
 800154a:	425b      	negs	r3, r3
 800154c:	18c7      	adds	r7, r0, r3
 800154e:	2601      	movs	r6, #1
 8001550:	023b      	lsls	r3, r7, #8
 8001552:	d400      	bmi.n	8001556 <__aeabi_dadd+0x3f6>
 8001554:	e729      	b.n	80013aa <__aeabi_dadd+0x24a>
 8001556:	2602      	movs	r6, #2
 8001558:	4a9e      	ldr	r2, [pc, #632]	; (80017d4 <__aeabi_dadd+0x674>)
 800155a:	0863      	lsrs	r3, r4, #1
 800155c:	4017      	ands	r7, r2
 800155e:	2201      	movs	r2, #1
 8001560:	4014      	ands	r4, r2
 8001562:	431c      	orrs	r4, r3
 8001564:	07fb      	lsls	r3, r7, #31
 8001566:	431c      	orrs	r4, r3
 8001568:	087f      	lsrs	r7, r7, #1
 800156a:	e673      	b.n	8001254 <__aeabi_dadd+0xf4>
 800156c:	4644      	mov	r4, r8
 800156e:	3a20      	subs	r2, #32
 8001570:	40d4      	lsrs	r4, r2
 8001572:	4662      	mov	r2, ip
 8001574:	2a20      	cmp	r2, #32
 8001576:	d005      	beq.n	8001584 <__aeabi_dadd+0x424>
 8001578:	4667      	mov	r7, ip
 800157a:	2240      	movs	r2, #64	; 0x40
 800157c:	1bd2      	subs	r2, r2, r7
 800157e:	4647      	mov	r7, r8
 8001580:	4097      	lsls	r7, r2
 8001582:	4339      	orrs	r1, r7
 8001584:	1e4a      	subs	r2, r1, #1
 8001586:	4191      	sbcs	r1, r2
 8001588:	4321      	orrs	r1, r4
 800158a:	e635      	b.n	80011f8 <__aeabi_dadd+0x98>
 800158c:	4303      	orrs	r3, r0
 800158e:	1e58      	subs	r0, r3, #1
 8001590:	4183      	sbcs	r3, r0
 8001592:	1acc      	subs	r4, r1, r3
 8001594:	42a1      	cmp	r1, r4
 8001596:	41bf      	sbcs	r7, r7
 8001598:	4643      	mov	r3, r8
 800159a:	427f      	negs	r7, r7
 800159c:	4655      	mov	r5, sl
 800159e:	464e      	mov	r6, r9
 80015a0:	1bdf      	subs	r7, r3, r7
 80015a2:	e62e      	b.n	8001202 <__aeabi_dadd+0xa2>
 80015a4:	0002      	movs	r2, r0
 80015a6:	431a      	orrs	r2, r3
 80015a8:	d100      	bne.n	80015ac <__aeabi_dadd+0x44c>
 80015aa:	e0bd      	b.n	8001728 <__aeabi_dadd+0x5c8>
 80015ac:	4662      	mov	r2, ip
 80015ae:	4664      	mov	r4, ip
 80015b0:	3a01      	subs	r2, #1
 80015b2:	2c01      	cmp	r4, #1
 80015b4:	d100      	bne.n	80015b8 <__aeabi_dadd+0x458>
 80015b6:	e0e5      	b.n	8001784 <__aeabi_dadd+0x624>
 80015b8:	4c85      	ldr	r4, [pc, #532]	; (80017d0 <__aeabi_dadd+0x670>)
 80015ba:	45a4      	cmp	ip, r4
 80015bc:	d058      	beq.n	8001670 <__aeabi_dadd+0x510>
 80015be:	4694      	mov	ip, r2
 80015c0:	e749      	b.n	8001456 <__aeabi_dadd+0x2f6>
 80015c2:	4664      	mov	r4, ip
 80015c4:	2220      	movs	r2, #32
 80015c6:	1b12      	subs	r2, r2, r4
 80015c8:	4644      	mov	r4, r8
 80015ca:	4094      	lsls	r4, r2
 80015cc:	000f      	movs	r7, r1
 80015ce:	46a1      	mov	r9, r4
 80015d0:	4664      	mov	r4, ip
 80015d2:	4091      	lsls	r1, r2
 80015d4:	40e7      	lsrs	r7, r4
 80015d6:	464c      	mov	r4, r9
 80015d8:	1e4a      	subs	r2, r1, #1
 80015da:	4191      	sbcs	r1, r2
 80015dc:	433c      	orrs	r4, r7
 80015de:	4642      	mov	r2, r8
 80015e0:	430c      	orrs	r4, r1
 80015e2:	4661      	mov	r1, ip
 80015e4:	40ca      	lsrs	r2, r1
 80015e6:	1880      	adds	r0, r0, r2
 80015e8:	e6f4      	b.n	80013d4 <__aeabi_dadd+0x274>
 80015ea:	4c79      	ldr	r4, [pc, #484]	; (80017d0 <__aeabi_dadd+0x670>)
 80015ec:	42a2      	cmp	r2, r4
 80015ee:	d100      	bne.n	80015f2 <__aeabi_dadd+0x492>
 80015f0:	e6fd      	b.n	80013ee <__aeabi_dadd+0x28e>
 80015f2:	1859      	adds	r1, r3, r1
 80015f4:	4299      	cmp	r1, r3
 80015f6:	419b      	sbcs	r3, r3
 80015f8:	4440      	add	r0, r8
 80015fa:	425f      	negs	r7, r3
 80015fc:	19c7      	adds	r7, r0, r7
 80015fe:	07fc      	lsls	r4, r7, #31
 8001600:	0849      	lsrs	r1, r1, #1
 8001602:	0016      	movs	r6, r2
 8001604:	430c      	orrs	r4, r1
 8001606:	087f      	lsrs	r7, r7, #1
 8001608:	e6cf      	b.n	80013aa <__aeabi_dadd+0x24a>
 800160a:	1acc      	subs	r4, r1, r3
 800160c:	42a1      	cmp	r1, r4
 800160e:	41bf      	sbcs	r7, r7
 8001610:	4643      	mov	r3, r8
 8001612:	427f      	negs	r7, r7
 8001614:	1a18      	subs	r0, r3, r0
 8001616:	4655      	mov	r5, sl
 8001618:	1bc7      	subs	r7, r0, r7
 800161a:	e5f7      	b.n	800120c <__aeabi_dadd+0xac>
 800161c:	08c9      	lsrs	r1, r1, #3
 800161e:	077b      	lsls	r3, r7, #29
 8001620:	4655      	mov	r5, sl
 8001622:	430b      	orrs	r3, r1
 8001624:	08f8      	lsrs	r0, r7, #3
 8001626:	e6c8      	b.n	80013ba <__aeabi_dadd+0x25a>
 8001628:	2c00      	cmp	r4, #0
 800162a:	d000      	beq.n	800162e <__aeabi_dadd+0x4ce>
 800162c:	e081      	b.n	8001732 <__aeabi_dadd+0x5d2>
 800162e:	4643      	mov	r3, r8
 8001630:	430b      	orrs	r3, r1
 8001632:	d115      	bne.n	8001660 <__aeabi_dadd+0x500>
 8001634:	2080      	movs	r0, #128	; 0x80
 8001636:	2500      	movs	r5, #0
 8001638:	0300      	lsls	r0, r0, #12
 800163a:	e6e3      	b.n	8001404 <__aeabi_dadd+0x2a4>
 800163c:	1a5c      	subs	r4, r3, r1
 800163e:	42a3      	cmp	r3, r4
 8001640:	419b      	sbcs	r3, r3
 8001642:	1bc7      	subs	r7, r0, r7
 8001644:	425b      	negs	r3, r3
 8001646:	2601      	movs	r6, #1
 8001648:	1aff      	subs	r7, r7, r3
 800164a:	e5da      	b.n	8001202 <__aeabi_dadd+0xa2>
 800164c:	0742      	lsls	r2, r0, #29
 800164e:	08db      	lsrs	r3, r3, #3
 8001650:	4313      	orrs	r3, r2
 8001652:	08c0      	lsrs	r0, r0, #3
 8001654:	e6d2      	b.n	80013fc <__aeabi_dadd+0x29c>
 8001656:	0742      	lsls	r2, r0, #29
 8001658:	08db      	lsrs	r3, r3, #3
 800165a:	4313      	orrs	r3, r2
 800165c:	08c0      	lsrs	r0, r0, #3
 800165e:	e6ac      	b.n	80013ba <__aeabi_dadd+0x25a>
 8001660:	4643      	mov	r3, r8
 8001662:	4642      	mov	r2, r8
 8001664:	08c9      	lsrs	r1, r1, #3
 8001666:	075b      	lsls	r3, r3, #29
 8001668:	4655      	mov	r5, sl
 800166a:	430b      	orrs	r3, r1
 800166c:	08d0      	lsrs	r0, r2, #3
 800166e:	e6c5      	b.n	80013fc <__aeabi_dadd+0x29c>
 8001670:	4643      	mov	r3, r8
 8001672:	4642      	mov	r2, r8
 8001674:	075b      	lsls	r3, r3, #29
 8001676:	08c9      	lsrs	r1, r1, #3
 8001678:	430b      	orrs	r3, r1
 800167a:	08d0      	lsrs	r0, r2, #3
 800167c:	e6be      	b.n	80013fc <__aeabi_dadd+0x29c>
 800167e:	4303      	orrs	r3, r0
 8001680:	001c      	movs	r4, r3
 8001682:	1e63      	subs	r3, r4, #1
 8001684:	419c      	sbcs	r4, r3
 8001686:	e6fc      	b.n	8001482 <__aeabi_dadd+0x322>
 8001688:	0002      	movs	r2, r0
 800168a:	3c20      	subs	r4, #32
 800168c:	40e2      	lsrs	r2, r4
 800168e:	0014      	movs	r4, r2
 8001690:	4662      	mov	r2, ip
 8001692:	2a20      	cmp	r2, #32
 8001694:	d003      	beq.n	800169e <__aeabi_dadd+0x53e>
 8001696:	2540      	movs	r5, #64	; 0x40
 8001698:	1aad      	subs	r5, r5, r2
 800169a:	40a8      	lsls	r0, r5
 800169c:	4303      	orrs	r3, r0
 800169e:	1e58      	subs	r0, r3, #1
 80016a0:	4183      	sbcs	r3, r0
 80016a2:	4323      	orrs	r3, r4
 80016a4:	e775      	b.n	8001592 <__aeabi_dadd+0x432>
 80016a6:	2a00      	cmp	r2, #0
 80016a8:	d0e2      	beq.n	8001670 <__aeabi_dadd+0x510>
 80016aa:	003a      	movs	r2, r7
 80016ac:	430a      	orrs	r2, r1
 80016ae:	d0cd      	beq.n	800164c <__aeabi_dadd+0x4ec>
 80016b0:	0742      	lsls	r2, r0, #29
 80016b2:	08db      	lsrs	r3, r3, #3
 80016b4:	4313      	orrs	r3, r2
 80016b6:	2280      	movs	r2, #128	; 0x80
 80016b8:	08c0      	lsrs	r0, r0, #3
 80016ba:	0312      	lsls	r2, r2, #12
 80016bc:	4210      	tst	r0, r2
 80016be:	d006      	beq.n	80016ce <__aeabi_dadd+0x56e>
 80016c0:	08fc      	lsrs	r4, r7, #3
 80016c2:	4214      	tst	r4, r2
 80016c4:	d103      	bne.n	80016ce <__aeabi_dadd+0x56e>
 80016c6:	0020      	movs	r0, r4
 80016c8:	08cb      	lsrs	r3, r1, #3
 80016ca:	077a      	lsls	r2, r7, #29
 80016cc:	4313      	orrs	r3, r2
 80016ce:	0f5a      	lsrs	r2, r3, #29
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	0752      	lsls	r2, r2, #29
 80016d4:	08db      	lsrs	r3, r3, #3
 80016d6:	4313      	orrs	r3, r2
 80016d8:	e690      	b.n	80013fc <__aeabi_dadd+0x29c>
 80016da:	4643      	mov	r3, r8
 80016dc:	430b      	orrs	r3, r1
 80016de:	d100      	bne.n	80016e2 <__aeabi_dadd+0x582>
 80016e0:	e709      	b.n	80014f6 <__aeabi_dadd+0x396>
 80016e2:	4643      	mov	r3, r8
 80016e4:	4642      	mov	r2, r8
 80016e6:	08c9      	lsrs	r1, r1, #3
 80016e8:	075b      	lsls	r3, r3, #29
 80016ea:	4655      	mov	r5, sl
 80016ec:	430b      	orrs	r3, r1
 80016ee:	08d0      	lsrs	r0, r2, #3
 80016f0:	e666      	b.n	80013c0 <__aeabi_dadd+0x260>
 80016f2:	1acc      	subs	r4, r1, r3
 80016f4:	42a1      	cmp	r1, r4
 80016f6:	4189      	sbcs	r1, r1
 80016f8:	1a3f      	subs	r7, r7, r0
 80016fa:	4249      	negs	r1, r1
 80016fc:	4655      	mov	r5, sl
 80016fe:	2601      	movs	r6, #1
 8001700:	1a7f      	subs	r7, r7, r1
 8001702:	e57e      	b.n	8001202 <__aeabi_dadd+0xa2>
 8001704:	4642      	mov	r2, r8
 8001706:	1a5c      	subs	r4, r3, r1
 8001708:	1a87      	subs	r7, r0, r2
 800170a:	42a3      	cmp	r3, r4
 800170c:	4192      	sbcs	r2, r2
 800170e:	4252      	negs	r2, r2
 8001710:	1abf      	subs	r7, r7, r2
 8001712:	023a      	lsls	r2, r7, #8
 8001714:	d53d      	bpl.n	8001792 <__aeabi_dadd+0x632>
 8001716:	1acc      	subs	r4, r1, r3
 8001718:	42a1      	cmp	r1, r4
 800171a:	4189      	sbcs	r1, r1
 800171c:	4643      	mov	r3, r8
 800171e:	4249      	negs	r1, r1
 8001720:	1a1f      	subs	r7, r3, r0
 8001722:	4655      	mov	r5, sl
 8001724:	1a7f      	subs	r7, r7, r1
 8001726:	e595      	b.n	8001254 <__aeabi_dadd+0xf4>
 8001728:	077b      	lsls	r3, r7, #29
 800172a:	08c9      	lsrs	r1, r1, #3
 800172c:	430b      	orrs	r3, r1
 800172e:	08f8      	lsrs	r0, r7, #3
 8001730:	e643      	b.n	80013ba <__aeabi_dadd+0x25a>
 8001732:	4644      	mov	r4, r8
 8001734:	08db      	lsrs	r3, r3, #3
 8001736:	430c      	orrs	r4, r1
 8001738:	d130      	bne.n	800179c <__aeabi_dadd+0x63c>
 800173a:	0742      	lsls	r2, r0, #29
 800173c:	4313      	orrs	r3, r2
 800173e:	08c0      	lsrs	r0, r0, #3
 8001740:	e65c      	b.n	80013fc <__aeabi_dadd+0x29c>
 8001742:	077b      	lsls	r3, r7, #29
 8001744:	08c9      	lsrs	r1, r1, #3
 8001746:	430b      	orrs	r3, r1
 8001748:	08f8      	lsrs	r0, r7, #3
 800174a:	e639      	b.n	80013c0 <__aeabi_dadd+0x260>
 800174c:	185c      	adds	r4, r3, r1
 800174e:	429c      	cmp	r4, r3
 8001750:	419b      	sbcs	r3, r3
 8001752:	4440      	add	r0, r8
 8001754:	425b      	negs	r3, r3
 8001756:	18c7      	adds	r7, r0, r3
 8001758:	023b      	lsls	r3, r7, #8
 800175a:	d400      	bmi.n	800175e <__aeabi_dadd+0x5fe>
 800175c:	e625      	b.n	80013aa <__aeabi_dadd+0x24a>
 800175e:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <__aeabi_dadd+0x674>)
 8001760:	2601      	movs	r6, #1
 8001762:	401f      	ands	r7, r3
 8001764:	e621      	b.n	80013aa <__aeabi_dadd+0x24a>
 8001766:	0004      	movs	r4, r0
 8001768:	3a20      	subs	r2, #32
 800176a:	40d4      	lsrs	r4, r2
 800176c:	4662      	mov	r2, ip
 800176e:	2a20      	cmp	r2, #32
 8001770:	d004      	beq.n	800177c <__aeabi_dadd+0x61c>
 8001772:	2240      	movs	r2, #64	; 0x40
 8001774:	4666      	mov	r6, ip
 8001776:	1b92      	subs	r2, r2, r6
 8001778:	4090      	lsls	r0, r2
 800177a:	4303      	orrs	r3, r0
 800177c:	1e5a      	subs	r2, r3, #1
 800177e:	4193      	sbcs	r3, r2
 8001780:	431c      	orrs	r4, r3
 8001782:	e67e      	b.n	8001482 <__aeabi_dadd+0x322>
 8001784:	185c      	adds	r4, r3, r1
 8001786:	428c      	cmp	r4, r1
 8001788:	4189      	sbcs	r1, r1
 800178a:	4440      	add	r0, r8
 800178c:	4249      	negs	r1, r1
 800178e:	1847      	adds	r7, r0, r1
 8001790:	e6dd      	b.n	800154e <__aeabi_dadd+0x3ee>
 8001792:	0023      	movs	r3, r4
 8001794:	433b      	orrs	r3, r7
 8001796:	d100      	bne.n	800179a <__aeabi_dadd+0x63a>
 8001798:	e6ad      	b.n	80014f6 <__aeabi_dadd+0x396>
 800179a:	e606      	b.n	80013aa <__aeabi_dadd+0x24a>
 800179c:	0744      	lsls	r4, r0, #29
 800179e:	4323      	orrs	r3, r4
 80017a0:	2480      	movs	r4, #128	; 0x80
 80017a2:	08c0      	lsrs	r0, r0, #3
 80017a4:	0324      	lsls	r4, r4, #12
 80017a6:	4220      	tst	r0, r4
 80017a8:	d008      	beq.n	80017bc <__aeabi_dadd+0x65c>
 80017aa:	4642      	mov	r2, r8
 80017ac:	08d6      	lsrs	r6, r2, #3
 80017ae:	4226      	tst	r6, r4
 80017b0:	d104      	bne.n	80017bc <__aeabi_dadd+0x65c>
 80017b2:	4655      	mov	r5, sl
 80017b4:	0030      	movs	r0, r6
 80017b6:	08cb      	lsrs	r3, r1, #3
 80017b8:	0751      	lsls	r1, r2, #29
 80017ba:	430b      	orrs	r3, r1
 80017bc:	0f5a      	lsrs	r2, r3, #29
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	08db      	lsrs	r3, r3, #3
 80017c2:	0752      	lsls	r2, r2, #29
 80017c4:	4313      	orrs	r3, r2
 80017c6:	e619      	b.n	80013fc <__aeabi_dadd+0x29c>
 80017c8:	2300      	movs	r3, #0
 80017ca:	4a01      	ldr	r2, [pc, #4]	; (80017d0 <__aeabi_dadd+0x670>)
 80017cc:	001f      	movs	r7, r3
 80017ce:	e55e      	b.n	800128e <__aeabi_dadd+0x12e>
 80017d0:	000007ff 	.word	0x000007ff
 80017d4:	ff7fffff 	.word	0xff7fffff

080017d8 <__aeabi_ddiv>:
 80017d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017da:	4657      	mov	r7, sl
 80017dc:	464e      	mov	r6, r9
 80017de:	4645      	mov	r5, r8
 80017e0:	46de      	mov	lr, fp
 80017e2:	b5e0      	push	{r5, r6, r7, lr}
 80017e4:	4681      	mov	r9, r0
 80017e6:	0005      	movs	r5, r0
 80017e8:	030c      	lsls	r4, r1, #12
 80017ea:	0048      	lsls	r0, r1, #1
 80017ec:	4692      	mov	sl, r2
 80017ee:	001f      	movs	r7, r3
 80017f0:	b085      	sub	sp, #20
 80017f2:	0b24      	lsrs	r4, r4, #12
 80017f4:	0d40      	lsrs	r0, r0, #21
 80017f6:	0fce      	lsrs	r6, r1, #31
 80017f8:	2800      	cmp	r0, #0
 80017fa:	d100      	bne.n	80017fe <__aeabi_ddiv+0x26>
 80017fc:	e156      	b.n	8001aac <__aeabi_ddiv+0x2d4>
 80017fe:	4bd4      	ldr	r3, [pc, #848]	; (8001b50 <__aeabi_ddiv+0x378>)
 8001800:	4298      	cmp	r0, r3
 8001802:	d100      	bne.n	8001806 <__aeabi_ddiv+0x2e>
 8001804:	e172      	b.n	8001aec <__aeabi_ddiv+0x314>
 8001806:	0f6b      	lsrs	r3, r5, #29
 8001808:	00e4      	lsls	r4, r4, #3
 800180a:	431c      	orrs	r4, r3
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	041b      	lsls	r3, r3, #16
 8001810:	4323      	orrs	r3, r4
 8001812:	4698      	mov	r8, r3
 8001814:	4bcf      	ldr	r3, [pc, #828]	; (8001b54 <__aeabi_ddiv+0x37c>)
 8001816:	00ed      	lsls	r5, r5, #3
 8001818:	469b      	mov	fp, r3
 800181a:	2300      	movs	r3, #0
 800181c:	4699      	mov	r9, r3
 800181e:	4483      	add	fp, r0
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	033c      	lsls	r4, r7, #12
 8001824:	007b      	lsls	r3, r7, #1
 8001826:	4650      	mov	r0, sl
 8001828:	0b24      	lsrs	r4, r4, #12
 800182a:	0d5b      	lsrs	r3, r3, #21
 800182c:	0fff      	lsrs	r7, r7, #31
 800182e:	2b00      	cmp	r3, #0
 8001830:	d100      	bne.n	8001834 <__aeabi_ddiv+0x5c>
 8001832:	e11f      	b.n	8001a74 <__aeabi_ddiv+0x29c>
 8001834:	4ac6      	ldr	r2, [pc, #792]	; (8001b50 <__aeabi_ddiv+0x378>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d100      	bne.n	800183c <__aeabi_ddiv+0x64>
 800183a:	e162      	b.n	8001b02 <__aeabi_ddiv+0x32a>
 800183c:	49c5      	ldr	r1, [pc, #788]	; (8001b54 <__aeabi_ddiv+0x37c>)
 800183e:	0f42      	lsrs	r2, r0, #29
 8001840:	468c      	mov	ip, r1
 8001842:	00e4      	lsls	r4, r4, #3
 8001844:	4659      	mov	r1, fp
 8001846:	4314      	orrs	r4, r2
 8001848:	2280      	movs	r2, #128	; 0x80
 800184a:	4463      	add	r3, ip
 800184c:	0412      	lsls	r2, r2, #16
 800184e:	1acb      	subs	r3, r1, r3
 8001850:	4314      	orrs	r4, r2
 8001852:	469b      	mov	fp, r3
 8001854:	00c2      	lsls	r2, r0, #3
 8001856:	2000      	movs	r0, #0
 8001858:	0033      	movs	r3, r6
 800185a:	407b      	eors	r3, r7
 800185c:	469a      	mov	sl, r3
 800185e:	464b      	mov	r3, r9
 8001860:	2b0f      	cmp	r3, #15
 8001862:	d827      	bhi.n	80018b4 <__aeabi_ddiv+0xdc>
 8001864:	49bc      	ldr	r1, [pc, #752]	; (8001b58 <__aeabi_ddiv+0x380>)
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	58cb      	ldr	r3, [r1, r3]
 800186a:	469f      	mov	pc, r3
 800186c:	46b2      	mov	sl, r6
 800186e:	9b00      	ldr	r3, [sp, #0]
 8001870:	2b02      	cmp	r3, #2
 8001872:	d016      	beq.n	80018a2 <__aeabi_ddiv+0xca>
 8001874:	2b03      	cmp	r3, #3
 8001876:	d100      	bne.n	800187a <__aeabi_ddiv+0xa2>
 8001878:	e28e      	b.n	8001d98 <__aeabi_ddiv+0x5c0>
 800187a:	2b01      	cmp	r3, #1
 800187c:	d000      	beq.n	8001880 <__aeabi_ddiv+0xa8>
 800187e:	e0d9      	b.n	8001a34 <__aeabi_ddiv+0x25c>
 8001880:	2300      	movs	r3, #0
 8001882:	2400      	movs	r4, #0
 8001884:	2500      	movs	r5, #0
 8001886:	4652      	mov	r2, sl
 8001888:	051b      	lsls	r3, r3, #20
 800188a:	4323      	orrs	r3, r4
 800188c:	07d2      	lsls	r2, r2, #31
 800188e:	4313      	orrs	r3, r2
 8001890:	0028      	movs	r0, r5
 8001892:	0019      	movs	r1, r3
 8001894:	b005      	add	sp, #20
 8001896:	bcf0      	pop	{r4, r5, r6, r7}
 8001898:	46bb      	mov	fp, r7
 800189a:	46b2      	mov	sl, r6
 800189c:	46a9      	mov	r9, r5
 800189e:	46a0      	mov	r8, r4
 80018a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018a2:	2400      	movs	r4, #0
 80018a4:	2500      	movs	r5, #0
 80018a6:	4baa      	ldr	r3, [pc, #680]	; (8001b50 <__aeabi_ddiv+0x378>)
 80018a8:	e7ed      	b.n	8001886 <__aeabi_ddiv+0xae>
 80018aa:	46ba      	mov	sl, r7
 80018ac:	46a0      	mov	r8, r4
 80018ae:	0015      	movs	r5, r2
 80018b0:	9000      	str	r0, [sp, #0]
 80018b2:	e7dc      	b.n	800186e <__aeabi_ddiv+0x96>
 80018b4:	4544      	cmp	r4, r8
 80018b6:	d200      	bcs.n	80018ba <__aeabi_ddiv+0xe2>
 80018b8:	e1c7      	b.n	8001c4a <__aeabi_ddiv+0x472>
 80018ba:	d100      	bne.n	80018be <__aeabi_ddiv+0xe6>
 80018bc:	e1c2      	b.n	8001c44 <__aeabi_ddiv+0x46c>
 80018be:	2301      	movs	r3, #1
 80018c0:	425b      	negs	r3, r3
 80018c2:	469c      	mov	ip, r3
 80018c4:	002e      	movs	r6, r5
 80018c6:	4640      	mov	r0, r8
 80018c8:	2500      	movs	r5, #0
 80018ca:	44e3      	add	fp, ip
 80018cc:	0223      	lsls	r3, r4, #8
 80018ce:	0e14      	lsrs	r4, r2, #24
 80018d0:	431c      	orrs	r4, r3
 80018d2:	0c1b      	lsrs	r3, r3, #16
 80018d4:	4699      	mov	r9, r3
 80018d6:	0423      	lsls	r3, r4, #16
 80018d8:	0c1f      	lsrs	r7, r3, #16
 80018da:	0212      	lsls	r2, r2, #8
 80018dc:	4649      	mov	r1, r9
 80018de:	9200      	str	r2, [sp, #0]
 80018e0:	9701      	str	r7, [sp, #4]
 80018e2:	f7fe fcb3 	bl	800024c <__aeabi_uidivmod>
 80018e6:	0002      	movs	r2, r0
 80018e8:	437a      	muls	r2, r7
 80018ea:	040b      	lsls	r3, r1, #16
 80018ec:	0c31      	lsrs	r1, r6, #16
 80018ee:	4680      	mov	r8, r0
 80018f0:	4319      	orrs	r1, r3
 80018f2:	428a      	cmp	r2, r1
 80018f4:	d907      	bls.n	8001906 <__aeabi_ddiv+0x12e>
 80018f6:	2301      	movs	r3, #1
 80018f8:	425b      	negs	r3, r3
 80018fa:	469c      	mov	ip, r3
 80018fc:	1909      	adds	r1, r1, r4
 80018fe:	44e0      	add	r8, ip
 8001900:	428c      	cmp	r4, r1
 8001902:	d800      	bhi.n	8001906 <__aeabi_ddiv+0x12e>
 8001904:	e207      	b.n	8001d16 <__aeabi_ddiv+0x53e>
 8001906:	1a88      	subs	r0, r1, r2
 8001908:	4649      	mov	r1, r9
 800190a:	f7fe fc9f 	bl	800024c <__aeabi_uidivmod>
 800190e:	0409      	lsls	r1, r1, #16
 8001910:	468c      	mov	ip, r1
 8001912:	0431      	lsls	r1, r6, #16
 8001914:	4666      	mov	r6, ip
 8001916:	9a01      	ldr	r2, [sp, #4]
 8001918:	0c09      	lsrs	r1, r1, #16
 800191a:	4342      	muls	r2, r0
 800191c:	0003      	movs	r3, r0
 800191e:	4331      	orrs	r1, r6
 8001920:	428a      	cmp	r2, r1
 8001922:	d904      	bls.n	800192e <__aeabi_ddiv+0x156>
 8001924:	1909      	adds	r1, r1, r4
 8001926:	3b01      	subs	r3, #1
 8001928:	428c      	cmp	r4, r1
 800192a:	d800      	bhi.n	800192e <__aeabi_ddiv+0x156>
 800192c:	e1ed      	b.n	8001d0a <__aeabi_ddiv+0x532>
 800192e:	1a88      	subs	r0, r1, r2
 8001930:	4642      	mov	r2, r8
 8001932:	0412      	lsls	r2, r2, #16
 8001934:	431a      	orrs	r2, r3
 8001936:	4690      	mov	r8, r2
 8001938:	4641      	mov	r1, r8
 800193a:	9b00      	ldr	r3, [sp, #0]
 800193c:	040e      	lsls	r6, r1, #16
 800193e:	0c1b      	lsrs	r3, r3, #16
 8001940:	001f      	movs	r7, r3
 8001942:	9302      	str	r3, [sp, #8]
 8001944:	9b00      	ldr	r3, [sp, #0]
 8001946:	0c36      	lsrs	r6, r6, #16
 8001948:	041b      	lsls	r3, r3, #16
 800194a:	0c19      	lsrs	r1, r3, #16
 800194c:	000b      	movs	r3, r1
 800194e:	4373      	muls	r3, r6
 8001950:	0c12      	lsrs	r2, r2, #16
 8001952:	437e      	muls	r6, r7
 8001954:	9103      	str	r1, [sp, #12]
 8001956:	4351      	muls	r1, r2
 8001958:	437a      	muls	r2, r7
 800195a:	0c1f      	lsrs	r7, r3, #16
 800195c:	46bc      	mov	ip, r7
 800195e:	1876      	adds	r6, r6, r1
 8001960:	4466      	add	r6, ip
 8001962:	42b1      	cmp	r1, r6
 8001964:	d903      	bls.n	800196e <__aeabi_ddiv+0x196>
 8001966:	2180      	movs	r1, #128	; 0x80
 8001968:	0249      	lsls	r1, r1, #9
 800196a:	468c      	mov	ip, r1
 800196c:	4462      	add	r2, ip
 800196e:	0c31      	lsrs	r1, r6, #16
 8001970:	188a      	adds	r2, r1, r2
 8001972:	0431      	lsls	r1, r6, #16
 8001974:	041e      	lsls	r6, r3, #16
 8001976:	0c36      	lsrs	r6, r6, #16
 8001978:	198e      	adds	r6, r1, r6
 800197a:	4290      	cmp	r0, r2
 800197c:	d302      	bcc.n	8001984 <__aeabi_ddiv+0x1ac>
 800197e:	d112      	bne.n	80019a6 <__aeabi_ddiv+0x1ce>
 8001980:	42b5      	cmp	r5, r6
 8001982:	d210      	bcs.n	80019a6 <__aeabi_ddiv+0x1ce>
 8001984:	4643      	mov	r3, r8
 8001986:	1e59      	subs	r1, r3, #1
 8001988:	9b00      	ldr	r3, [sp, #0]
 800198a:	469c      	mov	ip, r3
 800198c:	4465      	add	r5, ip
 800198e:	001f      	movs	r7, r3
 8001990:	429d      	cmp	r5, r3
 8001992:	419b      	sbcs	r3, r3
 8001994:	425b      	negs	r3, r3
 8001996:	191b      	adds	r3, r3, r4
 8001998:	18c0      	adds	r0, r0, r3
 800199a:	4284      	cmp	r4, r0
 800199c:	d200      	bcs.n	80019a0 <__aeabi_ddiv+0x1c8>
 800199e:	e1a0      	b.n	8001ce2 <__aeabi_ddiv+0x50a>
 80019a0:	d100      	bne.n	80019a4 <__aeabi_ddiv+0x1cc>
 80019a2:	e19b      	b.n	8001cdc <__aeabi_ddiv+0x504>
 80019a4:	4688      	mov	r8, r1
 80019a6:	1bae      	subs	r6, r5, r6
 80019a8:	42b5      	cmp	r5, r6
 80019aa:	41ad      	sbcs	r5, r5
 80019ac:	1a80      	subs	r0, r0, r2
 80019ae:	426d      	negs	r5, r5
 80019b0:	1b40      	subs	r0, r0, r5
 80019b2:	4284      	cmp	r4, r0
 80019b4:	d100      	bne.n	80019b8 <__aeabi_ddiv+0x1e0>
 80019b6:	e1d5      	b.n	8001d64 <__aeabi_ddiv+0x58c>
 80019b8:	4649      	mov	r1, r9
 80019ba:	f7fe fc47 	bl	800024c <__aeabi_uidivmod>
 80019be:	9a01      	ldr	r2, [sp, #4]
 80019c0:	040b      	lsls	r3, r1, #16
 80019c2:	4342      	muls	r2, r0
 80019c4:	0c31      	lsrs	r1, r6, #16
 80019c6:	0005      	movs	r5, r0
 80019c8:	4319      	orrs	r1, r3
 80019ca:	428a      	cmp	r2, r1
 80019cc:	d900      	bls.n	80019d0 <__aeabi_ddiv+0x1f8>
 80019ce:	e16c      	b.n	8001caa <__aeabi_ddiv+0x4d2>
 80019d0:	1a88      	subs	r0, r1, r2
 80019d2:	4649      	mov	r1, r9
 80019d4:	f7fe fc3a 	bl	800024c <__aeabi_uidivmod>
 80019d8:	9a01      	ldr	r2, [sp, #4]
 80019da:	0436      	lsls	r6, r6, #16
 80019dc:	4342      	muls	r2, r0
 80019de:	0409      	lsls	r1, r1, #16
 80019e0:	0c36      	lsrs	r6, r6, #16
 80019e2:	0003      	movs	r3, r0
 80019e4:	430e      	orrs	r6, r1
 80019e6:	42b2      	cmp	r2, r6
 80019e8:	d900      	bls.n	80019ec <__aeabi_ddiv+0x214>
 80019ea:	e153      	b.n	8001c94 <__aeabi_ddiv+0x4bc>
 80019ec:	9803      	ldr	r0, [sp, #12]
 80019ee:	1ab6      	subs	r6, r6, r2
 80019f0:	0002      	movs	r2, r0
 80019f2:	042d      	lsls	r5, r5, #16
 80019f4:	431d      	orrs	r5, r3
 80019f6:	9f02      	ldr	r7, [sp, #8]
 80019f8:	042b      	lsls	r3, r5, #16
 80019fa:	0c1b      	lsrs	r3, r3, #16
 80019fc:	435a      	muls	r2, r3
 80019fe:	437b      	muls	r3, r7
 8001a00:	469c      	mov	ip, r3
 8001a02:	0c29      	lsrs	r1, r5, #16
 8001a04:	4348      	muls	r0, r1
 8001a06:	0c13      	lsrs	r3, r2, #16
 8001a08:	4484      	add	ip, r0
 8001a0a:	4463      	add	r3, ip
 8001a0c:	4379      	muls	r1, r7
 8001a0e:	4298      	cmp	r0, r3
 8001a10:	d903      	bls.n	8001a1a <__aeabi_ddiv+0x242>
 8001a12:	2080      	movs	r0, #128	; 0x80
 8001a14:	0240      	lsls	r0, r0, #9
 8001a16:	4684      	mov	ip, r0
 8001a18:	4461      	add	r1, ip
 8001a1a:	0c18      	lsrs	r0, r3, #16
 8001a1c:	0412      	lsls	r2, r2, #16
 8001a1e:	041b      	lsls	r3, r3, #16
 8001a20:	0c12      	lsrs	r2, r2, #16
 8001a22:	1841      	adds	r1, r0, r1
 8001a24:	189b      	adds	r3, r3, r2
 8001a26:	428e      	cmp	r6, r1
 8001a28:	d200      	bcs.n	8001a2c <__aeabi_ddiv+0x254>
 8001a2a:	e0ff      	b.n	8001c2c <__aeabi_ddiv+0x454>
 8001a2c:	d100      	bne.n	8001a30 <__aeabi_ddiv+0x258>
 8001a2e:	e0fa      	b.n	8001c26 <__aeabi_ddiv+0x44e>
 8001a30:	2301      	movs	r3, #1
 8001a32:	431d      	orrs	r5, r3
 8001a34:	4a49      	ldr	r2, [pc, #292]	; (8001b5c <__aeabi_ddiv+0x384>)
 8001a36:	445a      	add	r2, fp
 8001a38:	2a00      	cmp	r2, #0
 8001a3a:	dc00      	bgt.n	8001a3e <__aeabi_ddiv+0x266>
 8001a3c:	e0aa      	b.n	8001b94 <__aeabi_ddiv+0x3bc>
 8001a3e:	076b      	lsls	r3, r5, #29
 8001a40:	d000      	beq.n	8001a44 <__aeabi_ddiv+0x26c>
 8001a42:	e13d      	b.n	8001cc0 <__aeabi_ddiv+0x4e8>
 8001a44:	08ed      	lsrs	r5, r5, #3
 8001a46:	4643      	mov	r3, r8
 8001a48:	01db      	lsls	r3, r3, #7
 8001a4a:	d506      	bpl.n	8001a5a <__aeabi_ddiv+0x282>
 8001a4c:	4642      	mov	r2, r8
 8001a4e:	4b44      	ldr	r3, [pc, #272]	; (8001b60 <__aeabi_ddiv+0x388>)
 8001a50:	401a      	ands	r2, r3
 8001a52:	4690      	mov	r8, r2
 8001a54:	2280      	movs	r2, #128	; 0x80
 8001a56:	00d2      	lsls	r2, r2, #3
 8001a58:	445a      	add	r2, fp
 8001a5a:	4b42      	ldr	r3, [pc, #264]	; (8001b64 <__aeabi_ddiv+0x38c>)
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	dd00      	ble.n	8001a62 <__aeabi_ddiv+0x28a>
 8001a60:	e71f      	b.n	80018a2 <__aeabi_ddiv+0xca>
 8001a62:	4643      	mov	r3, r8
 8001a64:	075b      	lsls	r3, r3, #29
 8001a66:	431d      	orrs	r5, r3
 8001a68:	4643      	mov	r3, r8
 8001a6a:	0552      	lsls	r2, r2, #21
 8001a6c:	025c      	lsls	r4, r3, #9
 8001a6e:	0b24      	lsrs	r4, r4, #12
 8001a70:	0d53      	lsrs	r3, r2, #21
 8001a72:	e708      	b.n	8001886 <__aeabi_ddiv+0xae>
 8001a74:	4652      	mov	r2, sl
 8001a76:	4322      	orrs	r2, r4
 8001a78:	d100      	bne.n	8001a7c <__aeabi_ddiv+0x2a4>
 8001a7a:	e07b      	b.n	8001b74 <__aeabi_ddiv+0x39c>
 8001a7c:	2c00      	cmp	r4, #0
 8001a7e:	d100      	bne.n	8001a82 <__aeabi_ddiv+0x2aa>
 8001a80:	e0fa      	b.n	8001c78 <__aeabi_ddiv+0x4a0>
 8001a82:	0020      	movs	r0, r4
 8001a84:	f001 fa22 	bl	8002ecc <__clzsi2>
 8001a88:	0002      	movs	r2, r0
 8001a8a:	3a0b      	subs	r2, #11
 8001a8c:	231d      	movs	r3, #29
 8001a8e:	0001      	movs	r1, r0
 8001a90:	1a9b      	subs	r3, r3, r2
 8001a92:	4652      	mov	r2, sl
 8001a94:	3908      	subs	r1, #8
 8001a96:	40da      	lsrs	r2, r3
 8001a98:	408c      	lsls	r4, r1
 8001a9a:	4314      	orrs	r4, r2
 8001a9c:	4652      	mov	r2, sl
 8001a9e:	408a      	lsls	r2, r1
 8001aa0:	4b31      	ldr	r3, [pc, #196]	; (8001b68 <__aeabi_ddiv+0x390>)
 8001aa2:	4458      	add	r0, fp
 8001aa4:	469b      	mov	fp, r3
 8001aa6:	4483      	add	fp, r0
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	e6d5      	b.n	8001858 <__aeabi_ddiv+0x80>
 8001aac:	464b      	mov	r3, r9
 8001aae:	4323      	orrs	r3, r4
 8001ab0:	4698      	mov	r8, r3
 8001ab2:	d044      	beq.n	8001b3e <__aeabi_ddiv+0x366>
 8001ab4:	2c00      	cmp	r4, #0
 8001ab6:	d100      	bne.n	8001aba <__aeabi_ddiv+0x2e2>
 8001ab8:	e0ce      	b.n	8001c58 <__aeabi_ddiv+0x480>
 8001aba:	0020      	movs	r0, r4
 8001abc:	f001 fa06 	bl	8002ecc <__clzsi2>
 8001ac0:	0001      	movs	r1, r0
 8001ac2:	0002      	movs	r2, r0
 8001ac4:	390b      	subs	r1, #11
 8001ac6:	231d      	movs	r3, #29
 8001ac8:	1a5b      	subs	r3, r3, r1
 8001aca:	4649      	mov	r1, r9
 8001acc:	0010      	movs	r0, r2
 8001ace:	40d9      	lsrs	r1, r3
 8001ad0:	3808      	subs	r0, #8
 8001ad2:	4084      	lsls	r4, r0
 8001ad4:	000b      	movs	r3, r1
 8001ad6:	464d      	mov	r5, r9
 8001ad8:	4323      	orrs	r3, r4
 8001ada:	4698      	mov	r8, r3
 8001adc:	4085      	lsls	r5, r0
 8001ade:	4823      	ldr	r0, [pc, #140]	; (8001b6c <__aeabi_ddiv+0x394>)
 8001ae0:	1a83      	subs	r3, r0, r2
 8001ae2:	469b      	mov	fp, r3
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	4699      	mov	r9, r3
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	e69a      	b.n	8001822 <__aeabi_ddiv+0x4a>
 8001aec:	464b      	mov	r3, r9
 8001aee:	4323      	orrs	r3, r4
 8001af0:	4698      	mov	r8, r3
 8001af2:	d11d      	bne.n	8001b30 <__aeabi_ddiv+0x358>
 8001af4:	2308      	movs	r3, #8
 8001af6:	4699      	mov	r9, r3
 8001af8:	3b06      	subs	r3, #6
 8001afa:	2500      	movs	r5, #0
 8001afc:	4683      	mov	fp, r0
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	e68f      	b.n	8001822 <__aeabi_ddiv+0x4a>
 8001b02:	4652      	mov	r2, sl
 8001b04:	4322      	orrs	r2, r4
 8001b06:	d109      	bne.n	8001b1c <__aeabi_ddiv+0x344>
 8001b08:	2302      	movs	r3, #2
 8001b0a:	4649      	mov	r1, r9
 8001b0c:	4319      	orrs	r1, r3
 8001b0e:	4b18      	ldr	r3, [pc, #96]	; (8001b70 <__aeabi_ddiv+0x398>)
 8001b10:	4689      	mov	r9, r1
 8001b12:	469c      	mov	ip, r3
 8001b14:	2400      	movs	r4, #0
 8001b16:	2002      	movs	r0, #2
 8001b18:	44e3      	add	fp, ip
 8001b1a:	e69d      	b.n	8001858 <__aeabi_ddiv+0x80>
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	464a      	mov	r2, r9
 8001b20:	431a      	orrs	r2, r3
 8001b22:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <__aeabi_ddiv+0x398>)
 8001b24:	4691      	mov	r9, r2
 8001b26:	469c      	mov	ip, r3
 8001b28:	4652      	mov	r2, sl
 8001b2a:	2003      	movs	r0, #3
 8001b2c:	44e3      	add	fp, ip
 8001b2e:	e693      	b.n	8001858 <__aeabi_ddiv+0x80>
 8001b30:	230c      	movs	r3, #12
 8001b32:	4699      	mov	r9, r3
 8001b34:	3b09      	subs	r3, #9
 8001b36:	46a0      	mov	r8, r4
 8001b38:	4683      	mov	fp, r0
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	e671      	b.n	8001822 <__aeabi_ddiv+0x4a>
 8001b3e:	2304      	movs	r3, #4
 8001b40:	4699      	mov	r9, r3
 8001b42:	2300      	movs	r3, #0
 8001b44:	469b      	mov	fp, r3
 8001b46:	3301      	adds	r3, #1
 8001b48:	2500      	movs	r5, #0
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	e669      	b.n	8001822 <__aeabi_ddiv+0x4a>
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	000007ff 	.word	0x000007ff
 8001b54:	fffffc01 	.word	0xfffffc01
 8001b58:	0800bb78 	.word	0x0800bb78
 8001b5c:	000003ff 	.word	0x000003ff
 8001b60:	feffffff 	.word	0xfeffffff
 8001b64:	000007fe 	.word	0x000007fe
 8001b68:	000003f3 	.word	0x000003f3
 8001b6c:	fffffc0d 	.word	0xfffffc0d
 8001b70:	fffff801 	.word	0xfffff801
 8001b74:	4649      	mov	r1, r9
 8001b76:	2301      	movs	r3, #1
 8001b78:	4319      	orrs	r1, r3
 8001b7a:	4689      	mov	r9, r1
 8001b7c:	2400      	movs	r4, #0
 8001b7e:	2001      	movs	r0, #1
 8001b80:	e66a      	b.n	8001858 <__aeabi_ddiv+0x80>
 8001b82:	2300      	movs	r3, #0
 8001b84:	2480      	movs	r4, #128	; 0x80
 8001b86:	469a      	mov	sl, r3
 8001b88:	2500      	movs	r5, #0
 8001b8a:	4b8a      	ldr	r3, [pc, #552]	; (8001db4 <__aeabi_ddiv+0x5dc>)
 8001b8c:	0324      	lsls	r4, r4, #12
 8001b8e:	e67a      	b.n	8001886 <__aeabi_ddiv+0xae>
 8001b90:	2501      	movs	r5, #1
 8001b92:	426d      	negs	r5, r5
 8001b94:	2301      	movs	r3, #1
 8001b96:	1a9b      	subs	r3, r3, r2
 8001b98:	2b38      	cmp	r3, #56	; 0x38
 8001b9a:	dd00      	ble.n	8001b9e <__aeabi_ddiv+0x3c6>
 8001b9c:	e670      	b.n	8001880 <__aeabi_ddiv+0xa8>
 8001b9e:	2b1f      	cmp	r3, #31
 8001ba0:	dc00      	bgt.n	8001ba4 <__aeabi_ddiv+0x3cc>
 8001ba2:	e0bf      	b.n	8001d24 <__aeabi_ddiv+0x54c>
 8001ba4:	211f      	movs	r1, #31
 8001ba6:	4249      	negs	r1, r1
 8001ba8:	1a8a      	subs	r2, r1, r2
 8001baa:	4641      	mov	r1, r8
 8001bac:	40d1      	lsrs	r1, r2
 8001bae:	000a      	movs	r2, r1
 8001bb0:	2b20      	cmp	r3, #32
 8001bb2:	d004      	beq.n	8001bbe <__aeabi_ddiv+0x3e6>
 8001bb4:	4641      	mov	r1, r8
 8001bb6:	4b80      	ldr	r3, [pc, #512]	; (8001db8 <__aeabi_ddiv+0x5e0>)
 8001bb8:	445b      	add	r3, fp
 8001bba:	4099      	lsls	r1, r3
 8001bbc:	430d      	orrs	r5, r1
 8001bbe:	1e6b      	subs	r3, r5, #1
 8001bc0:	419d      	sbcs	r5, r3
 8001bc2:	2307      	movs	r3, #7
 8001bc4:	432a      	orrs	r2, r5
 8001bc6:	001d      	movs	r5, r3
 8001bc8:	2400      	movs	r4, #0
 8001bca:	4015      	ands	r5, r2
 8001bcc:	4213      	tst	r3, r2
 8001bce:	d100      	bne.n	8001bd2 <__aeabi_ddiv+0x3fa>
 8001bd0:	e0d4      	b.n	8001d7c <__aeabi_ddiv+0x5a4>
 8001bd2:	210f      	movs	r1, #15
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	4011      	ands	r1, r2
 8001bd8:	2904      	cmp	r1, #4
 8001bda:	d100      	bne.n	8001bde <__aeabi_ddiv+0x406>
 8001bdc:	e0cb      	b.n	8001d76 <__aeabi_ddiv+0x59e>
 8001bde:	1d11      	adds	r1, r2, #4
 8001be0:	4291      	cmp	r1, r2
 8001be2:	4192      	sbcs	r2, r2
 8001be4:	4252      	negs	r2, r2
 8001be6:	189b      	adds	r3, r3, r2
 8001be8:	000a      	movs	r2, r1
 8001bea:	0219      	lsls	r1, r3, #8
 8001bec:	d400      	bmi.n	8001bf0 <__aeabi_ddiv+0x418>
 8001bee:	e0c2      	b.n	8001d76 <__aeabi_ddiv+0x59e>
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	2400      	movs	r4, #0
 8001bf4:	2500      	movs	r5, #0
 8001bf6:	e646      	b.n	8001886 <__aeabi_ddiv+0xae>
 8001bf8:	2380      	movs	r3, #128	; 0x80
 8001bfa:	4641      	mov	r1, r8
 8001bfc:	031b      	lsls	r3, r3, #12
 8001bfe:	4219      	tst	r1, r3
 8001c00:	d008      	beq.n	8001c14 <__aeabi_ddiv+0x43c>
 8001c02:	421c      	tst	r4, r3
 8001c04:	d106      	bne.n	8001c14 <__aeabi_ddiv+0x43c>
 8001c06:	431c      	orrs	r4, r3
 8001c08:	0324      	lsls	r4, r4, #12
 8001c0a:	46ba      	mov	sl, r7
 8001c0c:	0015      	movs	r5, r2
 8001c0e:	4b69      	ldr	r3, [pc, #420]	; (8001db4 <__aeabi_ddiv+0x5dc>)
 8001c10:	0b24      	lsrs	r4, r4, #12
 8001c12:	e638      	b.n	8001886 <__aeabi_ddiv+0xae>
 8001c14:	2480      	movs	r4, #128	; 0x80
 8001c16:	4643      	mov	r3, r8
 8001c18:	0324      	lsls	r4, r4, #12
 8001c1a:	431c      	orrs	r4, r3
 8001c1c:	0324      	lsls	r4, r4, #12
 8001c1e:	46b2      	mov	sl, r6
 8001c20:	4b64      	ldr	r3, [pc, #400]	; (8001db4 <__aeabi_ddiv+0x5dc>)
 8001c22:	0b24      	lsrs	r4, r4, #12
 8001c24:	e62f      	b.n	8001886 <__aeabi_ddiv+0xae>
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d100      	bne.n	8001c2c <__aeabi_ddiv+0x454>
 8001c2a:	e703      	b.n	8001a34 <__aeabi_ddiv+0x25c>
 8001c2c:	19a6      	adds	r6, r4, r6
 8001c2e:	1e68      	subs	r0, r5, #1
 8001c30:	42a6      	cmp	r6, r4
 8001c32:	d200      	bcs.n	8001c36 <__aeabi_ddiv+0x45e>
 8001c34:	e08d      	b.n	8001d52 <__aeabi_ddiv+0x57a>
 8001c36:	428e      	cmp	r6, r1
 8001c38:	d200      	bcs.n	8001c3c <__aeabi_ddiv+0x464>
 8001c3a:	e0a3      	b.n	8001d84 <__aeabi_ddiv+0x5ac>
 8001c3c:	d100      	bne.n	8001c40 <__aeabi_ddiv+0x468>
 8001c3e:	e0b3      	b.n	8001da8 <__aeabi_ddiv+0x5d0>
 8001c40:	0005      	movs	r5, r0
 8001c42:	e6f5      	b.n	8001a30 <__aeabi_ddiv+0x258>
 8001c44:	42aa      	cmp	r2, r5
 8001c46:	d900      	bls.n	8001c4a <__aeabi_ddiv+0x472>
 8001c48:	e639      	b.n	80018be <__aeabi_ddiv+0xe6>
 8001c4a:	4643      	mov	r3, r8
 8001c4c:	07de      	lsls	r6, r3, #31
 8001c4e:	0858      	lsrs	r0, r3, #1
 8001c50:	086b      	lsrs	r3, r5, #1
 8001c52:	431e      	orrs	r6, r3
 8001c54:	07ed      	lsls	r5, r5, #31
 8001c56:	e639      	b.n	80018cc <__aeabi_ddiv+0xf4>
 8001c58:	4648      	mov	r0, r9
 8001c5a:	f001 f937 	bl	8002ecc <__clzsi2>
 8001c5e:	0001      	movs	r1, r0
 8001c60:	0002      	movs	r2, r0
 8001c62:	3115      	adds	r1, #21
 8001c64:	3220      	adds	r2, #32
 8001c66:	291c      	cmp	r1, #28
 8001c68:	dc00      	bgt.n	8001c6c <__aeabi_ddiv+0x494>
 8001c6a:	e72c      	b.n	8001ac6 <__aeabi_ddiv+0x2ee>
 8001c6c:	464b      	mov	r3, r9
 8001c6e:	3808      	subs	r0, #8
 8001c70:	4083      	lsls	r3, r0
 8001c72:	2500      	movs	r5, #0
 8001c74:	4698      	mov	r8, r3
 8001c76:	e732      	b.n	8001ade <__aeabi_ddiv+0x306>
 8001c78:	f001 f928 	bl	8002ecc <__clzsi2>
 8001c7c:	0003      	movs	r3, r0
 8001c7e:	001a      	movs	r2, r3
 8001c80:	3215      	adds	r2, #21
 8001c82:	3020      	adds	r0, #32
 8001c84:	2a1c      	cmp	r2, #28
 8001c86:	dc00      	bgt.n	8001c8a <__aeabi_ddiv+0x4b2>
 8001c88:	e700      	b.n	8001a8c <__aeabi_ddiv+0x2b4>
 8001c8a:	4654      	mov	r4, sl
 8001c8c:	3b08      	subs	r3, #8
 8001c8e:	2200      	movs	r2, #0
 8001c90:	409c      	lsls	r4, r3
 8001c92:	e705      	b.n	8001aa0 <__aeabi_ddiv+0x2c8>
 8001c94:	1936      	adds	r6, r6, r4
 8001c96:	3b01      	subs	r3, #1
 8001c98:	42b4      	cmp	r4, r6
 8001c9a:	d900      	bls.n	8001c9e <__aeabi_ddiv+0x4c6>
 8001c9c:	e6a6      	b.n	80019ec <__aeabi_ddiv+0x214>
 8001c9e:	42b2      	cmp	r2, r6
 8001ca0:	d800      	bhi.n	8001ca4 <__aeabi_ddiv+0x4cc>
 8001ca2:	e6a3      	b.n	80019ec <__aeabi_ddiv+0x214>
 8001ca4:	1e83      	subs	r3, r0, #2
 8001ca6:	1936      	adds	r6, r6, r4
 8001ca8:	e6a0      	b.n	80019ec <__aeabi_ddiv+0x214>
 8001caa:	1909      	adds	r1, r1, r4
 8001cac:	3d01      	subs	r5, #1
 8001cae:	428c      	cmp	r4, r1
 8001cb0:	d900      	bls.n	8001cb4 <__aeabi_ddiv+0x4dc>
 8001cb2:	e68d      	b.n	80019d0 <__aeabi_ddiv+0x1f8>
 8001cb4:	428a      	cmp	r2, r1
 8001cb6:	d800      	bhi.n	8001cba <__aeabi_ddiv+0x4e2>
 8001cb8:	e68a      	b.n	80019d0 <__aeabi_ddiv+0x1f8>
 8001cba:	1e85      	subs	r5, r0, #2
 8001cbc:	1909      	adds	r1, r1, r4
 8001cbe:	e687      	b.n	80019d0 <__aeabi_ddiv+0x1f8>
 8001cc0:	230f      	movs	r3, #15
 8001cc2:	402b      	ands	r3, r5
 8001cc4:	2b04      	cmp	r3, #4
 8001cc6:	d100      	bne.n	8001cca <__aeabi_ddiv+0x4f2>
 8001cc8:	e6bc      	b.n	8001a44 <__aeabi_ddiv+0x26c>
 8001cca:	2305      	movs	r3, #5
 8001ccc:	425b      	negs	r3, r3
 8001cce:	42ab      	cmp	r3, r5
 8001cd0:	419b      	sbcs	r3, r3
 8001cd2:	3504      	adds	r5, #4
 8001cd4:	425b      	negs	r3, r3
 8001cd6:	08ed      	lsrs	r5, r5, #3
 8001cd8:	4498      	add	r8, r3
 8001cda:	e6b4      	b.n	8001a46 <__aeabi_ddiv+0x26e>
 8001cdc:	42af      	cmp	r7, r5
 8001cde:	d900      	bls.n	8001ce2 <__aeabi_ddiv+0x50a>
 8001ce0:	e660      	b.n	80019a4 <__aeabi_ddiv+0x1cc>
 8001ce2:	4282      	cmp	r2, r0
 8001ce4:	d804      	bhi.n	8001cf0 <__aeabi_ddiv+0x518>
 8001ce6:	d000      	beq.n	8001cea <__aeabi_ddiv+0x512>
 8001ce8:	e65c      	b.n	80019a4 <__aeabi_ddiv+0x1cc>
 8001cea:	42ae      	cmp	r6, r5
 8001cec:	d800      	bhi.n	8001cf0 <__aeabi_ddiv+0x518>
 8001cee:	e659      	b.n	80019a4 <__aeabi_ddiv+0x1cc>
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	425b      	negs	r3, r3
 8001cf4:	469c      	mov	ip, r3
 8001cf6:	9b00      	ldr	r3, [sp, #0]
 8001cf8:	44e0      	add	r8, ip
 8001cfa:	469c      	mov	ip, r3
 8001cfc:	4465      	add	r5, ip
 8001cfe:	429d      	cmp	r5, r3
 8001d00:	419b      	sbcs	r3, r3
 8001d02:	425b      	negs	r3, r3
 8001d04:	191b      	adds	r3, r3, r4
 8001d06:	18c0      	adds	r0, r0, r3
 8001d08:	e64d      	b.n	80019a6 <__aeabi_ddiv+0x1ce>
 8001d0a:	428a      	cmp	r2, r1
 8001d0c:	d800      	bhi.n	8001d10 <__aeabi_ddiv+0x538>
 8001d0e:	e60e      	b.n	800192e <__aeabi_ddiv+0x156>
 8001d10:	1e83      	subs	r3, r0, #2
 8001d12:	1909      	adds	r1, r1, r4
 8001d14:	e60b      	b.n	800192e <__aeabi_ddiv+0x156>
 8001d16:	428a      	cmp	r2, r1
 8001d18:	d800      	bhi.n	8001d1c <__aeabi_ddiv+0x544>
 8001d1a:	e5f4      	b.n	8001906 <__aeabi_ddiv+0x12e>
 8001d1c:	1e83      	subs	r3, r0, #2
 8001d1e:	4698      	mov	r8, r3
 8001d20:	1909      	adds	r1, r1, r4
 8001d22:	e5f0      	b.n	8001906 <__aeabi_ddiv+0x12e>
 8001d24:	4925      	ldr	r1, [pc, #148]	; (8001dbc <__aeabi_ddiv+0x5e4>)
 8001d26:	0028      	movs	r0, r5
 8001d28:	4459      	add	r1, fp
 8001d2a:	408d      	lsls	r5, r1
 8001d2c:	4642      	mov	r2, r8
 8001d2e:	408a      	lsls	r2, r1
 8001d30:	1e69      	subs	r1, r5, #1
 8001d32:	418d      	sbcs	r5, r1
 8001d34:	4641      	mov	r1, r8
 8001d36:	40d8      	lsrs	r0, r3
 8001d38:	40d9      	lsrs	r1, r3
 8001d3a:	4302      	orrs	r2, r0
 8001d3c:	432a      	orrs	r2, r5
 8001d3e:	000b      	movs	r3, r1
 8001d40:	0751      	lsls	r1, r2, #29
 8001d42:	d100      	bne.n	8001d46 <__aeabi_ddiv+0x56e>
 8001d44:	e751      	b.n	8001bea <__aeabi_ddiv+0x412>
 8001d46:	210f      	movs	r1, #15
 8001d48:	4011      	ands	r1, r2
 8001d4a:	2904      	cmp	r1, #4
 8001d4c:	d000      	beq.n	8001d50 <__aeabi_ddiv+0x578>
 8001d4e:	e746      	b.n	8001bde <__aeabi_ddiv+0x406>
 8001d50:	e74b      	b.n	8001bea <__aeabi_ddiv+0x412>
 8001d52:	0005      	movs	r5, r0
 8001d54:	428e      	cmp	r6, r1
 8001d56:	d000      	beq.n	8001d5a <__aeabi_ddiv+0x582>
 8001d58:	e66a      	b.n	8001a30 <__aeabi_ddiv+0x258>
 8001d5a:	9a00      	ldr	r2, [sp, #0]
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d000      	beq.n	8001d62 <__aeabi_ddiv+0x58a>
 8001d60:	e666      	b.n	8001a30 <__aeabi_ddiv+0x258>
 8001d62:	e667      	b.n	8001a34 <__aeabi_ddiv+0x25c>
 8001d64:	4a16      	ldr	r2, [pc, #88]	; (8001dc0 <__aeabi_ddiv+0x5e8>)
 8001d66:	445a      	add	r2, fp
 8001d68:	2a00      	cmp	r2, #0
 8001d6a:	dc00      	bgt.n	8001d6e <__aeabi_ddiv+0x596>
 8001d6c:	e710      	b.n	8001b90 <__aeabi_ddiv+0x3b8>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	2500      	movs	r5, #0
 8001d72:	4498      	add	r8, r3
 8001d74:	e667      	b.n	8001a46 <__aeabi_ddiv+0x26e>
 8001d76:	075d      	lsls	r5, r3, #29
 8001d78:	025b      	lsls	r3, r3, #9
 8001d7a:	0b1c      	lsrs	r4, r3, #12
 8001d7c:	08d2      	lsrs	r2, r2, #3
 8001d7e:	2300      	movs	r3, #0
 8001d80:	4315      	orrs	r5, r2
 8001d82:	e580      	b.n	8001886 <__aeabi_ddiv+0xae>
 8001d84:	9800      	ldr	r0, [sp, #0]
 8001d86:	3d02      	subs	r5, #2
 8001d88:	0042      	lsls	r2, r0, #1
 8001d8a:	4282      	cmp	r2, r0
 8001d8c:	41bf      	sbcs	r7, r7
 8001d8e:	427f      	negs	r7, r7
 8001d90:	193c      	adds	r4, r7, r4
 8001d92:	1936      	adds	r6, r6, r4
 8001d94:	9200      	str	r2, [sp, #0]
 8001d96:	e7dd      	b.n	8001d54 <__aeabi_ddiv+0x57c>
 8001d98:	2480      	movs	r4, #128	; 0x80
 8001d9a:	4643      	mov	r3, r8
 8001d9c:	0324      	lsls	r4, r4, #12
 8001d9e:	431c      	orrs	r4, r3
 8001da0:	0324      	lsls	r4, r4, #12
 8001da2:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <__aeabi_ddiv+0x5dc>)
 8001da4:	0b24      	lsrs	r4, r4, #12
 8001da6:	e56e      	b.n	8001886 <__aeabi_ddiv+0xae>
 8001da8:	9a00      	ldr	r2, [sp, #0]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d3ea      	bcc.n	8001d84 <__aeabi_ddiv+0x5ac>
 8001dae:	0005      	movs	r5, r0
 8001db0:	e7d3      	b.n	8001d5a <__aeabi_ddiv+0x582>
 8001db2:	46c0      	nop			; (mov r8, r8)
 8001db4:	000007ff 	.word	0x000007ff
 8001db8:	0000043e 	.word	0x0000043e
 8001dbc:	0000041e 	.word	0x0000041e
 8001dc0:	000003ff 	.word	0x000003ff

08001dc4 <__eqdf2>:
 8001dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dc6:	464e      	mov	r6, r9
 8001dc8:	4645      	mov	r5, r8
 8001dca:	46de      	mov	lr, fp
 8001dcc:	4657      	mov	r7, sl
 8001dce:	4690      	mov	r8, r2
 8001dd0:	b5e0      	push	{r5, r6, r7, lr}
 8001dd2:	0017      	movs	r7, r2
 8001dd4:	031a      	lsls	r2, r3, #12
 8001dd6:	0b12      	lsrs	r2, r2, #12
 8001dd8:	0005      	movs	r5, r0
 8001dda:	4684      	mov	ip, r0
 8001ddc:	4819      	ldr	r0, [pc, #100]	; (8001e44 <__eqdf2+0x80>)
 8001dde:	030e      	lsls	r6, r1, #12
 8001de0:	004c      	lsls	r4, r1, #1
 8001de2:	4691      	mov	r9, r2
 8001de4:	005a      	lsls	r2, r3, #1
 8001de6:	0fdb      	lsrs	r3, r3, #31
 8001de8:	469b      	mov	fp, r3
 8001dea:	0b36      	lsrs	r6, r6, #12
 8001dec:	0d64      	lsrs	r4, r4, #21
 8001dee:	0fc9      	lsrs	r1, r1, #31
 8001df0:	0d52      	lsrs	r2, r2, #21
 8001df2:	4284      	cmp	r4, r0
 8001df4:	d019      	beq.n	8001e2a <__eqdf2+0x66>
 8001df6:	4282      	cmp	r2, r0
 8001df8:	d010      	beq.n	8001e1c <__eqdf2+0x58>
 8001dfa:	2001      	movs	r0, #1
 8001dfc:	4294      	cmp	r4, r2
 8001dfe:	d10e      	bne.n	8001e1e <__eqdf2+0x5a>
 8001e00:	454e      	cmp	r6, r9
 8001e02:	d10c      	bne.n	8001e1e <__eqdf2+0x5a>
 8001e04:	2001      	movs	r0, #1
 8001e06:	45c4      	cmp	ip, r8
 8001e08:	d109      	bne.n	8001e1e <__eqdf2+0x5a>
 8001e0a:	4559      	cmp	r1, fp
 8001e0c:	d017      	beq.n	8001e3e <__eqdf2+0x7a>
 8001e0e:	2c00      	cmp	r4, #0
 8001e10:	d105      	bne.n	8001e1e <__eqdf2+0x5a>
 8001e12:	0030      	movs	r0, r6
 8001e14:	4328      	orrs	r0, r5
 8001e16:	1e43      	subs	r3, r0, #1
 8001e18:	4198      	sbcs	r0, r3
 8001e1a:	e000      	b.n	8001e1e <__eqdf2+0x5a>
 8001e1c:	2001      	movs	r0, #1
 8001e1e:	bcf0      	pop	{r4, r5, r6, r7}
 8001e20:	46bb      	mov	fp, r7
 8001e22:	46b2      	mov	sl, r6
 8001e24:	46a9      	mov	r9, r5
 8001e26:	46a0      	mov	r8, r4
 8001e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e2a:	0033      	movs	r3, r6
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	432b      	orrs	r3, r5
 8001e30:	d1f5      	bne.n	8001e1e <__eqdf2+0x5a>
 8001e32:	42a2      	cmp	r2, r4
 8001e34:	d1f3      	bne.n	8001e1e <__eqdf2+0x5a>
 8001e36:	464b      	mov	r3, r9
 8001e38:	433b      	orrs	r3, r7
 8001e3a:	d1f0      	bne.n	8001e1e <__eqdf2+0x5a>
 8001e3c:	e7e2      	b.n	8001e04 <__eqdf2+0x40>
 8001e3e:	2000      	movs	r0, #0
 8001e40:	e7ed      	b.n	8001e1e <__eqdf2+0x5a>
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	000007ff 	.word	0x000007ff

08001e48 <__gedf2>:
 8001e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e4a:	4647      	mov	r7, r8
 8001e4c:	46ce      	mov	lr, r9
 8001e4e:	0004      	movs	r4, r0
 8001e50:	0018      	movs	r0, r3
 8001e52:	0016      	movs	r6, r2
 8001e54:	031b      	lsls	r3, r3, #12
 8001e56:	0b1b      	lsrs	r3, r3, #12
 8001e58:	4d2d      	ldr	r5, [pc, #180]	; (8001f10 <__gedf2+0xc8>)
 8001e5a:	004a      	lsls	r2, r1, #1
 8001e5c:	4699      	mov	r9, r3
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	0043      	lsls	r3, r0, #1
 8001e62:	030f      	lsls	r7, r1, #12
 8001e64:	46a4      	mov	ip, r4
 8001e66:	46b0      	mov	r8, r6
 8001e68:	0b3f      	lsrs	r7, r7, #12
 8001e6a:	0d52      	lsrs	r2, r2, #21
 8001e6c:	0fc9      	lsrs	r1, r1, #31
 8001e6e:	0d5b      	lsrs	r3, r3, #21
 8001e70:	0fc0      	lsrs	r0, r0, #31
 8001e72:	42aa      	cmp	r2, r5
 8001e74:	d021      	beq.n	8001eba <__gedf2+0x72>
 8001e76:	42ab      	cmp	r3, r5
 8001e78:	d013      	beq.n	8001ea2 <__gedf2+0x5a>
 8001e7a:	2a00      	cmp	r2, #0
 8001e7c:	d122      	bne.n	8001ec4 <__gedf2+0x7c>
 8001e7e:	433c      	orrs	r4, r7
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d102      	bne.n	8001e8a <__gedf2+0x42>
 8001e84:	464d      	mov	r5, r9
 8001e86:	432e      	orrs	r6, r5
 8001e88:	d022      	beq.n	8001ed0 <__gedf2+0x88>
 8001e8a:	2c00      	cmp	r4, #0
 8001e8c:	d010      	beq.n	8001eb0 <__gedf2+0x68>
 8001e8e:	4281      	cmp	r1, r0
 8001e90:	d022      	beq.n	8001ed8 <__gedf2+0x90>
 8001e92:	2002      	movs	r0, #2
 8001e94:	3901      	subs	r1, #1
 8001e96:	4008      	ands	r0, r1
 8001e98:	3801      	subs	r0, #1
 8001e9a:	bcc0      	pop	{r6, r7}
 8001e9c:	46b9      	mov	r9, r7
 8001e9e:	46b0      	mov	r8, r6
 8001ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ea2:	464d      	mov	r5, r9
 8001ea4:	432e      	orrs	r6, r5
 8001ea6:	d129      	bne.n	8001efc <__gedf2+0xb4>
 8001ea8:	2a00      	cmp	r2, #0
 8001eaa:	d1f0      	bne.n	8001e8e <__gedf2+0x46>
 8001eac:	433c      	orrs	r4, r7
 8001eae:	d1ee      	bne.n	8001e8e <__gedf2+0x46>
 8001eb0:	2800      	cmp	r0, #0
 8001eb2:	d1f2      	bne.n	8001e9a <__gedf2+0x52>
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	4240      	negs	r0, r0
 8001eb8:	e7ef      	b.n	8001e9a <__gedf2+0x52>
 8001eba:	003d      	movs	r5, r7
 8001ebc:	4325      	orrs	r5, r4
 8001ebe:	d11d      	bne.n	8001efc <__gedf2+0xb4>
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d0ee      	beq.n	8001ea2 <__gedf2+0x5a>
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1e2      	bne.n	8001e8e <__gedf2+0x46>
 8001ec8:	464c      	mov	r4, r9
 8001eca:	4326      	orrs	r6, r4
 8001ecc:	d1df      	bne.n	8001e8e <__gedf2+0x46>
 8001ece:	e7e0      	b.n	8001e92 <__gedf2+0x4a>
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	2c00      	cmp	r4, #0
 8001ed4:	d0e1      	beq.n	8001e9a <__gedf2+0x52>
 8001ed6:	e7dc      	b.n	8001e92 <__gedf2+0x4a>
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	dc0a      	bgt.n	8001ef2 <__gedf2+0xaa>
 8001edc:	dbe8      	blt.n	8001eb0 <__gedf2+0x68>
 8001ede:	454f      	cmp	r7, r9
 8001ee0:	d8d7      	bhi.n	8001e92 <__gedf2+0x4a>
 8001ee2:	d00e      	beq.n	8001f02 <__gedf2+0xba>
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	454f      	cmp	r7, r9
 8001ee8:	d2d7      	bcs.n	8001e9a <__gedf2+0x52>
 8001eea:	2900      	cmp	r1, #0
 8001eec:	d0e2      	beq.n	8001eb4 <__gedf2+0x6c>
 8001eee:	0008      	movs	r0, r1
 8001ef0:	e7d3      	b.n	8001e9a <__gedf2+0x52>
 8001ef2:	4243      	negs	r3, r0
 8001ef4:	4158      	adcs	r0, r3
 8001ef6:	0040      	lsls	r0, r0, #1
 8001ef8:	3801      	subs	r0, #1
 8001efa:	e7ce      	b.n	8001e9a <__gedf2+0x52>
 8001efc:	2002      	movs	r0, #2
 8001efe:	4240      	negs	r0, r0
 8001f00:	e7cb      	b.n	8001e9a <__gedf2+0x52>
 8001f02:	45c4      	cmp	ip, r8
 8001f04:	d8c5      	bhi.n	8001e92 <__gedf2+0x4a>
 8001f06:	2000      	movs	r0, #0
 8001f08:	45c4      	cmp	ip, r8
 8001f0a:	d2c6      	bcs.n	8001e9a <__gedf2+0x52>
 8001f0c:	e7ed      	b.n	8001eea <__gedf2+0xa2>
 8001f0e:	46c0      	nop			; (mov r8, r8)
 8001f10:	000007ff 	.word	0x000007ff

08001f14 <__ledf2>:
 8001f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f16:	4647      	mov	r7, r8
 8001f18:	46ce      	mov	lr, r9
 8001f1a:	0004      	movs	r4, r0
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	0016      	movs	r6, r2
 8001f20:	031b      	lsls	r3, r3, #12
 8001f22:	0b1b      	lsrs	r3, r3, #12
 8001f24:	4d2c      	ldr	r5, [pc, #176]	; (8001fd8 <__ledf2+0xc4>)
 8001f26:	004a      	lsls	r2, r1, #1
 8001f28:	4699      	mov	r9, r3
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	0043      	lsls	r3, r0, #1
 8001f2e:	030f      	lsls	r7, r1, #12
 8001f30:	46a4      	mov	ip, r4
 8001f32:	46b0      	mov	r8, r6
 8001f34:	0b3f      	lsrs	r7, r7, #12
 8001f36:	0d52      	lsrs	r2, r2, #21
 8001f38:	0fc9      	lsrs	r1, r1, #31
 8001f3a:	0d5b      	lsrs	r3, r3, #21
 8001f3c:	0fc0      	lsrs	r0, r0, #31
 8001f3e:	42aa      	cmp	r2, r5
 8001f40:	d00d      	beq.n	8001f5e <__ledf2+0x4a>
 8001f42:	42ab      	cmp	r3, r5
 8001f44:	d010      	beq.n	8001f68 <__ledf2+0x54>
 8001f46:	2a00      	cmp	r2, #0
 8001f48:	d127      	bne.n	8001f9a <__ledf2+0x86>
 8001f4a:	433c      	orrs	r4, r7
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d111      	bne.n	8001f74 <__ledf2+0x60>
 8001f50:	464d      	mov	r5, r9
 8001f52:	432e      	orrs	r6, r5
 8001f54:	d10e      	bne.n	8001f74 <__ledf2+0x60>
 8001f56:	2000      	movs	r0, #0
 8001f58:	2c00      	cmp	r4, #0
 8001f5a:	d015      	beq.n	8001f88 <__ledf2+0x74>
 8001f5c:	e00e      	b.n	8001f7c <__ledf2+0x68>
 8001f5e:	003d      	movs	r5, r7
 8001f60:	4325      	orrs	r5, r4
 8001f62:	d110      	bne.n	8001f86 <__ledf2+0x72>
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d118      	bne.n	8001f9a <__ledf2+0x86>
 8001f68:	464d      	mov	r5, r9
 8001f6a:	432e      	orrs	r6, r5
 8001f6c:	d10b      	bne.n	8001f86 <__ledf2+0x72>
 8001f6e:	2a00      	cmp	r2, #0
 8001f70:	d102      	bne.n	8001f78 <__ledf2+0x64>
 8001f72:	433c      	orrs	r4, r7
 8001f74:	2c00      	cmp	r4, #0
 8001f76:	d00b      	beq.n	8001f90 <__ledf2+0x7c>
 8001f78:	4281      	cmp	r1, r0
 8001f7a:	d014      	beq.n	8001fa6 <__ledf2+0x92>
 8001f7c:	2002      	movs	r0, #2
 8001f7e:	3901      	subs	r1, #1
 8001f80:	4008      	ands	r0, r1
 8001f82:	3801      	subs	r0, #1
 8001f84:	e000      	b.n	8001f88 <__ledf2+0x74>
 8001f86:	2002      	movs	r0, #2
 8001f88:	bcc0      	pop	{r6, r7}
 8001f8a:	46b9      	mov	r9, r7
 8001f8c:	46b0      	mov	r8, r6
 8001f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f90:	2800      	cmp	r0, #0
 8001f92:	d1f9      	bne.n	8001f88 <__ledf2+0x74>
 8001f94:	2001      	movs	r0, #1
 8001f96:	4240      	negs	r0, r0
 8001f98:	e7f6      	b.n	8001f88 <__ledf2+0x74>
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1ec      	bne.n	8001f78 <__ledf2+0x64>
 8001f9e:	464c      	mov	r4, r9
 8001fa0:	4326      	orrs	r6, r4
 8001fa2:	d1e9      	bne.n	8001f78 <__ledf2+0x64>
 8001fa4:	e7ea      	b.n	8001f7c <__ledf2+0x68>
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	dd04      	ble.n	8001fb4 <__ledf2+0xa0>
 8001faa:	4243      	negs	r3, r0
 8001fac:	4158      	adcs	r0, r3
 8001fae:	0040      	lsls	r0, r0, #1
 8001fb0:	3801      	subs	r0, #1
 8001fb2:	e7e9      	b.n	8001f88 <__ledf2+0x74>
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	dbeb      	blt.n	8001f90 <__ledf2+0x7c>
 8001fb8:	454f      	cmp	r7, r9
 8001fba:	d8df      	bhi.n	8001f7c <__ledf2+0x68>
 8001fbc:	d006      	beq.n	8001fcc <__ledf2+0xb8>
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	454f      	cmp	r7, r9
 8001fc2:	d2e1      	bcs.n	8001f88 <__ledf2+0x74>
 8001fc4:	2900      	cmp	r1, #0
 8001fc6:	d0e5      	beq.n	8001f94 <__ledf2+0x80>
 8001fc8:	0008      	movs	r0, r1
 8001fca:	e7dd      	b.n	8001f88 <__ledf2+0x74>
 8001fcc:	45c4      	cmp	ip, r8
 8001fce:	d8d5      	bhi.n	8001f7c <__ledf2+0x68>
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	45c4      	cmp	ip, r8
 8001fd4:	d2d8      	bcs.n	8001f88 <__ledf2+0x74>
 8001fd6:	e7f5      	b.n	8001fc4 <__ledf2+0xb0>
 8001fd8:	000007ff 	.word	0x000007ff

08001fdc <__aeabi_dmul>:
 8001fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fde:	4657      	mov	r7, sl
 8001fe0:	464e      	mov	r6, r9
 8001fe2:	4645      	mov	r5, r8
 8001fe4:	46de      	mov	lr, fp
 8001fe6:	b5e0      	push	{r5, r6, r7, lr}
 8001fe8:	4698      	mov	r8, r3
 8001fea:	030c      	lsls	r4, r1, #12
 8001fec:	004b      	lsls	r3, r1, #1
 8001fee:	0006      	movs	r6, r0
 8001ff0:	4692      	mov	sl, r2
 8001ff2:	b087      	sub	sp, #28
 8001ff4:	0b24      	lsrs	r4, r4, #12
 8001ff6:	0d5b      	lsrs	r3, r3, #21
 8001ff8:	0fcf      	lsrs	r7, r1, #31
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d100      	bne.n	8002000 <__aeabi_dmul+0x24>
 8001ffe:	e15c      	b.n	80022ba <__aeabi_dmul+0x2de>
 8002000:	4ad9      	ldr	r2, [pc, #868]	; (8002368 <__aeabi_dmul+0x38c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d100      	bne.n	8002008 <__aeabi_dmul+0x2c>
 8002006:	e175      	b.n	80022f4 <__aeabi_dmul+0x318>
 8002008:	0f42      	lsrs	r2, r0, #29
 800200a:	00e4      	lsls	r4, r4, #3
 800200c:	4314      	orrs	r4, r2
 800200e:	2280      	movs	r2, #128	; 0x80
 8002010:	0412      	lsls	r2, r2, #16
 8002012:	4314      	orrs	r4, r2
 8002014:	4ad5      	ldr	r2, [pc, #852]	; (800236c <__aeabi_dmul+0x390>)
 8002016:	00c5      	lsls	r5, r0, #3
 8002018:	4694      	mov	ip, r2
 800201a:	4463      	add	r3, ip
 800201c:	9300      	str	r3, [sp, #0]
 800201e:	2300      	movs	r3, #0
 8002020:	4699      	mov	r9, r3
 8002022:	469b      	mov	fp, r3
 8002024:	4643      	mov	r3, r8
 8002026:	4642      	mov	r2, r8
 8002028:	031e      	lsls	r6, r3, #12
 800202a:	0fd2      	lsrs	r2, r2, #31
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	4650      	mov	r0, sl
 8002030:	4690      	mov	r8, r2
 8002032:	0b36      	lsrs	r6, r6, #12
 8002034:	0d5b      	lsrs	r3, r3, #21
 8002036:	d100      	bne.n	800203a <__aeabi_dmul+0x5e>
 8002038:	e120      	b.n	800227c <__aeabi_dmul+0x2a0>
 800203a:	4acb      	ldr	r2, [pc, #812]	; (8002368 <__aeabi_dmul+0x38c>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d100      	bne.n	8002042 <__aeabi_dmul+0x66>
 8002040:	e162      	b.n	8002308 <__aeabi_dmul+0x32c>
 8002042:	49ca      	ldr	r1, [pc, #808]	; (800236c <__aeabi_dmul+0x390>)
 8002044:	0f42      	lsrs	r2, r0, #29
 8002046:	468c      	mov	ip, r1
 8002048:	9900      	ldr	r1, [sp, #0]
 800204a:	4463      	add	r3, ip
 800204c:	00f6      	lsls	r6, r6, #3
 800204e:	468c      	mov	ip, r1
 8002050:	4316      	orrs	r6, r2
 8002052:	2280      	movs	r2, #128	; 0x80
 8002054:	449c      	add	ip, r3
 8002056:	0412      	lsls	r2, r2, #16
 8002058:	4663      	mov	r3, ip
 800205a:	4316      	orrs	r6, r2
 800205c:	00c2      	lsls	r2, r0, #3
 800205e:	2000      	movs	r0, #0
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	9900      	ldr	r1, [sp, #0]
 8002064:	4643      	mov	r3, r8
 8002066:	3101      	adds	r1, #1
 8002068:	468c      	mov	ip, r1
 800206a:	4649      	mov	r1, r9
 800206c:	407b      	eors	r3, r7
 800206e:	9301      	str	r3, [sp, #4]
 8002070:	290f      	cmp	r1, #15
 8002072:	d826      	bhi.n	80020c2 <__aeabi_dmul+0xe6>
 8002074:	4bbe      	ldr	r3, [pc, #760]	; (8002370 <__aeabi_dmul+0x394>)
 8002076:	0089      	lsls	r1, r1, #2
 8002078:	5859      	ldr	r1, [r3, r1]
 800207a:	468f      	mov	pc, r1
 800207c:	4643      	mov	r3, r8
 800207e:	9301      	str	r3, [sp, #4]
 8002080:	0034      	movs	r4, r6
 8002082:	0015      	movs	r5, r2
 8002084:	4683      	mov	fp, r0
 8002086:	465b      	mov	r3, fp
 8002088:	2b02      	cmp	r3, #2
 800208a:	d016      	beq.n	80020ba <__aeabi_dmul+0xde>
 800208c:	2b03      	cmp	r3, #3
 800208e:	d100      	bne.n	8002092 <__aeabi_dmul+0xb6>
 8002090:	e203      	b.n	800249a <__aeabi_dmul+0x4be>
 8002092:	2b01      	cmp	r3, #1
 8002094:	d000      	beq.n	8002098 <__aeabi_dmul+0xbc>
 8002096:	e0cd      	b.n	8002234 <__aeabi_dmul+0x258>
 8002098:	2200      	movs	r2, #0
 800209a:	2400      	movs	r4, #0
 800209c:	2500      	movs	r5, #0
 800209e:	9b01      	ldr	r3, [sp, #4]
 80020a0:	0512      	lsls	r2, r2, #20
 80020a2:	4322      	orrs	r2, r4
 80020a4:	07db      	lsls	r3, r3, #31
 80020a6:	431a      	orrs	r2, r3
 80020a8:	0028      	movs	r0, r5
 80020aa:	0011      	movs	r1, r2
 80020ac:	b007      	add	sp, #28
 80020ae:	bcf0      	pop	{r4, r5, r6, r7}
 80020b0:	46bb      	mov	fp, r7
 80020b2:	46b2      	mov	sl, r6
 80020b4:	46a9      	mov	r9, r5
 80020b6:	46a0      	mov	r8, r4
 80020b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020ba:	2400      	movs	r4, #0
 80020bc:	2500      	movs	r5, #0
 80020be:	4aaa      	ldr	r2, [pc, #680]	; (8002368 <__aeabi_dmul+0x38c>)
 80020c0:	e7ed      	b.n	800209e <__aeabi_dmul+0xc2>
 80020c2:	0c28      	lsrs	r0, r5, #16
 80020c4:	042d      	lsls	r5, r5, #16
 80020c6:	0c2d      	lsrs	r5, r5, #16
 80020c8:	002b      	movs	r3, r5
 80020ca:	0c11      	lsrs	r1, r2, #16
 80020cc:	0412      	lsls	r2, r2, #16
 80020ce:	0c12      	lsrs	r2, r2, #16
 80020d0:	4353      	muls	r3, r2
 80020d2:	4698      	mov	r8, r3
 80020d4:	0013      	movs	r3, r2
 80020d6:	002f      	movs	r7, r5
 80020d8:	4343      	muls	r3, r0
 80020da:	4699      	mov	r9, r3
 80020dc:	434f      	muls	r7, r1
 80020de:	444f      	add	r7, r9
 80020e0:	46bb      	mov	fp, r7
 80020e2:	4647      	mov	r7, r8
 80020e4:	000b      	movs	r3, r1
 80020e6:	0c3f      	lsrs	r7, r7, #16
 80020e8:	46ba      	mov	sl, r7
 80020ea:	4343      	muls	r3, r0
 80020ec:	44da      	add	sl, fp
 80020ee:	9302      	str	r3, [sp, #8]
 80020f0:	45d1      	cmp	r9, sl
 80020f2:	d904      	bls.n	80020fe <__aeabi_dmul+0x122>
 80020f4:	2780      	movs	r7, #128	; 0x80
 80020f6:	027f      	lsls	r7, r7, #9
 80020f8:	46b9      	mov	r9, r7
 80020fa:	444b      	add	r3, r9
 80020fc:	9302      	str	r3, [sp, #8]
 80020fe:	4653      	mov	r3, sl
 8002100:	0c1b      	lsrs	r3, r3, #16
 8002102:	469b      	mov	fp, r3
 8002104:	4653      	mov	r3, sl
 8002106:	041f      	lsls	r7, r3, #16
 8002108:	4643      	mov	r3, r8
 800210a:	041b      	lsls	r3, r3, #16
 800210c:	0c1b      	lsrs	r3, r3, #16
 800210e:	4698      	mov	r8, r3
 8002110:	003b      	movs	r3, r7
 8002112:	4443      	add	r3, r8
 8002114:	9304      	str	r3, [sp, #16]
 8002116:	0c33      	lsrs	r3, r6, #16
 8002118:	0436      	lsls	r6, r6, #16
 800211a:	0c36      	lsrs	r6, r6, #16
 800211c:	4698      	mov	r8, r3
 800211e:	0033      	movs	r3, r6
 8002120:	4343      	muls	r3, r0
 8002122:	4699      	mov	r9, r3
 8002124:	4643      	mov	r3, r8
 8002126:	4343      	muls	r3, r0
 8002128:	002f      	movs	r7, r5
 800212a:	469a      	mov	sl, r3
 800212c:	4643      	mov	r3, r8
 800212e:	4377      	muls	r7, r6
 8002130:	435d      	muls	r5, r3
 8002132:	0c38      	lsrs	r0, r7, #16
 8002134:	444d      	add	r5, r9
 8002136:	1945      	adds	r5, r0, r5
 8002138:	45a9      	cmp	r9, r5
 800213a:	d903      	bls.n	8002144 <__aeabi_dmul+0x168>
 800213c:	2380      	movs	r3, #128	; 0x80
 800213e:	025b      	lsls	r3, r3, #9
 8002140:	4699      	mov	r9, r3
 8002142:	44ca      	add	sl, r9
 8002144:	043f      	lsls	r7, r7, #16
 8002146:	0c28      	lsrs	r0, r5, #16
 8002148:	0c3f      	lsrs	r7, r7, #16
 800214a:	042d      	lsls	r5, r5, #16
 800214c:	19ed      	adds	r5, r5, r7
 800214e:	0c27      	lsrs	r7, r4, #16
 8002150:	0424      	lsls	r4, r4, #16
 8002152:	0c24      	lsrs	r4, r4, #16
 8002154:	0003      	movs	r3, r0
 8002156:	0020      	movs	r0, r4
 8002158:	4350      	muls	r0, r2
 800215a:	437a      	muls	r2, r7
 800215c:	4691      	mov	r9, r2
 800215e:	003a      	movs	r2, r7
 8002160:	4453      	add	r3, sl
 8002162:	9305      	str	r3, [sp, #20]
 8002164:	0c03      	lsrs	r3, r0, #16
 8002166:	469a      	mov	sl, r3
 8002168:	434a      	muls	r2, r1
 800216a:	4361      	muls	r1, r4
 800216c:	4449      	add	r1, r9
 800216e:	4451      	add	r1, sl
 8002170:	44ab      	add	fp, r5
 8002172:	4589      	cmp	r9, r1
 8002174:	d903      	bls.n	800217e <__aeabi_dmul+0x1a2>
 8002176:	2380      	movs	r3, #128	; 0x80
 8002178:	025b      	lsls	r3, r3, #9
 800217a:	4699      	mov	r9, r3
 800217c:	444a      	add	r2, r9
 800217e:	0400      	lsls	r0, r0, #16
 8002180:	0c0b      	lsrs	r3, r1, #16
 8002182:	0c00      	lsrs	r0, r0, #16
 8002184:	0409      	lsls	r1, r1, #16
 8002186:	1809      	adds	r1, r1, r0
 8002188:	0020      	movs	r0, r4
 800218a:	4699      	mov	r9, r3
 800218c:	4643      	mov	r3, r8
 800218e:	4370      	muls	r0, r6
 8002190:	435c      	muls	r4, r3
 8002192:	437e      	muls	r6, r7
 8002194:	435f      	muls	r7, r3
 8002196:	0c03      	lsrs	r3, r0, #16
 8002198:	4698      	mov	r8, r3
 800219a:	19a4      	adds	r4, r4, r6
 800219c:	4444      	add	r4, r8
 800219e:	444a      	add	r2, r9
 80021a0:	9703      	str	r7, [sp, #12]
 80021a2:	42a6      	cmp	r6, r4
 80021a4:	d904      	bls.n	80021b0 <__aeabi_dmul+0x1d4>
 80021a6:	2380      	movs	r3, #128	; 0x80
 80021a8:	025b      	lsls	r3, r3, #9
 80021aa:	4698      	mov	r8, r3
 80021ac:	4447      	add	r7, r8
 80021ae:	9703      	str	r7, [sp, #12]
 80021b0:	0423      	lsls	r3, r4, #16
 80021b2:	9e02      	ldr	r6, [sp, #8]
 80021b4:	469a      	mov	sl, r3
 80021b6:	9b05      	ldr	r3, [sp, #20]
 80021b8:	445e      	add	r6, fp
 80021ba:	4698      	mov	r8, r3
 80021bc:	42ae      	cmp	r6, r5
 80021be:	41ad      	sbcs	r5, r5
 80021c0:	1876      	adds	r6, r6, r1
 80021c2:	428e      	cmp	r6, r1
 80021c4:	4189      	sbcs	r1, r1
 80021c6:	0400      	lsls	r0, r0, #16
 80021c8:	0c00      	lsrs	r0, r0, #16
 80021ca:	4450      	add	r0, sl
 80021cc:	4440      	add	r0, r8
 80021ce:	426d      	negs	r5, r5
 80021d0:	1947      	adds	r7, r0, r5
 80021d2:	46b8      	mov	r8, r7
 80021d4:	4693      	mov	fp, r2
 80021d6:	4249      	negs	r1, r1
 80021d8:	4689      	mov	r9, r1
 80021da:	44c3      	add	fp, r8
 80021dc:	44d9      	add	r9, fp
 80021de:	4298      	cmp	r0, r3
 80021e0:	4180      	sbcs	r0, r0
 80021e2:	45a8      	cmp	r8, r5
 80021e4:	41ad      	sbcs	r5, r5
 80021e6:	4593      	cmp	fp, r2
 80021e8:	4192      	sbcs	r2, r2
 80021ea:	4589      	cmp	r9, r1
 80021ec:	4189      	sbcs	r1, r1
 80021ee:	426d      	negs	r5, r5
 80021f0:	4240      	negs	r0, r0
 80021f2:	4328      	orrs	r0, r5
 80021f4:	0c24      	lsrs	r4, r4, #16
 80021f6:	4252      	negs	r2, r2
 80021f8:	4249      	negs	r1, r1
 80021fa:	430a      	orrs	r2, r1
 80021fc:	9b03      	ldr	r3, [sp, #12]
 80021fe:	1900      	adds	r0, r0, r4
 8002200:	1880      	adds	r0, r0, r2
 8002202:	18c7      	adds	r7, r0, r3
 8002204:	464b      	mov	r3, r9
 8002206:	0ddc      	lsrs	r4, r3, #23
 8002208:	9b04      	ldr	r3, [sp, #16]
 800220a:	0275      	lsls	r5, r6, #9
 800220c:	431d      	orrs	r5, r3
 800220e:	1e6a      	subs	r2, r5, #1
 8002210:	4195      	sbcs	r5, r2
 8002212:	464b      	mov	r3, r9
 8002214:	0df6      	lsrs	r6, r6, #23
 8002216:	027f      	lsls	r7, r7, #9
 8002218:	4335      	orrs	r5, r6
 800221a:	025a      	lsls	r2, r3, #9
 800221c:	433c      	orrs	r4, r7
 800221e:	4315      	orrs	r5, r2
 8002220:	01fb      	lsls	r3, r7, #7
 8002222:	d400      	bmi.n	8002226 <__aeabi_dmul+0x24a>
 8002224:	e11c      	b.n	8002460 <__aeabi_dmul+0x484>
 8002226:	2101      	movs	r1, #1
 8002228:	086a      	lsrs	r2, r5, #1
 800222a:	400d      	ands	r5, r1
 800222c:	4315      	orrs	r5, r2
 800222e:	07e2      	lsls	r2, r4, #31
 8002230:	4315      	orrs	r5, r2
 8002232:	0864      	lsrs	r4, r4, #1
 8002234:	494f      	ldr	r1, [pc, #316]	; (8002374 <__aeabi_dmul+0x398>)
 8002236:	4461      	add	r1, ip
 8002238:	2900      	cmp	r1, #0
 800223a:	dc00      	bgt.n	800223e <__aeabi_dmul+0x262>
 800223c:	e0b0      	b.n	80023a0 <__aeabi_dmul+0x3c4>
 800223e:	076b      	lsls	r3, r5, #29
 8002240:	d009      	beq.n	8002256 <__aeabi_dmul+0x27a>
 8002242:	220f      	movs	r2, #15
 8002244:	402a      	ands	r2, r5
 8002246:	2a04      	cmp	r2, #4
 8002248:	d005      	beq.n	8002256 <__aeabi_dmul+0x27a>
 800224a:	1d2a      	adds	r2, r5, #4
 800224c:	42aa      	cmp	r2, r5
 800224e:	41ad      	sbcs	r5, r5
 8002250:	426d      	negs	r5, r5
 8002252:	1964      	adds	r4, r4, r5
 8002254:	0015      	movs	r5, r2
 8002256:	01e3      	lsls	r3, r4, #7
 8002258:	d504      	bpl.n	8002264 <__aeabi_dmul+0x288>
 800225a:	2180      	movs	r1, #128	; 0x80
 800225c:	4a46      	ldr	r2, [pc, #280]	; (8002378 <__aeabi_dmul+0x39c>)
 800225e:	00c9      	lsls	r1, r1, #3
 8002260:	4014      	ands	r4, r2
 8002262:	4461      	add	r1, ip
 8002264:	4a45      	ldr	r2, [pc, #276]	; (800237c <__aeabi_dmul+0x3a0>)
 8002266:	4291      	cmp	r1, r2
 8002268:	dd00      	ble.n	800226c <__aeabi_dmul+0x290>
 800226a:	e726      	b.n	80020ba <__aeabi_dmul+0xde>
 800226c:	0762      	lsls	r2, r4, #29
 800226e:	08ed      	lsrs	r5, r5, #3
 8002270:	0264      	lsls	r4, r4, #9
 8002272:	0549      	lsls	r1, r1, #21
 8002274:	4315      	orrs	r5, r2
 8002276:	0b24      	lsrs	r4, r4, #12
 8002278:	0d4a      	lsrs	r2, r1, #21
 800227a:	e710      	b.n	800209e <__aeabi_dmul+0xc2>
 800227c:	4652      	mov	r2, sl
 800227e:	4332      	orrs	r2, r6
 8002280:	d100      	bne.n	8002284 <__aeabi_dmul+0x2a8>
 8002282:	e07f      	b.n	8002384 <__aeabi_dmul+0x3a8>
 8002284:	2e00      	cmp	r6, #0
 8002286:	d100      	bne.n	800228a <__aeabi_dmul+0x2ae>
 8002288:	e0dc      	b.n	8002444 <__aeabi_dmul+0x468>
 800228a:	0030      	movs	r0, r6
 800228c:	f000 fe1e 	bl	8002ecc <__clzsi2>
 8002290:	0002      	movs	r2, r0
 8002292:	3a0b      	subs	r2, #11
 8002294:	231d      	movs	r3, #29
 8002296:	0001      	movs	r1, r0
 8002298:	1a9b      	subs	r3, r3, r2
 800229a:	4652      	mov	r2, sl
 800229c:	3908      	subs	r1, #8
 800229e:	40da      	lsrs	r2, r3
 80022a0:	408e      	lsls	r6, r1
 80022a2:	4316      	orrs	r6, r2
 80022a4:	4652      	mov	r2, sl
 80022a6:	408a      	lsls	r2, r1
 80022a8:	9b00      	ldr	r3, [sp, #0]
 80022aa:	4935      	ldr	r1, [pc, #212]	; (8002380 <__aeabi_dmul+0x3a4>)
 80022ac:	1a18      	subs	r0, r3, r0
 80022ae:	0003      	movs	r3, r0
 80022b0:	468c      	mov	ip, r1
 80022b2:	4463      	add	r3, ip
 80022b4:	2000      	movs	r0, #0
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	e6d3      	b.n	8002062 <__aeabi_dmul+0x86>
 80022ba:	0025      	movs	r5, r4
 80022bc:	4305      	orrs	r5, r0
 80022be:	d04a      	beq.n	8002356 <__aeabi_dmul+0x37a>
 80022c0:	2c00      	cmp	r4, #0
 80022c2:	d100      	bne.n	80022c6 <__aeabi_dmul+0x2ea>
 80022c4:	e0b0      	b.n	8002428 <__aeabi_dmul+0x44c>
 80022c6:	0020      	movs	r0, r4
 80022c8:	f000 fe00 	bl	8002ecc <__clzsi2>
 80022cc:	0001      	movs	r1, r0
 80022ce:	0002      	movs	r2, r0
 80022d0:	390b      	subs	r1, #11
 80022d2:	231d      	movs	r3, #29
 80022d4:	0010      	movs	r0, r2
 80022d6:	1a5b      	subs	r3, r3, r1
 80022d8:	0031      	movs	r1, r6
 80022da:	0035      	movs	r5, r6
 80022dc:	3808      	subs	r0, #8
 80022de:	4084      	lsls	r4, r0
 80022e0:	40d9      	lsrs	r1, r3
 80022e2:	4085      	lsls	r5, r0
 80022e4:	430c      	orrs	r4, r1
 80022e6:	4826      	ldr	r0, [pc, #152]	; (8002380 <__aeabi_dmul+0x3a4>)
 80022e8:	1a83      	subs	r3, r0, r2
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	2300      	movs	r3, #0
 80022ee:	4699      	mov	r9, r3
 80022f0:	469b      	mov	fp, r3
 80022f2:	e697      	b.n	8002024 <__aeabi_dmul+0x48>
 80022f4:	0005      	movs	r5, r0
 80022f6:	4325      	orrs	r5, r4
 80022f8:	d126      	bne.n	8002348 <__aeabi_dmul+0x36c>
 80022fa:	2208      	movs	r2, #8
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	2302      	movs	r3, #2
 8002300:	2400      	movs	r4, #0
 8002302:	4691      	mov	r9, r2
 8002304:	469b      	mov	fp, r3
 8002306:	e68d      	b.n	8002024 <__aeabi_dmul+0x48>
 8002308:	4652      	mov	r2, sl
 800230a:	9b00      	ldr	r3, [sp, #0]
 800230c:	4332      	orrs	r2, r6
 800230e:	d110      	bne.n	8002332 <__aeabi_dmul+0x356>
 8002310:	4915      	ldr	r1, [pc, #84]	; (8002368 <__aeabi_dmul+0x38c>)
 8002312:	2600      	movs	r6, #0
 8002314:	468c      	mov	ip, r1
 8002316:	4463      	add	r3, ip
 8002318:	4649      	mov	r1, r9
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	2302      	movs	r3, #2
 800231e:	4319      	orrs	r1, r3
 8002320:	4689      	mov	r9, r1
 8002322:	2002      	movs	r0, #2
 8002324:	e69d      	b.n	8002062 <__aeabi_dmul+0x86>
 8002326:	465b      	mov	r3, fp
 8002328:	9701      	str	r7, [sp, #4]
 800232a:	2b02      	cmp	r3, #2
 800232c:	d000      	beq.n	8002330 <__aeabi_dmul+0x354>
 800232e:	e6ad      	b.n	800208c <__aeabi_dmul+0xb0>
 8002330:	e6c3      	b.n	80020ba <__aeabi_dmul+0xde>
 8002332:	4a0d      	ldr	r2, [pc, #52]	; (8002368 <__aeabi_dmul+0x38c>)
 8002334:	2003      	movs	r0, #3
 8002336:	4694      	mov	ip, r2
 8002338:	4463      	add	r3, ip
 800233a:	464a      	mov	r2, r9
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	2303      	movs	r3, #3
 8002340:	431a      	orrs	r2, r3
 8002342:	4691      	mov	r9, r2
 8002344:	4652      	mov	r2, sl
 8002346:	e68c      	b.n	8002062 <__aeabi_dmul+0x86>
 8002348:	220c      	movs	r2, #12
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	2303      	movs	r3, #3
 800234e:	0005      	movs	r5, r0
 8002350:	4691      	mov	r9, r2
 8002352:	469b      	mov	fp, r3
 8002354:	e666      	b.n	8002024 <__aeabi_dmul+0x48>
 8002356:	2304      	movs	r3, #4
 8002358:	4699      	mov	r9, r3
 800235a:	2300      	movs	r3, #0
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	3301      	adds	r3, #1
 8002360:	2400      	movs	r4, #0
 8002362:	469b      	mov	fp, r3
 8002364:	e65e      	b.n	8002024 <__aeabi_dmul+0x48>
 8002366:	46c0      	nop			; (mov r8, r8)
 8002368:	000007ff 	.word	0x000007ff
 800236c:	fffffc01 	.word	0xfffffc01
 8002370:	0800bbb8 	.word	0x0800bbb8
 8002374:	000003ff 	.word	0x000003ff
 8002378:	feffffff 	.word	0xfeffffff
 800237c:	000007fe 	.word	0x000007fe
 8002380:	fffffc0d 	.word	0xfffffc0d
 8002384:	4649      	mov	r1, r9
 8002386:	2301      	movs	r3, #1
 8002388:	4319      	orrs	r1, r3
 800238a:	4689      	mov	r9, r1
 800238c:	2600      	movs	r6, #0
 800238e:	2001      	movs	r0, #1
 8002390:	e667      	b.n	8002062 <__aeabi_dmul+0x86>
 8002392:	2300      	movs	r3, #0
 8002394:	2480      	movs	r4, #128	; 0x80
 8002396:	2500      	movs	r5, #0
 8002398:	4a43      	ldr	r2, [pc, #268]	; (80024a8 <__aeabi_dmul+0x4cc>)
 800239a:	9301      	str	r3, [sp, #4]
 800239c:	0324      	lsls	r4, r4, #12
 800239e:	e67e      	b.n	800209e <__aeabi_dmul+0xc2>
 80023a0:	2001      	movs	r0, #1
 80023a2:	1a40      	subs	r0, r0, r1
 80023a4:	2838      	cmp	r0, #56	; 0x38
 80023a6:	dd00      	ble.n	80023aa <__aeabi_dmul+0x3ce>
 80023a8:	e676      	b.n	8002098 <__aeabi_dmul+0xbc>
 80023aa:	281f      	cmp	r0, #31
 80023ac:	dd5b      	ble.n	8002466 <__aeabi_dmul+0x48a>
 80023ae:	221f      	movs	r2, #31
 80023b0:	0023      	movs	r3, r4
 80023b2:	4252      	negs	r2, r2
 80023b4:	1a51      	subs	r1, r2, r1
 80023b6:	40cb      	lsrs	r3, r1
 80023b8:	0019      	movs	r1, r3
 80023ba:	2820      	cmp	r0, #32
 80023bc:	d003      	beq.n	80023c6 <__aeabi_dmul+0x3ea>
 80023be:	4a3b      	ldr	r2, [pc, #236]	; (80024ac <__aeabi_dmul+0x4d0>)
 80023c0:	4462      	add	r2, ip
 80023c2:	4094      	lsls	r4, r2
 80023c4:	4325      	orrs	r5, r4
 80023c6:	1e6a      	subs	r2, r5, #1
 80023c8:	4195      	sbcs	r5, r2
 80023ca:	002a      	movs	r2, r5
 80023cc:	430a      	orrs	r2, r1
 80023ce:	2107      	movs	r1, #7
 80023d0:	000d      	movs	r5, r1
 80023d2:	2400      	movs	r4, #0
 80023d4:	4015      	ands	r5, r2
 80023d6:	4211      	tst	r1, r2
 80023d8:	d05b      	beq.n	8002492 <__aeabi_dmul+0x4b6>
 80023da:	210f      	movs	r1, #15
 80023dc:	2400      	movs	r4, #0
 80023de:	4011      	ands	r1, r2
 80023e0:	2904      	cmp	r1, #4
 80023e2:	d053      	beq.n	800248c <__aeabi_dmul+0x4b0>
 80023e4:	1d11      	adds	r1, r2, #4
 80023e6:	4291      	cmp	r1, r2
 80023e8:	4192      	sbcs	r2, r2
 80023ea:	4252      	negs	r2, r2
 80023ec:	18a4      	adds	r4, r4, r2
 80023ee:	000a      	movs	r2, r1
 80023f0:	0223      	lsls	r3, r4, #8
 80023f2:	d54b      	bpl.n	800248c <__aeabi_dmul+0x4b0>
 80023f4:	2201      	movs	r2, #1
 80023f6:	2400      	movs	r4, #0
 80023f8:	2500      	movs	r5, #0
 80023fa:	e650      	b.n	800209e <__aeabi_dmul+0xc2>
 80023fc:	2380      	movs	r3, #128	; 0x80
 80023fe:	031b      	lsls	r3, r3, #12
 8002400:	421c      	tst	r4, r3
 8002402:	d009      	beq.n	8002418 <__aeabi_dmul+0x43c>
 8002404:	421e      	tst	r6, r3
 8002406:	d107      	bne.n	8002418 <__aeabi_dmul+0x43c>
 8002408:	4333      	orrs	r3, r6
 800240a:	031c      	lsls	r4, r3, #12
 800240c:	4643      	mov	r3, r8
 800240e:	0015      	movs	r5, r2
 8002410:	0b24      	lsrs	r4, r4, #12
 8002412:	4a25      	ldr	r2, [pc, #148]	; (80024a8 <__aeabi_dmul+0x4cc>)
 8002414:	9301      	str	r3, [sp, #4]
 8002416:	e642      	b.n	800209e <__aeabi_dmul+0xc2>
 8002418:	2280      	movs	r2, #128	; 0x80
 800241a:	0312      	lsls	r2, r2, #12
 800241c:	4314      	orrs	r4, r2
 800241e:	0324      	lsls	r4, r4, #12
 8002420:	4a21      	ldr	r2, [pc, #132]	; (80024a8 <__aeabi_dmul+0x4cc>)
 8002422:	0b24      	lsrs	r4, r4, #12
 8002424:	9701      	str	r7, [sp, #4]
 8002426:	e63a      	b.n	800209e <__aeabi_dmul+0xc2>
 8002428:	f000 fd50 	bl	8002ecc <__clzsi2>
 800242c:	0001      	movs	r1, r0
 800242e:	0002      	movs	r2, r0
 8002430:	3115      	adds	r1, #21
 8002432:	3220      	adds	r2, #32
 8002434:	291c      	cmp	r1, #28
 8002436:	dc00      	bgt.n	800243a <__aeabi_dmul+0x45e>
 8002438:	e74b      	b.n	80022d2 <__aeabi_dmul+0x2f6>
 800243a:	0034      	movs	r4, r6
 800243c:	3808      	subs	r0, #8
 800243e:	2500      	movs	r5, #0
 8002440:	4084      	lsls	r4, r0
 8002442:	e750      	b.n	80022e6 <__aeabi_dmul+0x30a>
 8002444:	f000 fd42 	bl	8002ecc <__clzsi2>
 8002448:	0003      	movs	r3, r0
 800244a:	001a      	movs	r2, r3
 800244c:	3215      	adds	r2, #21
 800244e:	3020      	adds	r0, #32
 8002450:	2a1c      	cmp	r2, #28
 8002452:	dc00      	bgt.n	8002456 <__aeabi_dmul+0x47a>
 8002454:	e71e      	b.n	8002294 <__aeabi_dmul+0x2b8>
 8002456:	4656      	mov	r6, sl
 8002458:	3b08      	subs	r3, #8
 800245a:	2200      	movs	r2, #0
 800245c:	409e      	lsls	r6, r3
 800245e:	e723      	b.n	80022a8 <__aeabi_dmul+0x2cc>
 8002460:	9b00      	ldr	r3, [sp, #0]
 8002462:	469c      	mov	ip, r3
 8002464:	e6e6      	b.n	8002234 <__aeabi_dmul+0x258>
 8002466:	4912      	ldr	r1, [pc, #72]	; (80024b0 <__aeabi_dmul+0x4d4>)
 8002468:	0022      	movs	r2, r4
 800246a:	4461      	add	r1, ip
 800246c:	002e      	movs	r6, r5
 800246e:	408d      	lsls	r5, r1
 8002470:	408a      	lsls	r2, r1
 8002472:	40c6      	lsrs	r6, r0
 8002474:	1e69      	subs	r1, r5, #1
 8002476:	418d      	sbcs	r5, r1
 8002478:	4332      	orrs	r2, r6
 800247a:	432a      	orrs	r2, r5
 800247c:	40c4      	lsrs	r4, r0
 800247e:	0753      	lsls	r3, r2, #29
 8002480:	d0b6      	beq.n	80023f0 <__aeabi_dmul+0x414>
 8002482:	210f      	movs	r1, #15
 8002484:	4011      	ands	r1, r2
 8002486:	2904      	cmp	r1, #4
 8002488:	d1ac      	bne.n	80023e4 <__aeabi_dmul+0x408>
 800248a:	e7b1      	b.n	80023f0 <__aeabi_dmul+0x414>
 800248c:	0765      	lsls	r5, r4, #29
 800248e:	0264      	lsls	r4, r4, #9
 8002490:	0b24      	lsrs	r4, r4, #12
 8002492:	08d2      	lsrs	r2, r2, #3
 8002494:	4315      	orrs	r5, r2
 8002496:	2200      	movs	r2, #0
 8002498:	e601      	b.n	800209e <__aeabi_dmul+0xc2>
 800249a:	2280      	movs	r2, #128	; 0x80
 800249c:	0312      	lsls	r2, r2, #12
 800249e:	4314      	orrs	r4, r2
 80024a0:	0324      	lsls	r4, r4, #12
 80024a2:	4a01      	ldr	r2, [pc, #4]	; (80024a8 <__aeabi_dmul+0x4cc>)
 80024a4:	0b24      	lsrs	r4, r4, #12
 80024a6:	e5fa      	b.n	800209e <__aeabi_dmul+0xc2>
 80024a8:	000007ff 	.word	0x000007ff
 80024ac:	0000043e 	.word	0x0000043e
 80024b0:	0000041e 	.word	0x0000041e

080024b4 <__aeabi_dsub>:
 80024b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024b6:	4657      	mov	r7, sl
 80024b8:	464e      	mov	r6, r9
 80024ba:	4645      	mov	r5, r8
 80024bc:	46de      	mov	lr, fp
 80024be:	b5e0      	push	{r5, r6, r7, lr}
 80024c0:	001e      	movs	r6, r3
 80024c2:	0017      	movs	r7, r2
 80024c4:	004a      	lsls	r2, r1, #1
 80024c6:	030b      	lsls	r3, r1, #12
 80024c8:	0d52      	lsrs	r2, r2, #21
 80024ca:	0a5b      	lsrs	r3, r3, #9
 80024cc:	4690      	mov	r8, r2
 80024ce:	0f42      	lsrs	r2, r0, #29
 80024d0:	431a      	orrs	r2, r3
 80024d2:	0fcd      	lsrs	r5, r1, #31
 80024d4:	4ccd      	ldr	r4, [pc, #820]	; (800280c <__aeabi_dsub+0x358>)
 80024d6:	0331      	lsls	r1, r6, #12
 80024d8:	00c3      	lsls	r3, r0, #3
 80024da:	4694      	mov	ip, r2
 80024dc:	0070      	lsls	r0, r6, #1
 80024de:	0f7a      	lsrs	r2, r7, #29
 80024e0:	0a49      	lsrs	r1, r1, #9
 80024e2:	00ff      	lsls	r7, r7, #3
 80024e4:	469a      	mov	sl, r3
 80024e6:	46b9      	mov	r9, r7
 80024e8:	0d40      	lsrs	r0, r0, #21
 80024ea:	0ff6      	lsrs	r6, r6, #31
 80024ec:	4311      	orrs	r1, r2
 80024ee:	42a0      	cmp	r0, r4
 80024f0:	d100      	bne.n	80024f4 <__aeabi_dsub+0x40>
 80024f2:	e0b1      	b.n	8002658 <__aeabi_dsub+0x1a4>
 80024f4:	2201      	movs	r2, #1
 80024f6:	4056      	eors	r6, r2
 80024f8:	46b3      	mov	fp, r6
 80024fa:	42b5      	cmp	r5, r6
 80024fc:	d100      	bne.n	8002500 <__aeabi_dsub+0x4c>
 80024fe:	e088      	b.n	8002612 <__aeabi_dsub+0x15e>
 8002500:	4642      	mov	r2, r8
 8002502:	1a12      	subs	r2, r2, r0
 8002504:	2a00      	cmp	r2, #0
 8002506:	dc00      	bgt.n	800250a <__aeabi_dsub+0x56>
 8002508:	e0ae      	b.n	8002668 <__aeabi_dsub+0x1b4>
 800250a:	2800      	cmp	r0, #0
 800250c:	d100      	bne.n	8002510 <__aeabi_dsub+0x5c>
 800250e:	e0c1      	b.n	8002694 <__aeabi_dsub+0x1e0>
 8002510:	48be      	ldr	r0, [pc, #760]	; (800280c <__aeabi_dsub+0x358>)
 8002512:	4580      	cmp	r8, r0
 8002514:	d100      	bne.n	8002518 <__aeabi_dsub+0x64>
 8002516:	e151      	b.n	80027bc <__aeabi_dsub+0x308>
 8002518:	2080      	movs	r0, #128	; 0x80
 800251a:	0400      	lsls	r0, r0, #16
 800251c:	4301      	orrs	r1, r0
 800251e:	2a38      	cmp	r2, #56	; 0x38
 8002520:	dd00      	ble.n	8002524 <__aeabi_dsub+0x70>
 8002522:	e17b      	b.n	800281c <__aeabi_dsub+0x368>
 8002524:	2a1f      	cmp	r2, #31
 8002526:	dd00      	ble.n	800252a <__aeabi_dsub+0x76>
 8002528:	e1ee      	b.n	8002908 <__aeabi_dsub+0x454>
 800252a:	2020      	movs	r0, #32
 800252c:	003e      	movs	r6, r7
 800252e:	1a80      	subs	r0, r0, r2
 8002530:	000c      	movs	r4, r1
 8002532:	40d6      	lsrs	r6, r2
 8002534:	40d1      	lsrs	r1, r2
 8002536:	4087      	lsls	r7, r0
 8002538:	4662      	mov	r2, ip
 800253a:	4084      	lsls	r4, r0
 800253c:	1a52      	subs	r2, r2, r1
 800253e:	1e78      	subs	r0, r7, #1
 8002540:	4187      	sbcs	r7, r0
 8002542:	4694      	mov	ip, r2
 8002544:	4334      	orrs	r4, r6
 8002546:	4327      	orrs	r7, r4
 8002548:	1bdc      	subs	r4, r3, r7
 800254a:	42a3      	cmp	r3, r4
 800254c:	419b      	sbcs	r3, r3
 800254e:	4662      	mov	r2, ip
 8002550:	425b      	negs	r3, r3
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	4699      	mov	r9, r3
 8002556:	464b      	mov	r3, r9
 8002558:	021b      	lsls	r3, r3, #8
 800255a:	d400      	bmi.n	800255e <__aeabi_dsub+0xaa>
 800255c:	e118      	b.n	8002790 <__aeabi_dsub+0x2dc>
 800255e:	464b      	mov	r3, r9
 8002560:	0258      	lsls	r0, r3, #9
 8002562:	0a43      	lsrs	r3, r0, #9
 8002564:	4699      	mov	r9, r3
 8002566:	464b      	mov	r3, r9
 8002568:	2b00      	cmp	r3, #0
 800256a:	d100      	bne.n	800256e <__aeabi_dsub+0xba>
 800256c:	e137      	b.n	80027de <__aeabi_dsub+0x32a>
 800256e:	4648      	mov	r0, r9
 8002570:	f000 fcac 	bl	8002ecc <__clzsi2>
 8002574:	0001      	movs	r1, r0
 8002576:	3908      	subs	r1, #8
 8002578:	2320      	movs	r3, #32
 800257a:	0022      	movs	r2, r4
 800257c:	4648      	mov	r0, r9
 800257e:	1a5b      	subs	r3, r3, r1
 8002580:	40da      	lsrs	r2, r3
 8002582:	4088      	lsls	r0, r1
 8002584:	408c      	lsls	r4, r1
 8002586:	4643      	mov	r3, r8
 8002588:	4310      	orrs	r0, r2
 800258a:	4588      	cmp	r8, r1
 800258c:	dd00      	ble.n	8002590 <__aeabi_dsub+0xdc>
 800258e:	e136      	b.n	80027fe <__aeabi_dsub+0x34a>
 8002590:	1ac9      	subs	r1, r1, r3
 8002592:	1c4b      	adds	r3, r1, #1
 8002594:	2b1f      	cmp	r3, #31
 8002596:	dd00      	ble.n	800259a <__aeabi_dsub+0xe6>
 8002598:	e0ea      	b.n	8002770 <__aeabi_dsub+0x2bc>
 800259a:	2220      	movs	r2, #32
 800259c:	0026      	movs	r6, r4
 800259e:	1ad2      	subs	r2, r2, r3
 80025a0:	0001      	movs	r1, r0
 80025a2:	4094      	lsls	r4, r2
 80025a4:	40de      	lsrs	r6, r3
 80025a6:	40d8      	lsrs	r0, r3
 80025a8:	2300      	movs	r3, #0
 80025aa:	4091      	lsls	r1, r2
 80025ac:	1e62      	subs	r2, r4, #1
 80025ae:	4194      	sbcs	r4, r2
 80025b0:	4681      	mov	r9, r0
 80025b2:	4698      	mov	r8, r3
 80025b4:	4331      	orrs	r1, r6
 80025b6:	430c      	orrs	r4, r1
 80025b8:	0763      	lsls	r3, r4, #29
 80025ba:	d009      	beq.n	80025d0 <__aeabi_dsub+0x11c>
 80025bc:	230f      	movs	r3, #15
 80025be:	4023      	ands	r3, r4
 80025c0:	2b04      	cmp	r3, #4
 80025c2:	d005      	beq.n	80025d0 <__aeabi_dsub+0x11c>
 80025c4:	1d23      	adds	r3, r4, #4
 80025c6:	42a3      	cmp	r3, r4
 80025c8:	41a4      	sbcs	r4, r4
 80025ca:	4264      	negs	r4, r4
 80025cc:	44a1      	add	r9, r4
 80025ce:	001c      	movs	r4, r3
 80025d0:	464b      	mov	r3, r9
 80025d2:	021b      	lsls	r3, r3, #8
 80025d4:	d400      	bmi.n	80025d8 <__aeabi_dsub+0x124>
 80025d6:	e0de      	b.n	8002796 <__aeabi_dsub+0x2e2>
 80025d8:	4641      	mov	r1, r8
 80025da:	4b8c      	ldr	r3, [pc, #560]	; (800280c <__aeabi_dsub+0x358>)
 80025dc:	3101      	adds	r1, #1
 80025de:	4299      	cmp	r1, r3
 80025e0:	d100      	bne.n	80025e4 <__aeabi_dsub+0x130>
 80025e2:	e0e7      	b.n	80027b4 <__aeabi_dsub+0x300>
 80025e4:	464b      	mov	r3, r9
 80025e6:	488a      	ldr	r0, [pc, #552]	; (8002810 <__aeabi_dsub+0x35c>)
 80025e8:	08e4      	lsrs	r4, r4, #3
 80025ea:	4003      	ands	r3, r0
 80025ec:	0018      	movs	r0, r3
 80025ee:	0549      	lsls	r1, r1, #21
 80025f0:	075b      	lsls	r3, r3, #29
 80025f2:	0240      	lsls	r0, r0, #9
 80025f4:	4323      	orrs	r3, r4
 80025f6:	0d4a      	lsrs	r2, r1, #21
 80025f8:	0b04      	lsrs	r4, r0, #12
 80025fa:	0512      	lsls	r2, r2, #20
 80025fc:	07ed      	lsls	r5, r5, #31
 80025fe:	4322      	orrs	r2, r4
 8002600:	432a      	orrs	r2, r5
 8002602:	0018      	movs	r0, r3
 8002604:	0011      	movs	r1, r2
 8002606:	bcf0      	pop	{r4, r5, r6, r7}
 8002608:	46bb      	mov	fp, r7
 800260a:	46b2      	mov	sl, r6
 800260c:	46a9      	mov	r9, r5
 800260e:	46a0      	mov	r8, r4
 8002610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002612:	4642      	mov	r2, r8
 8002614:	1a12      	subs	r2, r2, r0
 8002616:	2a00      	cmp	r2, #0
 8002618:	dd52      	ble.n	80026c0 <__aeabi_dsub+0x20c>
 800261a:	2800      	cmp	r0, #0
 800261c:	d100      	bne.n	8002620 <__aeabi_dsub+0x16c>
 800261e:	e09c      	b.n	800275a <__aeabi_dsub+0x2a6>
 8002620:	45a0      	cmp	r8, r4
 8002622:	d100      	bne.n	8002626 <__aeabi_dsub+0x172>
 8002624:	e0ca      	b.n	80027bc <__aeabi_dsub+0x308>
 8002626:	2080      	movs	r0, #128	; 0x80
 8002628:	0400      	lsls	r0, r0, #16
 800262a:	4301      	orrs	r1, r0
 800262c:	2a38      	cmp	r2, #56	; 0x38
 800262e:	dd00      	ble.n	8002632 <__aeabi_dsub+0x17e>
 8002630:	e149      	b.n	80028c6 <__aeabi_dsub+0x412>
 8002632:	2a1f      	cmp	r2, #31
 8002634:	dc00      	bgt.n	8002638 <__aeabi_dsub+0x184>
 8002636:	e197      	b.n	8002968 <__aeabi_dsub+0x4b4>
 8002638:	0010      	movs	r0, r2
 800263a:	000e      	movs	r6, r1
 800263c:	3820      	subs	r0, #32
 800263e:	40c6      	lsrs	r6, r0
 8002640:	2a20      	cmp	r2, #32
 8002642:	d004      	beq.n	800264e <__aeabi_dsub+0x19a>
 8002644:	2040      	movs	r0, #64	; 0x40
 8002646:	1a82      	subs	r2, r0, r2
 8002648:	4091      	lsls	r1, r2
 800264a:	430f      	orrs	r7, r1
 800264c:	46b9      	mov	r9, r7
 800264e:	464c      	mov	r4, r9
 8002650:	1e62      	subs	r2, r4, #1
 8002652:	4194      	sbcs	r4, r2
 8002654:	4334      	orrs	r4, r6
 8002656:	e13a      	b.n	80028ce <__aeabi_dsub+0x41a>
 8002658:	000a      	movs	r2, r1
 800265a:	433a      	orrs	r2, r7
 800265c:	d028      	beq.n	80026b0 <__aeabi_dsub+0x1fc>
 800265e:	46b3      	mov	fp, r6
 8002660:	42b5      	cmp	r5, r6
 8002662:	d02b      	beq.n	80026bc <__aeabi_dsub+0x208>
 8002664:	4a6b      	ldr	r2, [pc, #428]	; (8002814 <__aeabi_dsub+0x360>)
 8002666:	4442      	add	r2, r8
 8002668:	2a00      	cmp	r2, #0
 800266a:	d05d      	beq.n	8002728 <__aeabi_dsub+0x274>
 800266c:	4642      	mov	r2, r8
 800266e:	4644      	mov	r4, r8
 8002670:	1a82      	subs	r2, r0, r2
 8002672:	2c00      	cmp	r4, #0
 8002674:	d000      	beq.n	8002678 <__aeabi_dsub+0x1c4>
 8002676:	e0f5      	b.n	8002864 <__aeabi_dsub+0x3b0>
 8002678:	4665      	mov	r5, ip
 800267a:	431d      	orrs	r5, r3
 800267c:	d100      	bne.n	8002680 <__aeabi_dsub+0x1cc>
 800267e:	e19c      	b.n	80029ba <__aeabi_dsub+0x506>
 8002680:	1e55      	subs	r5, r2, #1
 8002682:	2a01      	cmp	r2, #1
 8002684:	d100      	bne.n	8002688 <__aeabi_dsub+0x1d4>
 8002686:	e1fb      	b.n	8002a80 <__aeabi_dsub+0x5cc>
 8002688:	4c60      	ldr	r4, [pc, #384]	; (800280c <__aeabi_dsub+0x358>)
 800268a:	42a2      	cmp	r2, r4
 800268c:	d100      	bne.n	8002690 <__aeabi_dsub+0x1dc>
 800268e:	e1bd      	b.n	8002a0c <__aeabi_dsub+0x558>
 8002690:	002a      	movs	r2, r5
 8002692:	e0f0      	b.n	8002876 <__aeabi_dsub+0x3c2>
 8002694:	0008      	movs	r0, r1
 8002696:	4338      	orrs	r0, r7
 8002698:	d100      	bne.n	800269c <__aeabi_dsub+0x1e8>
 800269a:	e0c3      	b.n	8002824 <__aeabi_dsub+0x370>
 800269c:	1e50      	subs	r0, r2, #1
 800269e:	2a01      	cmp	r2, #1
 80026a0:	d100      	bne.n	80026a4 <__aeabi_dsub+0x1f0>
 80026a2:	e1a8      	b.n	80029f6 <__aeabi_dsub+0x542>
 80026a4:	4c59      	ldr	r4, [pc, #356]	; (800280c <__aeabi_dsub+0x358>)
 80026a6:	42a2      	cmp	r2, r4
 80026a8:	d100      	bne.n	80026ac <__aeabi_dsub+0x1f8>
 80026aa:	e087      	b.n	80027bc <__aeabi_dsub+0x308>
 80026ac:	0002      	movs	r2, r0
 80026ae:	e736      	b.n	800251e <__aeabi_dsub+0x6a>
 80026b0:	2201      	movs	r2, #1
 80026b2:	4056      	eors	r6, r2
 80026b4:	46b3      	mov	fp, r6
 80026b6:	42b5      	cmp	r5, r6
 80026b8:	d000      	beq.n	80026bc <__aeabi_dsub+0x208>
 80026ba:	e721      	b.n	8002500 <__aeabi_dsub+0x4c>
 80026bc:	4a55      	ldr	r2, [pc, #340]	; (8002814 <__aeabi_dsub+0x360>)
 80026be:	4442      	add	r2, r8
 80026c0:	2a00      	cmp	r2, #0
 80026c2:	d100      	bne.n	80026c6 <__aeabi_dsub+0x212>
 80026c4:	e0b5      	b.n	8002832 <__aeabi_dsub+0x37e>
 80026c6:	4642      	mov	r2, r8
 80026c8:	4644      	mov	r4, r8
 80026ca:	1a82      	subs	r2, r0, r2
 80026cc:	2c00      	cmp	r4, #0
 80026ce:	d100      	bne.n	80026d2 <__aeabi_dsub+0x21e>
 80026d0:	e138      	b.n	8002944 <__aeabi_dsub+0x490>
 80026d2:	4e4e      	ldr	r6, [pc, #312]	; (800280c <__aeabi_dsub+0x358>)
 80026d4:	42b0      	cmp	r0, r6
 80026d6:	d100      	bne.n	80026da <__aeabi_dsub+0x226>
 80026d8:	e1de      	b.n	8002a98 <__aeabi_dsub+0x5e4>
 80026da:	2680      	movs	r6, #128	; 0x80
 80026dc:	4664      	mov	r4, ip
 80026de:	0436      	lsls	r6, r6, #16
 80026e0:	4334      	orrs	r4, r6
 80026e2:	46a4      	mov	ip, r4
 80026e4:	2a38      	cmp	r2, #56	; 0x38
 80026e6:	dd00      	ble.n	80026ea <__aeabi_dsub+0x236>
 80026e8:	e196      	b.n	8002a18 <__aeabi_dsub+0x564>
 80026ea:	2a1f      	cmp	r2, #31
 80026ec:	dd00      	ble.n	80026f0 <__aeabi_dsub+0x23c>
 80026ee:	e224      	b.n	8002b3a <__aeabi_dsub+0x686>
 80026f0:	2620      	movs	r6, #32
 80026f2:	1ab4      	subs	r4, r6, r2
 80026f4:	46a2      	mov	sl, r4
 80026f6:	4664      	mov	r4, ip
 80026f8:	4656      	mov	r6, sl
 80026fa:	40b4      	lsls	r4, r6
 80026fc:	46a1      	mov	r9, r4
 80026fe:	001c      	movs	r4, r3
 8002700:	464e      	mov	r6, r9
 8002702:	40d4      	lsrs	r4, r2
 8002704:	4326      	orrs	r6, r4
 8002706:	0034      	movs	r4, r6
 8002708:	4656      	mov	r6, sl
 800270a:	40b3      	lsls	r3, r6
 800270c:	1e5e      	subs	r6, r3, #1
 800270e:	41b3      	sbcs	r3, r6
 8002710:	431c      	orrs	r4, r3
 8002712:	4663      	mov	r3, ip
 8002714:	40d3      	lsrs	r3, r2
 8002716:	18c9      	adds	r1, r1, r3
 8002718:	19e4      	adds	r4, r4, r7
 800271a:	42bc      	cmp	r4, r7
 800271c:	41bf      	sbcs	r7, r7
 800271e:	427f      	negs	r7, r7
 8002720:	46b9      	mov	r9, r7
 8002722:	4680      	mov	r8, r0
 8002724:	4489      	add	r9, r1
 8002726:	e0d8      	b.n	80028da <__aeabi_dsub+0x426>
 8002728:	4640      	mov	r0, r8
 800272a:	4c3b      	ldr	r4, [pc, #236]	; (8002818 <__aeabi_dsub+0x364>)
 800272c:	3001      	adds	r0, #1
 800272e:	4220      	tst	r0, r4
 8002730:	d000      	beq.n	8002734 <__aeabi_dsub+0x280>
 8002732:	e0b4      	b.n	800289e <__aeabi_dsub+0x3ea>
 8002734:	4640      	mov	r0, r8
 8002736:	2800      	cmp	r0, #0
 8002738:	d000      	beq.n	800273c <__aeabi_dsub+0x288>
 800273a:	e144      	b.n	80029c6 <__aeabi_dsub+0x512>
 800273c:	4660      	mov	r0, ip
 800273e:	4318      	orrs	r0, r3
 8002740:	d100      	bne.n	8002744 <__aeabi_dsub+0x290>
 8002742:	e190      	b.n	8002a66 <__aeabi_dsub+0x5b2>
 8002744:	0008      	movs	r0, r1
 8002746:	4338      	orrs	r0, r7
 8002748:	d000      	beq.n	800274c <__aeabi_dsub+0x298>
 800274a:	e1aa      	b.n	8002aa2 <__aeabi_dsub+0x5ee>
 800274c:	4661      	mov	r1, ip
 800274e:	08db      	lsrs	r3, r3, #3
 8002750:	0749      	lsls	r1, r1, #29
 8002752:	430b      	orrs	r3, r1
 8002754:	4661      	mov	r1, ip
 8002756:	08cc      	lsrs	r4, r1, #3
 8002758:	e027      	b.n	80027aa <__aeabi_dsub+0x2f6>
 800275a:	0008      	movs	r0, r1
 800275c:	4338      	orrs	r0, r7
 800275e:	d061      	beq.n	8002824 <__aeabi_dsub+0x370>
 8002760:	1e50      	subs	r0, r2, #1
 8002762:	2a01      	cmp	r2, #1
 8002764:	d100      	bne.n	8002768 <__aeabi_dsub+0x2b4>
 8002766:	e139      	b.n	80029dc <__aeabi_dsub+0x528>
 8002768:	42a2      	cmp	r2, r4
 800276a:	d027      	beq.n	80027bc <__aeabi_dsub+0x308>
 800276c:	0002      	movs	r2, r0
 800276e:	e75d      	b.n	800262c <__aeabi_dsub+0x178>
 8002770:	0002      	movs	r2, r0
 8002772:	391f      	subs	r1, #31
 8002774:	40ca      	lsrs	r2, r1
 8002776:	0011      	movs	r1, r2
 8002778:	2b20      	cmp	r3, #32
 800277a:	d003      	beq.n	8002784 <__aeabi_dsub+0x2d0>
 800277c:	2240      	movs	r2, #64	; 0x40
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	4098      	lsls	r0, r3
 8002782:	4304      	orrs	r4, r0
 8002784:	1e63      	subs	r3, r4, #1
 8002786:	419c      	sbcs	r4, r3
 8002788:	2300      	movs	r3, #0
 800278a:	4699      	mov	r9, r3
 800278c:	4698      	mov	r8, r3
 800278e:	430c      	orrs	r4, r1
 8002790:	0763      	lsls	r3, r4, #29
 8002792:	d000      	beq.n	8002796 <__aeabi_dsub+0x2e2>
 8002794:	e712      	b.n	80025bc <__aeabi_dsub+0x108>
 8002796:	464b      	mov	r3, r9
 8002798:	464a      	mov	r2, r9
 800279a:	08e4      	lsrs	r4, r4, #3
 800279c:	075b      	lsls	r3, r3, #29
 800279e:	4323      	orrs	r3, r4
 80027a0:	08d4      	lsrs	r4, r2, #3
 80027a2:	4642      	mov	r2, r8
 80027a4:	4919      	ldr	r1, [pc, #100]	; (800280c <__aeabi_dsub+0x358>)
 80027a6:	428a      	cmp	r2, r1
 80027a8:	d00e      	beq.n	80027c8 <__aeabi_dsub+0x314>
 80027aa:	0324      	lsls	r4, r4, #12
 80027ac:	0552      	lsls	r2, r2, #21
 80027ae:	0b24      	lsrs	r4, r4, #12
 80027b0:	0d52      	lsrs	r2, r2, #21
 80027b2:	e722      	b.n	80025fa <__aeabi_dsub+0x146>
 80027b4:	000a      	movs	r2, r1
 80027b6:	2400      	movs	r4, #0
 80027b8:	2300      	movs	r3, #0
 80027ba:	e71e      	b.n	80025fa <__aeabi_dsub+0x146>
 80027bc:	08db      	lsrs	r3, r3, #3
 80027be:	4662      	mov	r2, ip
 80027c0:	0752      	lsls	r2, r2, #29
 80027c2:	4313      	orrs	r3, r2
 80027c4:	4662      	mov	r2, ip
 80027c6:	08d4      	lsrs	r4, r2, #3
 80027c8:	001a      	movs	r2, r3
 80027ca:	4322      	orrs	r2, r4
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dsub+0x31c>
 80027ce:	e1fc      	b.n	8002bca <__aeabi_dsub+0x716>
 80027d0:	2280      	movs	r2, #128	; 0x80
 80027d2:	0312      	lsls	r2, r2, #12
 80027d4:	4314      	orrs	r4, r2
 80027d6:	0324      	lsls	r4, r4, #12
 80027d8:	4a0c      	ldr	r2, [pc, #48]	; (800280c <__aeabi_dsub+0x358>)
 80027da:	0b24      	lsrs	r4, r4, #12
 80027dc:	e70d      	b.n	80025fa <__aeabi_dsub+0x146>
 80027de:	0020      	movs	r0, r4
 80027e0:	f000 fb74 	bl	8002ecc <__clzsi2>
 80027e4:	0001      	movs	r1, r0
 80027e6:	3118      	adds	r1, #24
 80027e8:	291f      	cmp	r1, #31
 80027ea:	dc00      	bgt.n	80027ee <__aeabi_dsub+0x33a>
 80027ec:	e6c4      	b.n	8002578 <__aeabi_dsub+0xc4>
 80027ee:	3808      	subs	r0, #8
 80027f0:	4084      	lsls	r4, r0
 80027f2:	4643      	mov	r3, r8
 80027f4:	0020      	movs	r0, r4
 80027f6:	2400      	movs	r4, #0
 80027f8:	4588      	cmp	r8, r1
 80027fa:	dc00      	bgt.n	80027fe <__aeabi_dsub+0x34a>
 80027fc:	e6c8      	b.n	8002590 <__aeabi_dsub+0xdc>
 80027fe:	4a04      	ldr	r2, [pc, #16]	; (8002810 <__aeabi_dsub+0x35c>)
 8002800:	1a5b      	subs	r3, r3, r1
 8002802:	4010      	ands	r0, r2
 8002804:	4698      	mov	r8, r3
 8002806:	4681      	mov	r9, r0
 8002808:	e6d6      	b.n	80025b8 <__aeabi_dsub+0x104>
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	000007ff 	.word	0x000007ff
 8002810:	ff7fffff 	.word	0xff7fffff
 8002814:	fffff801 	.word	0xfffff801
 8002818:	000007fe 	.word	0x000007fe
 800281c:	430f      	orrs	r7, r1
 800281e:	1e7a      	subs	r2, r7, #1
 8002820:	4197      	sbcs	r7, r2
 8002822:	e691      	b.n	8002548 <__aeabi_dsub+0x94>
 8002824:	4661      	mov	r1, ip
 8002826:	08db      	lsrs	r3, r3, #3
 8002828:	0749      	lsls	r1, r1, #29
 800282a:	430b      	orrs	r3, r1
 800282c:	4661      	mov	r1, ip
 800282e:	08cc      	lsrs	r4, r1, #3
 8002830:	e7b8      	b.n	80027a4 <__aeabi_dsub+0x2f0>
 8002832:	4640      	mov	r0, r8
 8002834:	4cd3      	ldr	r4, [pc, #844]	; (8002b84 <__aeabi_dsub+0x6d0>)
 8002836:	3001      	adds	r0, #1
 8002838:	4220      	tst	r0, r4
 800283a:	d000      	beq.n	800283e <__aeabi_dsub+0x38a>
 800283c:	e0a2      	b.n	8002984 <__aeabi_dsub+0x4d0>
 800283e:	4640      	mov	r0, r8
 8002840:	2800      	cmp	r0, #0
 8002842:	d000      	beq.n	8002846 <__aeabi_dsub+0x392>
 8002844:	e101      	b.n	8002a4a <__aeabi_dsub+0x596>
 8002846:	4660      	mov	r0, ip
 8002848:	4318      	orrs	r0, r3
 800284a:	d100      	bne.n	800284e <__aeabi_dsub+0x39a>
 800284c:	e15e      	b.n	8002b0c <__aeabi_dsub+0x658>
 800284e:	0008      	movs	r0, r1
 8002850:	4338      	orrs	r0, r7
 8002852:	d000      	beq.n	8002856 <__aeabi_dsub+0x3a2>
 8002854:	e15f      	b.n	8002b16 <__aeabi_dsub+0x662>
 8002856:	4661      	mov	r1, ip
 8002858:	08db      	lsrs	r3, r3, #3
 800285a:	0749      	lsls	r1, r1, #29
 800285c:	430b      	orrs	r3, r1
 800285e:	4661      	mov	r1, ip
 8002860:	08cc      	lsrs	r4, r1, #3
 8002862:	e7a2      	b.n	80027aa <__aeabi_dsub+0x2f6>
 8002864:	4dc8      	ldr	r5, [pc, #800]	; (8002b88 <__aeabi_dsub+0x6d4>)
 8002866:	42a8      	cmp	r0, r5
 8002868:	d100      	bne.n	800286c <__aeabi_dsub+0x3b8>
 800286a:	e0cf      	b.n	8002a0c <__aeabi_dsub+0x558>
 800286c:	2580      	movs	r5, #128	; 0x80
 800286e:	4664      	mov	r4, ip
 8002870:	042d      	lsls	r5, r5, #16
 8002872:	432c      	orrs	r4, r5
 8002874:	46a4      	mov	ip, r4
 8002876:	2a38      	cmp	r2, #56	; 0x38
 8002878:	dc56      	bgt.n	8002928 <__aeabi_dsub+0x474>
 800287a:	2a1f      	cmp	r2, #31
 800287c:	dd00      	ble.n	8002880 <__aeabi_dsub+0x3cc>
 800287e:	e0d1      	b.n	8002a24 <__aeabi_dsub+0x570>
 8002880:	2520      	movs	r5, #32
 8002882:	001e      	movs	r6, r3
 8002884:	1aad      	subs	r5, r5, r2
 8002886:	4664      	mov	r4, ip
 8002888:	40ab      	lsls	r3, r5
 800288a:	40ac      	lsls	r4, r5
 800288c:	40d6      	lsrs	r6, r2
 800288e:	1e5d      	subs	r5, r3, #1
 8002890:	41ab      	sbcs	r3, r5
 8002892:	4334      	orrs	r4, r6
 8002894:	4323      	orrs	r3, r4
 8002896:	4664      	mov	r4, ip
 8002898:	40d4      	lsrs	r4, r2
 800289a:	1b09      	subs	r1, r1, r4
 800289c:	e049      	b.n	8002932 <__aeabi_dsub+0x47e>
 800289e:	4660      	mov	r0, ip
 80028a0:	1bdc      	subs	r4, r3, r7
 80028a2:	1a46      	subs	r6, r0, r1
 80028a4:	42a3      	cmp	r3, r4
 80028a6:	4180      	sbcs	r0, r0
 80028a8:	4240      	negs	r0, r0
 80028aa:	4681      	mov	r9, r0
 80028ac:	0030      	movs	r0, r6
 80028ae:	464e      	mov	r6, r9
 80028b0:	1b80      	subs	r0, r0, r6
 80028b2:	4681      	mov	r9, r0
 80028b4:	0200      	lsls	r0, r0, #8
 80028b6:	d476      	bmi.n	80029a6 <__aeabi_dsub+0x4f2>
 80028b8:	464b      	mov	r3, r9
 80028ba:	4323      	orrs	r3, r4
 80028bc:	d000      	beq.n	80028c0 <__aeabi_dsub+0x40c>
 80028be:	e652      	b.n	8002566 <__aeabi_dsub+0xb2>
 80028c0:	2400      	movs	r4, #0
 80028c2:	2500      	movs	r5, #0
 80028c4:	e771      	b.n	80027aa <__aeabi_dsub+0x2f6>
 80028c6:	4339      	orrs	r1, r7
 80028c8:	000c      	movs	r4, r1
 80028ca:	1e62      	subs	r2, r4, #1
 80028cc:	4194      	sbcs	r4, r2
 80028ce:	18e4      	adds	r4, r4, r3
 80028d0:	429c      	cmp	r4, r3
 80028d2:	419b      	sbcs	r3, r3
 80028d4:	425b      	negs	r3, r3
 80028d6:	4463      	add	r3, ip
 80028d8:	4699      	mov	r9, r3
 80028da:	464b      	mov	r3, r9
 80028dc:	021b      	lsls	r3, r3, #8
 80028de:	d400      	bmi.n	80028e2 <__aeabi_dsub+0x42e>
 80028e0:	e756      	b.n	8002790 <__aeabi_dsub+0x2dc>
 80028e2:	2301      	movs	r3, #1
 80028e4:	469c      	mov	ip, r3
 80028e6:	4ba8      	ldr	r3, [pc, #672]	; (8002b88 <__aeabi_dsub+0x6d4>)
 80028e8:	44e0      	add	r8, ip
 80028ea:	4598      	cmp	r8, r3
 80028ec:	d038      	beq.n	8002960 <__aeabi_dsub+0x4ac>
 80028ee:	464b      	mov	r3, r9
 80028f0:	48a6      	ldr	r0, [pc, #664]	; (8002b8c <__aeabi_dsub+0x6d8>)
 80028f2:	2201      	movs	r2, #1
 80028f4:	4003      	ands	r3, r0
 80028f6:	0018      	movs	r0, r3
 80028f8:	0863      	lsrs	r3, r4, #1
 80028fa:	4014      	ands	r4, r2
 80028fc:	431c      	orrs	r4, r3
 80028fe:	07c3      	lsls	r3, r0, #31
 8002900:	431c      	orrs	r4, r3
 8002902:	0843      	lsrs	r3, r0, #1
 8002904:	4699      	mov	r9, r3
 8002906:	e657      	b.n	80025b8 <__aeabi_dsub+0x104>
 8002908:	0010      	movs	r0, r2
 800290a:	000e      	movs	r6, r1
 800290c:	3820      	subs	r0, #32
 800290e:	40c6      	lsrs	r6, r0
 8002910:	2a20      	cmp	r2, #32
 8002912:	d004      	beq.n	800291e <__aeabi_dsub+0x46a>
 8002914:	2040      	movs	r0, #64	; 0x40
 8002916:	1a82      	subs	r2, r0, r2
 8002918:	4091      	lsls	r1, r2
 800291a:	430f      	orrs	r7, r1
 800291c:	46b9      	mov	r9, r7
 800291e:	464f      	mov	r7, r9
 8002920:	1e7a      	subs	r2, r7, #1
 8002922:	4197      	sbcs	r7, r2
 8002924:	4337      	orrs	r7, r6
 8002926:	e60f      	b.n	8002548 <__aeabi_dsub+0x94>
 8002928:	4662      	mov	r2, ip
 800292a:	431a      	orrs	r2, r3
 800292c:	0013      	movs	r3, r2
 800292e:	1e5a      	subs	r2, r3, #1
 8002930:	4193      	sbcs	r3, r2
 8002932:	1afc      	subs	r4, r7, r3
 8002934:	42a7      	cmp	r7, r4
 8002936:	41bf      	sbcs	r7, r7
 8002938:	427f      	negs	r7, r7
 800293a:	1bcb      	subs	r3, r1, r7
 800293c:	4699      	mov	r9, r3
 800293e:	465d      	mov	r5, fp
 8002940:	4680      	mov	r8, r0
 8002942:	e608      	b.n	8002556 <__aeabi_dsub+0xa2>
 8002944:	4666      	mov	r6, ip
 8002946:	431e      	orrs	r6, r3
 8002948:	d100      	bne.n	800294c <__aeabi_dsub+0x498>
 800294a:	e0be      	b.n	8002aca <__aeabi_dsub+0x616>
 800294c:	1e56      	subs	r6, r2, #1
 800294e:	2a01      	cmp	r2, #1
 8002950:	d100      	bne.n	8002954 <__aeabi_dsub+0x4a0>
 8002952:	e109      	b.n	8002b68 <__aeabi_dsub+0x6b4>
 8002954:	4c8c      	ldr	r4, [pc, #560]	; (8002b88 <__aeabi_dsub+0x6d4>)
 8002956:	42a2      	cmp	r2, r4
 8002958:	d100      	bne.n	800295c <__aeabi_dsub+0x4a8>
 800295a:	e119      	b.n	8002b90 <__aeabi_dsub+0x6dc>
 800295c:	0032      	movs	r2, r6
 800295e:	e6c1      	b.n	80026e4 <__aeabi_dsub+0x230>
 8002960:	4642      	mov	r2, r8
 8002962:	2400      	movs	r4, #0
 8002964:	2300      	movs	r3, #0
 8002966:	e648      	b.n	80025fa <__aeabi_dsub+0x146>
 8002968:	2020      	movs	r0, #32
 800296a:	000c      	movs	r4, r1
 800296c:	1a80      	subs	r0, r0, r2
 800296e:	003e      	movs	r6, r7
 8002970:	4087      	lsls	r7, r0
 8002972:	4084      	lsls	r4, r0
 8002974:	40d6      	lsrs	r6, r2
 8002976:	1e78      	subs	r0, r7, #1
 8002978:	4187      	sbcs	r7, r0
 800297a:	40d1      	lsrs	r1, r2
 800297c:	4334      	orrs	r4, r6
 800297e:	433c      	orrs	r4, r7
 8002980:	448c      	add	ip, r1
 8002982:	e7a4      	b.n	80028ce <__aeabi_dsub+0x41a>
 8002984:	4a80      	ldr	r2, [pc, #512]	; (8002b88 <__aeabi_dsub+0x6d4>)
 8002986:	4290      	cmp	r0, r2
 8002988:	d100      	bne.n	800298c <__aeabi_dsub+0x4d8>
 800298a:	e0e9      	b.n	8002b60 <__aeabi_dsub+0x6ac>
 800298c:	19df      	adds	r7, r3, r7
 800298e:	429f      	cmp	r7, r3
 8002990:	419b      	sbcs	r3, r3
 8002992:	4461      	add	r1, ip
 8002994:	425b      	negs	r3, r3
 8002996:	18c9      	adds	r1, r1, r3
 8002998:	07cc      	lsls	r4, r1, #31
 800299a:	087f      	lsrs	r7, r7, #1
 800299c:	084b      	lsrs	r3, r1, #1
 800299e:	4699      	mov	r9, r3
 80029a0:	4680      	mov	r8, r0
 80029a2:	433c      	orrs	r4, r7
 80029a4:	e6f4      	b.n	8002790 <__aeabi_dsub+0x2dc>
 80029a6:	1afc      	subs	r4, r7, r3
 80029a8:	42a7      	cmp	r7, r4
 80029aa:	41bf      	sbcs	r7, r7
 80029ac:	4663      	mov	r3, ip
 80029ae:	427f      	negs	r7, r7
 80029b0:	1ac9      	subs	r1, r1, r3
 80029b2:	1bcb      	subs	r3, r1, r7
 80029b4:	4699      	mov	r9, r3
 80029b6:	465d      	mov	r5, fp
 80029b8:	e5d5      	b.n	8002566 <__aeabi_dsub+0xb2>
 80029ba:	08ff      	lsrs	r7, r7, #3
 80029bc:	074b      	lsls	r3, r1, #29
 80029be:	465d      	mov	r5, fp
 80029c0:	433b      	orrs	r3, r7
 80029c2:	08cc      	lsrs	r4, r1, #3
 80029c4:	e6ee      	b.n	80027a4 <__aeabi_dsub+0x2f0>
 80029c6:	4662      	mov	r2, ip
 80029c8:	431a      	orrs	r2, r3
 80029ca:	d000      	beq.n	80029ce <__aeabi_dsub+0x51a>
 80029cc:	e082      	b.n	8002ad4 <__aeabi_dsub+0x620>
 80029ce:	000b      	movs	r3, r1
 80029d0:	433b      	orrs	r3, r7
 80029d2:	d11b      	bne.n	8002a0c <__aeabi_dsub+0x558>
 80029d4:	2480      	movs	r4, #128	; 0x80
 80029d6:	2500      	movs	r5, #0
 80029d8:	0324      	lsls	r4, r4, #12
 80029da:	e6f9      	b.n	80027d0 <__aeabi_dsub+0x31c>
 80029dc:	19dc      	adds	r4, r3, r7
 80029de:	429c      	cmp	r4, r3
 80029e0:	419b      	sbcs	r3, r3
 80029e2:	4461      	add	r1, ip
 80029e4:	4689      	mov	r9, r1
 80029e6:	425b      	negs	r3, r3
 80029e8:	4499      	add	r9, r3
 80029ea:	464b      	mov	r3, r9
 80029ec:	021b      	lsls	r3, r3, #8
 80029ee:	d444      	bmi.n	8002a7a <__aeabi_dsub+0x5c6>
 80029f0:	2301      	movs	r3, #1
 80029f2:	4698      	mov	r8, r3
 80029f4:	e6cc      	b.n	8002790 <__aeabi_dsub+0x2dc>
 80029f6:	1bdc      	subs	r4, r3, r7
 80029f8:	4662      	mov	r2, ip
 80029fa:	42a3      	cmp	r3, r4
 80029fc:	419b      	sbcs	r3, r3
 80029fe:	1a51      	subs	r1, r2, r1
 8002a00:	425b      	negs	r3, r3
 8002a02:	1acb      	subs	r3, r1, r3
 8002a04:	4699      	mov	r9, r3
 8002a06:	2301      	movs	r3, #1
 8002a08:	4698      	mov	r8, r3
 8002a0a:	e5a4      	b.n	8002556 <__aeabi_dsub+0xa2>
 8002a0c:	08ff      	lsrs	r7, r7, #3
 8002a0e:	074b      	lsls	r3, r1, #29
 8002a10:	465d      	mov	r5, fp
 8002a12:	433b      	orrs	r3, r7
 8002a14:	08cc      	lsrs	r4, r1, #3
 8002a16:	e6d7      	b.n	80027c8 <__aeabi_dsub+0x314>
 8002a18:	4662      	mov	r2, ip
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	0014      	movs	r4, r2
 8002a1e:	1e63      	subs	r3, r4, #1
 8002a20:	419c      	sbcs	r4, r3
 8002a22:	e679      	b.n	8002718 <__aeabi_dsub+0x264>
 8002a24:	0015      	movs	r5, r2
 8002a26:	4664      	mov	r4, ip
 8002a28:	3d20      	subs	r5, #32
 8002a2a:	40ec      	lsrs	r4, r5
 8002a2c:	46a0      	mov	r8, r4
 8002a2e:	2a20      	cmp	r2, #32
 8002a30:	d005      	beq.n	8002a3e <__aeabi_dsub+0x58a>
 8002a32:	2540      	movs	r5, #64	; 0x40
 8002a34:	4664      	mov	r4, ip
 8002a36:	1aaa      	subs	r2, r5, r2
 8002a38:	4094      	lsls	r4, r2
 8002a3a:	4323      	orrs	r3, r4
 8002a3c:	469a      	mov	sl, r3
 8002a3e:	4654      	mov	r4, sl
 8002a40:	1e63      	subs	r3, r4, #1
 8002a42:	419c      	sbcs	r4, r3
 8002a44:	4643      	mov	r3, r8
 8002a46:	4323      	orrs	r3, r4
 8002a48:	e773      	b.n	8002932 <__aeabi_dsub+0x47e>
 8002a4a:	4662      	mov	r2, ip
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	d023      	beq.n	8002a98 <__aeabi_dsub+0x5e4>
 8002a50:	000a      	movs	r2, r1
 8002a52:	433a      	orrs	r2, r7
 8002a54:	d000      	beq.n	8002a58 <__aeabi_dsub+0x5a4>
 8002a56:	e0a0      	b.n	8002b9a <__aeabi_dsub+0x6e6>
 8002a58:	4662      	mov	r2, ip
 8002a5a:	08db      	lsrs	r3, r3, #3
 8002a5c:	0752      	lsls	r2, r2, #29
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	4662      	mov	r2, ip
 8002a62:	08d4      	lsrs	r4, r2, #3
 8002a64:	e6b0      	b.n	80027c8 <__aeabi_dsub+0x314>
 8002a66:	000b      	movs	r3, r1
 8002a68:	433b      	orrs	r3, r7
 8002a6a:	d100      	bne.n	8002a6e <__aeabi_dsub+0x5ba>
 8002a6c:	e728      	b.n	80028c0 <__aeabi_dsub+0x40c>
 8002a6e:	08ff      	lsrs	r7, r7, #3
 8002a70:	074b      	lsls	r3, r1, #29
 8002a72:	465d      	mov	r5, fp
 8002a74:	433b      	orrs	r3, r7
 8002a76:	08cc      	lsrs	r4, r1, #3
 8002a78:	e697      	b.n	80027aa <__aeabi_dsub+0x2f6>
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	4698      	mov	r8, r3
 8002a7e:	e736      	b.n	80028ee <__aeabi_dsub+0x43a>
 8002a80:	1afc      	subs	r4, r7, r3
 8002a82:	42a7      	cmp	r7, r4
 8002a84:	41bf      	sbcs	r7, r7
 8002a86:	4663      	mov	r3, ip
 8002a88:	427f      	negs	r7, r7
 8002a8a:	1ac9      	subs	r1, r1, r3
 8002a8c:	1bcb      	subs	r3, r1, r7
 8002a8e:	4699      	mov	r9, r3
 8002a90:	2301      	movs	r3, #1
 8002a92:	465d      	mov	r5, fp
 8002a94:	4698      	mov	r8, r3
 8002a96:	e55e      	b.n	8002556 <__aeabi_dsub+0xa2>
 8002a98:	074b      	lsls	r3, r1, #29
 8002a9a:	08ff      	lsrs	r7, r7, #3
 8002a9c:	433b      	orrs	r3, r7
 8002a9e:	08cc      	lsrs	r4, r1, #3
 8002aa0:	e692      	b.n	80027c8 <__aeabi_dsub+0x314>
 8002aa2:	1bdc      	subs	r4, r3, r7
 8002aa4:	4660      	mov	r0, ip
 8002aa6:	42a3      	cmp	r3, r4
 8002aa8:	41b6      	sbcs	r6, r6
 8002aaa:	1a40      	subs	r0, r0, r1
 8002aac:	4276      	negs	r6, r6
 8002aae:	1b80      	subs	r0, r0, r6
 8002ab0:	4681      	mov	r9, r0
 8002ab2:	0200      	lsls	r0, r0, #8
 8002ab4:	d560      	bpl.n	8002b78 <__aeabi_dsub+0x6c4>
 8002ab6:	1afc      	subs	r4, r7, r3
 8002ab8:	42a7      	cmp	r7, r4
 8002aba:	41bf      	sbcs	r7, r7
 8002abc:	4663      	mov	r3, ip
 8002abe:	427f      	negs	r7, r7
 8002ac0:	1ac9      	subs	r1, r1, r3
 8002ac2:	1bcb      	subs	r3, r1, r7
 8002ac4:	4699      	mov	r9, r3
 8002ac6:	465d      	mov	r5, fp
 8002ac8:	e576      	b.n	80025b8 <__aeabi_dsub+0x104>
 8002aca:	08ff      	lsrs	r7, r7, #3
 8002acc:	074b      	lsls	r3, r1, #29
 8002ace:	433b      	orrs	r3, r7
 8002ad0:	08cc      	lsrs	r4, r1, #3
 8002ad2:	e667      	b.n	80027a4 <__aeabi_dsub+0x2f0>
 8002ad4:	000a      	movs	r2, r1
 8002ad6:	08db      	lsrs	r3, r3, #3
 8002ad8:	433a      	orrs	r2, r7
 8002ada:	d100      	bne.n	8002ade <__aeabi_dsub+0x62a>
 8002adc:	e66f      	b.n	80027be <__aeabi_dsub+0x30a>
 8002ade:	4662      	mov	r2, ip
 8002ae0:	0752      	lsls	r2, r2, #29
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	4662      	mov	r2, ip
 8002ae6:	08d4      	lsrs	r4, r2, #3
 8002ae8:	2280      	movs	r2, #128	; 0x80
 8002aea:	0312      	lsls	r2, r2, #12
 8002aec:	4214      	tst	r4, r2
 8002aee:	d007      	beq.n	8002b00 <__aeabi_dsub+0x64c>
 8002af0:	08c8      	lsrs	r0, r1, #3
 8002af2:	4210      	tst	r0, r2
 8002af4:	d104      	bne.n	8002b00 <__aeabi_dsub+0x64c>
 8002af6:	465d      	mov	r5, fp
 8002af8:	0004      	movs	r4, r0
 8002afa:	08fb      	lsrs	r3, r7, #3
 8002afc:	0749      	lsls	r1, r1, #29
 8002afe:	430b      	orrs	r3, r1
 8002b00:	0f5a      	lsrs	r2, r3, #29
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	08db      	lsrs	r3, r3, #3
 8002b06:	0752      	lsls	r2, r2, #29
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	e65d      	b.n	80027c8 <__aeabi_dsub+0x314>
 8002b0c:	074b      	lsls	r3, r1, #29
 8002b0e:	08ff      	lsrs	r7, r7, #3
 8002b10:	433b      	orrs	r3, r7
 8002b12:	08cc      	lsrs	r4, r1, #3
 8002b14:	e649      	b.n	80027aa <__aeabi_dsub+0x2f6>
 8002b16:	19dc      	adds	r4, r3, r7
 8002b18:	429c      	cmp	r4, r3
 8002b1a:	419b      	sbcs	r3, r3
 8002b1c:	4461      	add	r1, ip
 8002b1e:	4689      	mov	r9, r1
 8002b20:	425b      	negs	r3, r3
 8002b22:	4499      	add	r9, r3
 8002b24:	464b      	mov	r3, r9
 8002b26:	021b      	lsls	r3, r3, #8
 8002b28:	d400      	bmi.n	8002b2c <__aeabi_dsub+0x678>
 8002b2a:	e631      	b.n	8002790 <__aeabi_dsub+0x2dc>
 8002b2c:	464a      	mov	r2, r9
 8002b2e:	4b17      	ldr	r3, [pc, #92]	; (8002b8c <__aeabi_dsub+0x6d8>)
 8002b30:	401a      	ands	r2, r3
 8002b32:	2301      	movs	r3, #1
 8002b34:	4691      	mov	r9, r2
 8002b36:	4698      	mov	r8, r3
 8002b38:	e62a      	b.n	8002790 <__aeabi_dsub+0x2dc>
 8002b3a:	0016      	movs	r6, r2
 8002b3c:	4664      	mov	r4, ip
 8002b3e:	3e20      	subs	r6, #32
 8002b40:	40f4      	lsrs	r4, r6
 8002b42:	46a0      	mov	r8, r4
 8002b44:	2a20      	cmp	r2, #32
 8002b46:	d005      	beq.n	8002b54 <__aeabi_dsub+0x6a0>
 8002b48:	2640      	movs	r6, #64	; 0x40
 8002b4a:	4664      	mov	r4, ip
 8002b4c:	1ab2      	subs	r2, r6, r2
 8002b4e:	4094      	lsls	r4, r2
 8002b50:	4323      	orrs	r3, r4
 8002b52:	469a      	mov	sl, r3
 8002b54:	4654      	mov	r4, sl
 8002b56:	1e63      	subs	r3, r4, #1
 8002b58:	419c      	sbcs	r4, r3
 8002b5a:	4643      	mov	r3, r8
 8002b5c:	431c      	orrs	r4, r3
 8002b5e:	e5db      	b.n	8002718 <__aeabi_dsub+0x264>
 8002b60:	0002      	movs	r2, r0
 8002b62:	2400      	movs	r4, #0
 8002b64:	2300      	movs	r3, #0
 8002b66:	e548      	b.n	80025fa <__aeabi_dsub+0x146>
 8002b68:	19dc      	adds	r4, r3, r7
 8002b6a:	42bc      	cmp	r4, r7
 8002b6c:	41bf      	sbcs	r7, r7
 8002b6e:	4461      	add	r1, ip
 8002b70:	4689      	mov	r9, r1
 8002b72:	427f      	negs	r7, r7
 8002b74:	44b9      	add	r9, r7
 8002b76:	e738      	b.n	80029ea <__aeabi_dsub+0x536>
 8002b78:	464b      	mov	r3, r9
 8002b7a:	4323      	orrs	r3, r4
 8002b7c:	d100      	bne.n	8002b80 <__aeabi_dsub+0x6cc>
 8002b7e:	e69f      	b.n	80028c0 <__aeabi_dsub+0x40c>
 8002b80:	e606      	b.n	8002790 <__aeabi_dsub+0x2dc>
 8002b82:	46c0      	nop			; (mov r8, r8)
 8002b84:	000007fe 	.word	0x000007fe
 8002b88:	000007ff 	.word	0x000007ff
 8002b8c:	ff7fffff 	.word	0xff7fffff
 8002b90:	08ff      	lsrs	r7, r7, #3
 8002b92:	074b      	lsls	r3, r1, #29
 8002b94:	433b      	orrs	r3, r7
 8002b96:	08cc      	lsrs	r4, r1, #3
 8002b98:	e616      	b.n	80027c8 <__aeabi_dsub+0x314>
 8002b9a:	4662      	mov	r2, ip
 8002b9c:	08db      	lsrs	r3, r3, #3
 8002b9e:	0752      	lsls	r2, r2, #29
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	4662      	mov	r2, ip
 8002ba4:	08d4      	lsrs	r4, r2, #3
 8002ba6:	2280      	movs	r2, #128	; 0x80
 8002ba8:	0312      	lsls	r2, r2, #12
 8002baa:	4214      	tst	r4, r2
 8002bac:	d007      	beq.n	8002bbe <__aeabi_dsub+0x70a>
 8002bae:	08c8      	lsrs	r0, r1, #3
 8002bb0:	4210      	tst	r0, r2
 8002bb2:	d104      	bne.n	8002bbe <__aeabi_dsub+0x70a>
 8002bb4:	465d      	mov	r5, fp
 8002bb6:	0004      	movs	r4, r0
 8002bb8:	08fb      	lsrs	r3, r7, #3
 8002bba:	0749      	lsls	r1, r1, #29
 8002bbc:	430b      	orrs	r3, r1
 8002bbe:	0f5a      	lsrs	r2, r3, #29
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	0752      	lsls	r2, r2, #29
 8002bc4:	08db      	lsrs	r3, r3, #3
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	e5fe      	b.n	80027c8 <__aeabi_dsub+0x314>
 8002bca:	2300      	movs	r3, #0
 8002bcc:	4a01      	ldr	r2, [pc, #4]	; (8002bd4 <__aeabi_dsub+0x720>)
 8002bce:	001c      	movs	r4, r3
 8002bd0:	e513      	b.n	80025fa <__aeabi_dsub+0x146>
 8002bd2:	46c0      	nop			; (mov r8, r8)
 8002bd4:	000007ff 	.word	0x000007ff

08002bd8 <__aeabi_dcmpun>:
 8002bd8:	b570      	push	{r4, r5, r6, lr}
 8002bda:	0005      	movs	r5, r0
 8002bdc:	480c      	ldr	r0, [pc, #48]	; (8002c10 <__aeabi_dcmpun+0x38>)
 8002bde:	031c      	lsls	r4, r3, #12
 8002be0:	0016      	movs	r6, r2
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	030a      	lsls	r2, r1, #12
 8002be6:	0049      	lsls	r1, r1, #1
 8002be8:	0b12      	lsrs	r2, r2, #12
 8002bea:	0d49      	lsrs	r1, r1, #21
 8002bec:	0b24      	lsrs	r4, r4, #12
 8002bee:	0d5b      	lsrs	r3, r3, #21
 8002bf0:	4281      	cmp	r1, r0
 8002bf2:	d008      	beq.n	8002c06 <__aeabi_dcmpun+0x2e>
 8002bf4:	4a06      	ldr	r2, [pc, #24]	; (8002c10 <__aeabi_dcmpun+0x38>)
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d103      	bne.n	8002c04 <__aeabi_dcmpun+0x2c>
 8002bfc:	0020      	movs	r0, r4
 8002bfe:	4330      	orrs	r0, r6
 8002c00:	1e43      	subs	r3, r0, #1
 8002c02:	4198      	sbcs	r0, r3
 8002c04:	bd70      	pop	{r4, r5, r6, pc}
 8002c06:	2001      	movs	r0, #1
 8002c08:	432a      	orrs	r2, r5
 8002c0a:	d1fb      	bne.n	8002c04 <__aeabi_dcmpun+0x2c>
 8002c0c:	e7f2      	b.n	8002bf4 <__aeabi_dcmpun+0x1c>
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	000007ff 	.word	0x000007ff

08002c14 <__aeabi_d2iz>:
 8002c14:	000a      	movs	r2, r1
 8002c16:	b530      	push	{r4, r5, lr}
 8002c18:	4c13      	ldr	r4, [pc, #76]	; (8002c68 <__aeabi_d2iz+0x54>)
 8002c1a:	0053      	lsls	r3, r2, #1
 8002c1c:	0309      	lsls	r1, r1, #12
 8002c1e:	0005      	movs	r5, r0
 8002c20:	0b09      	lsrs	r1, r1, #12
 8002c22:	2000      	movs	r0, #0
 8002c24:	0d5b      	lsrs	r3, r3, #21
 8002c26:	0fd2      	lsrs	r2, r2, #31
 8002c28:	42a3      	cmp	r3, r4
 8002c2a:	dd04      	ble.n	8002c36 <__aeabi_d2iz+0x22>
 8002c2c:	480f      	ldr	r0, [pc, #60]	; (8002c6c <__aeabi_d2iz+0x58>)
 8002c2e:	4283      	cmp	r3, r0
 8002c30:	dd02      	ble.n	8002c38 <__aeabi_d2iz+0x24>
 8002c32:	4b0f      	ldr	r3, [pc, #60]	; (8002c70 <__aeabi_d2iz+0x5c>)
 8002c34:	18d0      	adds	r0, r2, r3
 8002c36:	bd30      	pop	{r4, r5, pc}
 8002c38:	2080      	movs	r0, #128	; 0x80
 8002c3a:	0340      	lsls	r0, r0, #13
 8002c3c:	4301      	orrs	r1, r0
 8002c3e:	480d      	ldr	r0, [pc, #52]	; (8002c74 <__aeabi_d2iz+0x60>)
 8002c40:	1ac0      	subs	r0, r0, r3
 8002c42:	281f      	cmp	r0, #31
 8002c44:	dd08      	ble.n	8002c58 <__aeabi_d2iz+0x44>
 8002c46:	480c      	ldr	r0, [pc, #48]	; (8002c78 <__aeabi_d2iz+0x64>)
 8002c48:	1ac3      	subs	r3, r0, r3
 8002c4a:	40d9      	lsrs	r1, r3
 8002c4c:	000b      	movs	r3, r1
 8002c4e:	4258      	negs	r0, r3
 8002c50:	2a00      	cmp	r2, #0
 8002c52:	d1f0      	bne.n	8002c36 <__aeabi_d2iz+0x22>
 8002c54:	0018      	movs	r0, r3
 8002c56:	e7ee      	b.n	8002c36 <__aeabi_d2iz+0x22>
 8002c58:	4c08      	ldr	r4, [pc, #32]	; (8002c7c <__aeabi_d2iz+0x68>)
 8002c5a:	40c5      	lsrs	r5, r0
 8002c5c:	46a4      	mov	ip, r4
 8002c5e:	4463      	add	r3, ip
 8002c60:	4099      	lsls	r1, r3
 8002c62:	000b      	movs	r3, r1
 8002c64:	432b      	orrs	r3, r5
 8002c66:	e7f2      	b.n	8002c4e <__aeabi_d2iz+0x3a>
 8002c68:	000003fe 	.word	0x000003fe
 8002c6c:	0000041d 	.word	0x0000041d
 8002c70:	7fffffff 	.word	0x7fffffff
 8002c74:	00000433 	.word	0x00000433
 8002c78:	00000413 	.word	0x00000413
 8002c7c:	fffffbed 	.word	0xfffffbed

08002c80 <__aeabi_i2d>:
 8002c80:	b570      	push	{r4, r5, r6, lr}
 8002c82:	2800      	cmp	r0, #0
 8002c84:	d016      	beq.n	8002cb4 <__aeabi_i2d+0x34>
 8002c86:	17c3      	asrs	r3, r0, #31
 8002c88:	18c5      	adds	r5, r0, r3
 8002c8a:	405d      	eors	r5, r3
 8002c8c:	0fc4      	lsrs	r4, r0, #31
 8002c8e:	0028      	movs	r0, r5
 8002c90:	f000 f91c 	bl	8002ecc <__clzsi2>
 8002c94:	4a11      	ldr	r2, [pc, #68]	; (8002cdc <__aeabi_i2d+0x5c>)
 8002c96:	1a12      	subs	r2, r2, r0
 8002c98:	280a      	cmp	r0, #10
 8002c9a:	dc16      	bgt.n	8002cca <__aeabi_i2d+0x4a>
 8002c9c:	0003      	movs	r3, r0
 8002c9e:	002e      	movs	r6, r5
 8002ca0:	3315      	adds	r3, #21
 8002ca2:	409e      	lsls	r6, r3
 8002ca4:	230b      	movs	r3, #11
 8002ca6:	1a18      	subs	r0, r3, r0
 8002ca8:	40c5      	lsrs	r5, r0
 8002caa:	0552      	lsls	r2, r2, #21
 8002cac:	032d      	lsls	r5, r5, #12
 8002cae:	0b2d      	lsrs	r5, r5, #12
 8002cb0:	0d53      	lsrs	r3, r2, #21
 8002cb2:	e003      	b.n	8002cbc <__aeabi_i2d+0x3c>
 8002cb4:	2400      	movs	r4, #0
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	2500      	movs	r5, #0
 8002cba:	2600      	movs	r6, #0
 8002cbc:	051b      	lsls	r3, r3, #20
 8002cbe:	432b      	orrs	r3, r5
 8002cc0:	07e4      	lsls	r4, r4, #31
 8002cc2:	4323      	orrs	r3, r4
 8002cc4:	0030      	movs	r0, r6
 8002cc6:	0019      	movs	r1, r3
 8002cc8:	bd70      	pop	{r4, r5, r6, pc}
 8002cca:	380b      	subs	r0, #11
 8002ccc:	4085      	lsls	r5, r0
 8002cce:	0552      	lsls	r2, r2, #21
 8002cd0:	032d      	lsls	r5, r5, #12
 8002cd2:	2600      	movs	r6, #0
 8002cd4:	0b2d      	lsrs	r5, r5, #12
 8002cd6:	0d53      	lsrs	r3, r2, #21
 8002cd8:	e7f0      	b.n	8002cbc <__aeabi_i2d+0x3c>
 8002cda:	46c0      	nop			; (mov r8, r8)
 8002cdc:	0000041e 	.word	0x0000041e

08002ce0 <__aeabi_ui2d>:
 8002ce0:	b510      	push	{r4, lr}
 8002ce2:	1e04      	subs	r4, r0, #0
 8002ce4:	d010      	beq.n	8002d08 <__aeabi_ui2d+0x28>
 8002ce6:	f000 f8f1 	bl	8002ecc <__clzsi2>
 8002cea:	4b0f      	ldr	r3, [pc, #60]	; (8002d28 <__aeabi_ui2d+0x48>)
 8002cec:	1a1b      	subs	r3, r3, r0
 8002cee:	280a      	cmp	r0, #10
 8002cf0:	dc11      	bgt.n	8002d16 <__aeabi_ui2d+0x36>
 8002cf2:	220b      	movs	r2, #11
 8002cf4:	0021      	movs	r1, r4
 8002cf6:	1a12      	subs	r2, r2, r0
 8002cf8:	40d1      	lsrs	r1, r2
 8002cfa:	3015      	adds	r0, #21
 8002cfc:	030a      	lsls	r2, r1, #12
 8002cfe:	055b      	lsls	r3, r3, #21
 8002d00:	4084      	lsls	r4, r0
 8002d02:	0b12      	lsrs	r2, r2, #12
 8002d04:	0d5b      	lsrs	r3, r3, #21
 8002d06:	e001      	b.n	8002d0c <__aeabi_ui2d+0x2c>
 8002d08:	2300      	movs	r3, #0
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	051b      	lsls	r3, r3, #20
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	0020      	movs	r0, r4
 8002d12:	0019      	movs	r1, r3
 8002d14:	bd10      	pop	{r4, pc}
 8002d16:	0022      	movs	r2, r4
 8002d18:	380b      	subs	r0, #11
 8002d1a:	4082      	lsls	r2, r0
 8002d1c:	055b      	lsls	r3, r3, #21
 8002d1e:	0312      	lsls	r2, r2, #12
 8002d20:	2400      	movs	r4, #0
 8002d22:	0b12      	lsrs	r2, r2, #12
 8002d24:	0d5b      	lsrs	r3, r3, #21
 8002d26:	e7f1      	b.n	8002d0c <__aeabi_ui2d+0x2c>
 8002d28:	0000041e 	.word	0x0000041e

08002d2c <__aeabi_f2d>:
 8002d2c:	b570      	push	{r4, r5, r6, lr}
 8002d2e:	0043      	lsls	r3, r0, #1
 8002d30:	0246      	lsls	r6, r0, #9
 8002d32:	0fc4      	lsrs	r4, r0, #31
 8002d34:	20fe      	movs	r0, #254	; 0xfe
 8002d36:	0e1b      	lsrs	r3, r3, #24
 8002d38:	1c59      	adds	r1, r3, #1
 8002d3a:	0a75      	lsrs	r5, r6, #9
 8002d3c:	4208      	tst	r0, r1
 8002d3e:	d00c      	beq.n	8002d5a <__aeabi_f2d+0x2e>
 8002d40:	22e0      	movs	r2, #224	; 0xe0
 8002d42:	0092      	lsls	r2, r2, #2
 8002d44:	4694      	mov	ip, r2
 8002d46:	076d      	lsls	r5, r5, #29
 8002d48:	0b36      	lsrs	r6, r6, #12
 8002d4a:	4463      	add	r3, ip
 8002d4c:	051b      	lsls	r3, r3, #20
 8002d4e:	4333      	orrs	r3, r6
 8002d50:	07e4      	lsls	r4, r4, #31
 8002d52:	4323      	orrs	r3, r4
 8002d54:	0028      	movs	r0, r5
 8002d56:	0019      	movs	r1, r3
 8002d58:	bd70      	pop	{r4, r5, r6, pc}
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d114      	bne.n	8002d88 <__aeabi_f2d+0x5c>
 8002d5e:	2d00      	cmp	r5, #0
 8002d60:	d01b      	beq.n	8002d9a <__aeabi_f2d+0x6e>
 8002d62:	0028      	movs	r0, r5
 8002d64:	f000 f8b2 	bl	8002ecc <__clzsi2>
 8002d68:	280a      	cmp	r0, #10
 8002d6a:	dc1c      	bgt.n	8002da6 <__aeabi_f2d+0x7a>
 8002d6c:	230b      	movs	r3, #11
 8002d6e:	002e      	movs	r6, r5
 8002d70:	1a1b      	subs	r3, r3, r0
 8002d72:	40de      	lsrs	r6, r3
 8002d74:	0003      	movs	r3, r0
 8002d76:	3315      	adds	r3, #21
 8002d78:	409d      	lsls	r5, r3
 8002d7a:	4a0e      	ldr	r2, [pc, #56]	; (8002db4 <__aeabi_f2d+0x88>)
 8002d7c:	0336      	lsls	r6, r6, #12
 8002d7e:	1a12      	subs	r2, r2, r0
 8002d80:	0552      	lsls	r2, r2, #21
 8002d82:	0b36      	lsrs	r6, r6, #12
 8002d84:	0d53      	lsrs	r3, r2, #21
 8002d86:	e7e1      	b.n	8002d4c <__aeabi_f2d+0x20>
 8002d88:	2d00      	cmp	r5, #0
 8002d8a:	d009      	beq.n	8002da0 <__aeabi_f2d+0x74>
 8002d8c:	2280      	movs	r2, #128	; 0x80
 8002d8e:	0b36      	lsrs	r6, r6, #12
 8002d90:	0312      	lsls	r2, r2, #12
 8002d92:	4b09      	ldr	r3, [pc, #36]	; (8002db8 <__aeabi_f2d+0x8c>)
 8002d94:	076d      	lsls	r5, r5, #29
 8002d96:	4316      	orrs	r6, r2
 8002d98:	e7d8      	b.n	8002d4c <__aeabi_f2d+0x20>
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	2600      	movs	r6, #0
 8002d9e:	e7d5      	b.n	8002d4c <__aeabi_f2d+0x20>
 8002da0:	2600      	movs	r6, #0
 8002da2:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <__aeabi_f2d+0x8c>)
 8002da4:	e7d2      	b.n	8002d4c <__aeabi_f2d+0x20>
 8002da6:	0003      	movs	r3, r0
 8002da8:	3b0b      	subs	r3, #11
 8002daa:	409d      	lsls	r5, r3
 8002dac:	002e      	movs	r6, r5
 8002dae:	2500      	movs	r5, #0
 8002db0:	e7e3      	b.n	8002d7a <__aeabi_f2d+0x4e>
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	00000389 	.word	0x00000389
 8002db8:	000007ff 	.word	0x000007ff

08002dbc <__aeabi_d2f>:
 8002dbc:	0002      	movs	r2, r0
 8002dbe:	004b      	lsls	r3, r1, #1
 8002dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dc2:	0d5b      	lsrs	r3, r3, #21
 8002dc4:	030c      	lsls	r4, r1, #12
 8002dc6:	4e3d      	ldr	r6, [pc, #244]	; (8002ebc <__aeabi_d2f+0x100>)
 8002dc8:	0a64      	lsrs	r4, r4, #9
 8002dca:	0f40      	lsrs	r0, r0, #29
 8002dcc:	1c5f      	adds	r7, r3, #1
 8002dce:	0fc9      	lsrs	r1, r1, #31
 8002dd0:	4304      	orrs	r4, r0
 8002dd2:	00d5      	lsls	r5, r2, #3
 8002dd4:	4237      	tst	r7, r6
 8002dd6:	d00a      	beq.n	8002dee <__aeabi_d2f+0x32>
 8002dd8:	4839      	ldr	r0, [pc, #228]	; (8002ec0 <__aeabi_d2f+0x104>)
 8002dda:	181e      	adds	r6, r3, r0
 8002ddc:	2efe      	cmp	r6, #254	; 0xfe
 8002dde:	dd16      	ble.n	8002e0e <__aeabi_d2f+0x52>
 8002de0:	20ff      	movs	r0, #255	; 0xff
 8002de2:	2400      	movs	r4, #0
 8002de4:	05c0      	lsls	r0, r0, #23
 8002de6:	4320      	orrs	r0, r4
 8002de8:	07c9      	lsls	r1, r1, #31
 8002dea:	4308      	orrs	r0, r1
 8002dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d106      	bne.n	8002e00 <__aeabi_d2f+0x44>
 8002df2:	432c      	orrs	r4, r5
 8002df4:	d026      	beq.n	8002e44 <__aeabi_d2f+0x88>
 8002df6:	2205      	movs	r2, #5
 8002df8:	0192      	lsls	r2, r2, #6
 8002dfa:	0a54      	lsrs	r4, r2, #9
 8002dfc:	b2d8      	uxtb	r0, r3
 8002dfe:	e7f1      	b.n	8002de4 <__aeabi_d2f+0x28>
 8002e00:	4325      	orrs	r5, r4
 8002e02:	d0ed      	beq.n	8002de0 <__aeabi_d2f+0x24>
 8002e04:	2080      	movs	r0, #128	; 0x80
 8002e06:	03c0      	lsls	r0, r0, #15
 8002e08:	4304      	orrs	r4, r0
 8002e0a:	20ff      	movs	r0, #255	; 0xff
 8002e0c:	e7ea      	b.n	8002de4 <__aeabi_d2f+0x28>
 8002e0e:	2e00      	cmp	r6, #0
 8002e10:	dd1b      	ble.n	8002e4a <__aeabi_d2f+0x8e>
 8002e12:	0192      	lsls	r2, r2, #6
 8002e14:	1e53      	subs	r3, r2, #1
 8002e16:	419a      	sbcs	r2, r3
 8002e18:	00e4      	lsls	r4, r4, #3
 8002e1a:	0f6d      	lsrs	r5, r5, #29
 8002e1c:	4322      	orrs	r2, r4
 8002e1e:	432a      	orrs	r2, r5
 8002e20:	0753      	lsls	r3, r2, #29
 8002e22:	d048      	beq.n	8002eb6 <__aeabi_d2f+0xfa>
 8002e24:	230f      	movs	r3, #15
 8002e26:	4013      	ands	r3, r2
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	d000      	beq.n	8002e2e <__aeabi_d2f+0x72>
 8002e2c:	3204      	adds	r2, #4
 8002e2e:	2380      	movs	r3, #128	; 0x80
 8002e30:	04db      	lsls	r3, r3, #19
 8002e32:	4013      	ands	r3, r2
 8002e34:	d03f      	beq.n	8002eb6 <__aeabi_d2f+0xfa>
 8002e36:	1c70      	adds	r0, r6, #1
 8002e38:	2efe      	cmp	r6, #254	; 0xfe
 8002e3a:	d0d1      	beq.n	8002de0 <__aeabi_d2f+0x24>
 8002e3c:	0192      	lsls	r2, r2, #6
 8002e3e:	0a54      	lsrs	r4, r2, #9
 8002e40:	b2c0      	uxtb	r0, r0
 8002e42:	e7cf      	b.n	8002de4 <__aeabi_d2f+0x28>
 8002e44:	2000      	movs	r0, #0
 8002e46:	2400      	movs	r4, #0
 8002e48:	e7cc      	b.n	8002de4 <__aeabi_d2f+0x28>
 8002e4a:	0032      	movs	r2, r6
 8002e4c:	3217      	adds	r2, #23
 8002e4e:	db22      	blt.n	8002e96 <__aeabi_d2f+0xda>
 8002e50:	2080      	movs	r0, #128	; 0x80
 8002e52:	0400      	lsls	r0, r0, #16
 8002e54:	4320      	orrs	r0, r4
 8002e56:	241e      	movs	r4, #30
 8002e58:	1ba4      	subs	r4, r4, r6
 8002e5a:	2c1f      	cmp	r4, #31
 8002e5c:	dd1d      	ble.n	8002e9a <__aeabi_d2f+0xde>
 8002e5e:	2202      	movs	r2, #2
 8002e60:	4252      	negs	r2, r2
 8002e62:	1b96      	subs	r6, r2, r6
 8002e64:	0002      	movs	r2, r0
 8002e66:	40f2      	lsrs	r2, r6
 8002e68:	0016      	movs	r6, r2
 8002e6a:	2c20      	cmp	r4, #32
 8002e6c:	d004      	beq.n	8002e78 <__aeabi_d2f+0xbc>
 8002e6e:	4a15      	ldr	r2, [pc, #84]	; (8002ec4 <__aeabi_d2f+0x108>)
 8002e70:	4694      	mov	ip, r2
 8002e72:	4463      	add	r3, ip
 8002e74:	4098      	lsls	r0, r3
 8002e76:	4305      	orrs	r5, r0
 8002e78:	002a      	movs	r2, r5
 8002e7a:	1e53      	subs	r3, r2, #1
 8002e7c:	419a      	sbcs	r2, r3
 8002e7e:	4332      	orrs	r2, r6
 8002e80:	2600      	movs	r6, #0
 8002e82:	0753      	lsls	r3, r2, #29
 8002e84:	d1ce      	bne.n	8002e24 <__aeabi_d2f+0x68>
 8002e86:	2480      	movs	r4, #128	; 0x80
 8002e88:	0013      	movs	r3, r2
 8002e8a:	04e4      	lsls	r4, r4, #19
 8002e8c:	2001      	movs	r0, #1
 8002e8e:	4023      	ands	r3, r4
 8002e90:	4222      	tst	r2, r4
 8002e92:	d1d3      	bne.n	8002e3c <__aeabi_d2f+0x80>
 8002e94:	e7b0      	b.n	8002df8 <__aeabi_d2f+0x3c>
 8002e96:	2300      	movs	r3, #0
 8002e98:	e7ad      	b.n	8002df6 <__aeabi_d2f+0x3a>
 8002e9a:	4a0b      	ldr	r2, [pc, #44]	; (8002ec8 <__aeabi_d2f+0x10c>)
 8002e9c:	4694      	mov	ip, r2
 8002e9e:	002a      	movs	r2, r5
 8002ea0:	40e2      	lsrs	r2, r4
 8002ea2:	0014      	movs	r4, r2
 8002ea4:	002a      	movs	r2, r5
 8002ea6:	4463      	add	r3, ip
 8002ea8:	409a      	lsls	r2, r3
 8002eaa:	4098      	lsls	r0, r3
 8002eac:	1e55      	subs	r5, r2, #1
 8002eae:	41aa      	sbcs	r2, r5
 8002eb0:	4302      	orrs	r2, r0
 8002eb2:	4322      	orrs	r2, r4
 8002eb4:	e7e4      	b.n	8002e80 <__aeabi_d2f+0xc4>
 8002eb6:	0033      	movs	r3, r6
 8002eb8:	e79e      	b.n	8002df8 <__aeabi_d2f+0x3c>
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	000007fe 	.word	0x000007fe
 8002ec0:	fffffc80 	.word	0xfffffc80
 8002ec4:	fffffca2 	.word	0xfffffca2
 8002ec8:	fffffc82 	.word	0xfffffc82

08002ecc <__clzsi2>:
 8002ecc:	211c      	movs	r1, #28
 8002ece:	2301      	movs	r3, #1
 8002ed0:	041b      	lsls	r3, r3, #16
 8002ed2:	4298      	cmp	r0, r3
 8002ed4:	d301      	bcc.n	8002eda <__clzsi2+0xe>
 8002ed6:	0c00      	lsrs	r0, r0, #16
 8002ed8:	3910      	subs	r1, #16
 8002eda:	0a1b      	lsrs	r3, r3, #8
 8002edc:	4298      	cmp	r0, r3
 8002ede:	d301      	bcc.n	8002ee4 <__clzsi2+0x18>
 8002ee0:	0a00      	lsrs	r0, r0, #8
 8002ee2:	3908      	subs	r1, #8
 8002ee4:	091b      	lsrs	r3, r3, #4
 8002ee6:	4298      	cmp	r0, r3
 8002ee8:	d301      	bcc.n	8002eee <__clzsi2+0x22>
 8002eea:	0900      	lsrs	r0, r0, #4
 8002eec:	3904      	subs	r1, #4
 8002eee:	a202      	add	r2, pc, #8	; (adr r2, 8002ef8 <__clzsi2+0x2c>)
 8002ef0:	5c10      	ldrb	r0, [r2, r0]
 8002ef2:	1840      	adds	r0, r0, r1
 8002ef4:	4770      	bx	lr
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	02020304 	.word	0x02020304
 8002efc:	01010101 	.word	0x01010101
	...

08002f08 <__clzdi2>:
 8002f08:	b510      	push	{r4, lr}
 8002f0a:	2900      	cmp	r1, #0
 8002f0c:	d103      	bne.n	8002f16 <__clzdi2+0xe>
 8002f0e:	f7ff ffdd 	bl	8002ecc <__clzsi2>
 8002f12:	3020      	adds	r0, #32
 8002f14:	e002      	b.n	8002f1c <__clzdi2+0x14>
 8002f16:	0008      	movs	r0, r1
 8002f18:	f7ff ffd8 	bl	8002ecc <__clzsi2>
 8002f1c:	bd10      	pop	{r4, pc}
 8002f1e:	46c0      	nop			; (mov r8, r8)

08002f20 <GPS_Init>:
uint8_t rx_buffer[GPSBUFSIZE];
uint8_t rx_index = 0;
GPS_t GPS;
extern UART_HandleTypeDef huart1;
void GPS_Init()
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8002f24:	4904      	ldr	r1, [pc, #16]	; (8002f38 <GPS_Init+0x18>)
 8002f26:	4b05      	ldr	r3, [pc, #20]	; (8002f3c <GPS_Init+0x1c>)
 8002f28:	2201      	movs	r2, #1
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	f002 f8ac 	bl	8005088 <HAL_UART_Receive_IT>
}
 8002f30:	46c0      	nop			; (mov r8, r8)
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	200001fc 	.word	0x200001fc
 8002f3c:	200002dc 	.word	0x200002dc

08002f40 <GPS_UART_CallBack>:
void GPS_UART_CallBack(){
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
	if (rx_data != '\n' && rx_index < sizeof(rx_buffer))
 8002f44:	4b18      	ldr	r3, [pc, #96]	; (8002fa8 <GPS_UART_CallBack+0x68>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2b0a      	cmp	r3, #10
 8002f4a:	d010      	beq.n	8002f6e <GPS_UART_CallBack+0x2e>
 8002f4c:	4b17      	ldr	r3, [pc, #92]	; (8002fac <GPS_UART_CallBack+0x6c>)
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	b25b      	sxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	db0b      	blt.n	8002f6e <GPS_UART_CallBack+0x2e>
	{
		rx_buffer[rx_index++] = rx_data;
 8002f56:	4b15      	ldr	r3, [pc, #84]	; (8002fac <GPS_UART_CallBack+0x6c>)
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	1c5a      	adds	r2, r3, #1
 8002f5c:	b2d1      	uxtb	r1, r2
 8002f5e:	4a13      	ldr	r2, [pc, #76]	; (8002fac <GPS_UART_CallBack+0x6c>)
 8002f60:	7011      	strb	r1, [r2, #0]
 8002f62:	001a      	movs	r2, r3
 8002f64:	4b10      	ldr	r3, [pc, #64]	; (8002fa8 <GPS_UART_CallBack+0x68>)
 8002f66:	7819      	ldrb	r1, [r3, #0]
 8002f68:	4b11      	ldr	r3, [pc, #68]	; (8002fb0 <GPS_UART_CallBack+0x70>)
 8002f6a:	5499      	strb	r1, [r3, r2]
 8002f6c:	e012      	b.n	8002f94 <GPS_UART_CallBack+0x54>
	}
	else
	{
		if(GPS_validate((char*) rx_buffer))
 8002f6e:	4b10      	ldr	r3, [pc, #64]	; (8002fb0 <GPS_UART_CallBack+0x70>)
 8002f70:	0018      	movs	r0, r3
 8002f72:	f000 f821 	bl	8002fb8 <GPS_validate>
 8002f76:	1e03      	subs	r3, r0, #0
 8002f78:	d003      	beq.n	8002f82 <GPS_UART_CallBack+0x42>
			GPS_parse((char*) rx_buffer);
 8002f7a:	4b0d      	ldr	r3, [pc, #52]	; (8002fb0 <GPS_UART_CallBack+0x70>)
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	f000 f887 	bl	8003090 <GPS_parse>
		rx_index = 0;
 8002f82:	4b0a      	ldr	r3, [pc, #40]	; (8002fac <GPS_UART_CallBack+0x6c>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	701a      	strb	r2, [r3, #0]
		memset(rx_buffer, 0, sizeof(rx_buffer));
 8002f88:	4b09      	ldr	r3, [pc, #36]	; (8002fb0 <GPS_UART_CallBack+0x70>)
 8002f8a:	2280      	movs	r2, #128	; 0x80
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	0018      	movs	r0, r3
 8002f90:	f003 fba0 	bl	80066d4 <memset>
	}
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8002f94:	4904      	ldr	r1, [pc, #16]	; (8002fa8 <GPS_UART_CallBack+0x68>)
 8002f96:	4b07      	ldr	r3, [pc, #28]	; (8002fb4 <GPS_UART_CallBack+0x74>)
 8002f98:	2201      	movs	r2, #1
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f002 f874 	bl	8005088 <HAL_UART_Receive_IT>
}
 8002fa0:	46c0      	nop			; (mov r8, r8)
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	200001fc 	.word	0x200001fc
 8002fac:	20000280 	.word	0x20000280
 8002fb0:	20000200 	.word	0x20000200
 8002fb4:	200002dc 	.word	0x200002dc

08002fb8 <GPS_validate>:
int GPS_validate(char *nmeastr){
 8002fb8:	b5b0      	push	{r4, r5, r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	18d3      	adds	r3, r2, r3
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	2b24      	cmp	r3, #36	; 0x24
 8002fd2:	d103      	bne.n	8002fdc <GPS_validate+0x24>
        i++;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8002fda:	e00c      	b.n	8002ff6 <GPS_validate+0x3e>
        return 0;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	e051      	b.n	8003084 <GPS_validate+0xcc>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	18d3      	adds	r3, r2, r3
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	001a      	movs	r2, r3
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	4053      	eors	r3, r2
 8002fee:	613b      	str	r3, [r7, #16]
        i++;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	18d3      	adds	r3, r2, r3
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d008      	beq.n	8003014 <GPS_validate+0x5c>
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	18d3      	adds	r3, r2, r3
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	2b2a      	cmp	r3, #42	; 0x2a
 800300c:	d002      	beq.n	8003014 <GPS_validate+0x5c>
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	2b4a      	cmp	r3, #74	; 0x4a
 8003012:	dde5      	ble.n	8002fe0 <GPS_validate+0x28>
    }

    if(i >= 75){
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	2b4a      	cmp	r3, #74	; 0x4a
 8003018:	dd01      	ble.n	800301e <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 800301a:	2300      	movs	r3, #0
 800301c:	e032      	b.n	8003084 <GPS_validate+0xcc>
    }

    if (nmeastr[i] == '*'){
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	18d3      	adds	r3, r2, r3
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	2b2a      	cmp	r3, #42	; 0x2a
 8003028:	d11f      	bne.n	800306a <GPS_validate+0xb2>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	3301      	adds	r3, #1
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	18d3      	adds	r3, r2, r3
 8003032:	781a      	ldrb	r2, [r3, #0]
 8003034:	240c      	movs	r4, #12
 8003036:	193b      	adds	r3, r7, r4
 8003038:	701a      	strb	r2, [r3, #0]
        check[1] = nmeastr[i+2];
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	3302      	adds	r3, #2
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	18d3      	adds	r3, r2, r3
 8003042:	781a      	ldrb	r2, [r3, #0]
 8003044:	193b      	adds	r3, r7, r4
 8003046:	705a      	strb	r2, [r3, #1]
        check[2] = 0;
 8003048:	193b      	adds	r3, r7, r4
 800304a:	2200      	movs	r2, #0
 800304c:	709a      	strb	r2, [r3, #2]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	490e      	ldr	r1, [pc, #56]	; (800308c <GPS_validate+0xd4>)
 8003052:	2508      	movs	r5, #8
 8003054:	197b      	adds	r3, r7, r5
 8003056:	0018      	movs	r0, r3
 8003058:	f004 f9be 	bl	80073d8 <siprintf>
    return((checkcalcstr[0] == check[0])
 800305c:	197b      	adds	r3, r7, r5
 800305e:	781a      	ldrb	r2, [r3, #0]
 8003060:	193b      	adds	r3, r7, r4
 8003062:	781b      	ldrb	r3, [r3, #0]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8003064:	429a      	cmp	r2, r3
 8003066:	d10c      	bne.n	8003082 <GPS_validate+0xca>
 8003068:	e001      	b.n	800306e <GPS_validate+0xb6>
        return 0;// no checksum separator found there for invalid
 800306a:	2300      	movs	r3, #0
 800306c:	e00a      	b.n	8003084 <GPS_validate+0xcc>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800306e:	2308      	movs	r3, #8
 8003070:	18fb      	adds	r3, r7, r3
 8003072:	785a      	ldrb	r2, [r3, #1]
 8003074:	230c      	movs	r3, #12
 8003076:	18fb      	adds	r3, r7, r3
 8003078:	785b      	ldrb	r3, [r3, #1]
 800307a:	429a      	cmp	r2, r3
 800307c:	d101      	bne.n	8003082 <GPS_validate+0xca>
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <GPS_validate+0xcc>
 8003082:	2300      	movs	r3, #0
}
 8003084:	0018      	movs	r0, r3
 8003086:	46bd      	mov	sp, r7
 8003088:	b006      	add	sp, #24
 800308a:	bdb0      	pop	{r4, r5, r7, pc}
 800308c:	0800ba20 	.word	0x0800ba20

08003090 <GPS_parse>:
void GPS_parse(char *GPSstrParse){
 8003090:	b590      	push	{r4, r7, lr}
 8003092:	b08b      	sub	sp, #44	; 0x2c
 8003094:	af08      	add	r7, sp, #32
 8003096:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 8003098:	4944      	ldr	r1, [pc, #272]	; (80031ac <GPS_parse+0x11c>)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2206      	movs	r2, #6
 800309e:	0018      	movs	r0, r3
 80030a0:	f004 fa30 	bl	8007504 <strncmp>
 80030a4:	1e03      	subs	r3, r0, #0
 80030a6:	d12f      	bne.n	8003108 <GPS_parse+0x78>
    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 80030a8:	4c41      	ldr	r4, [pc, #260]	; (80031b0 <GPS_parse+0x120>)
 80030aa:	4a42      	ldr	r2, [pc, #264]	; (80031b4 <GPS_parse+0x124>)
 80030ac:	4942      	ldr	r1, [pc, #264]	; (80031b8 <GPS_parse+0x128>)
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	4b42      	ldr	r3, [pc, #264]	; (80031bc <GPS_parse+0x12c>)
 80030b2:	9307      	str	r3, [sp, #28]
 80030b4:	4b42      	ldr	r3, [pc, #264]	; (80031c0 <GPS_parse+0x130>)
 80030b6:	9306      	str	r3, [sp, #24]
 80030b8:	4b42      	ldr	r3, [pc, #264]	; (80031c4 <GPS_parse+0x134>)
 80030ba:	9305      	str	r3, [sp, #20]
 80030bc:	4b42      	ldr	r3, [pc, #264]	; (80031c8 <GPS_parse+0x138>)
 80030be:	9304      	str	r3, [sp, #16]
 80030c0:	4b42      	ldr	r3, [pc, #264]	; (80031cc <GPS_parse+0x13c>)
 80030c2:	9303      	str	r3, [sp, #12]
 80030c4:	4b42      	ldr	r3, [pc, #264]	; (80031d0 <GPS_parse+0x140>)
 80030c6:	9302      	str	r3, [sp, #8]
 80030c8:	4b42      	ldr	r3, [pc, #264]	; (80031d4 <GPS_parse+0x144>)
 80030ca:	9301      	str	r3, [sp, #4]
 80030cc:	4b42      	ldr	r3, [pc, #264]	; (80031d8 <GPS_parse+0x148>)
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	0023      	movs	r3, r4
 80030d2:	f004 f9a1 	bl	8007418 <siscanf>
 80030d6:	1e03      	subs	r3, r0, #0
 80030d8:	dd65      	ble.n	80031a6 <GPS_parse+0x116>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80030da:	4b40      	ldr	r3, [pc, #256]	; (80031dc <GPS_parse+0x14c>)
 80030dc:	691a      	ldr	r2, [r3, #16]
 80030de:	4b3f      	ldr	r3, [pc, #252]	; (80031dc <GPS_parse+0x14c>)
 80030e0:	7e1b      	ldrb	r3, [r3, #24]
 80030e2:	0019      	movs	r1, r3
 80030e4:	1c10      	adds	r0, r2, #0
 80030e6:	f000 f89d 	bl	8003224 <GPS_nmea_to_dec>
 80030ea:	1c02      	adds	r2, r0, #0
 80030ec:	4b3b      	ldr	r3, [pc, #236]	; (80031dc <GPS_parse+0x14c>)
 80030ee:	605a      	str	r2, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80030f0:	4b3a      	ldr	r3, [pc, #232]	; (80031dc <GPS_parse+0x14c>)
 80030f2:	68da      	ldr	r2, [r3, #12]
 80030f4:	4b39      	ldr	r3, [pc, #228]	; (80031dc <GPS_parse+0x14c>)
 80030f6:	7e5b      	ldrb	r3, [r3, #25]
 80030f8:	0019      	movs	r1, r3
 80030fa:	1c10      	adds	r0, r2, #0
 80030fc:	f000 f892 	bl	8003224 <GPS_nmea_to_dec>
 8003100:	1c02      	adds	r2, r0, #0
 8003102:	4b36      	ldr	r3, [pc, #216]	; (80031dc <GPS_parse+0x14c>)
 8003104:	601a      	str	r2, [r3, #0]
    		return;
 8003106:	e04e      	b.n	80031a6 <GPS_parse+0x116>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 8003108:	4935      	ldr	r1, [pc, #212]	; (80031e0 <GPS_parse+0x150>)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2206      	movs	r2, #6
 800310e:	0018      	movs	r0, r3
 8003110:	f004 f9f8 	bl	8007504 <strncmp>
 8003114:	1e03      	subs	r3, r0, #0
 8003116:	d113      	bne.n	8003140 <GPS_parse+0xb0>
    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 8003118:	4c25      	ldr	r4, [pc, #148]	; (80031b0 <GPS_parse+0x120>)
 800311a:	4a26      	ldr	r2, [pc, #152]	; (80031b4 <GPS_parse+0x124>)
 800311c:	4931      	ldr	r1, [pc, #196]	; (80031e4 <GPS_parse+0x154>)
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	4b31      	ldr	r3, [pc, #196]	; (80031e8 <GPS_parse+0x158>)
 8003122:	9305      	str	r3, [sp, #20]
 8003124:	4b31      	ldr	r3, [pc, #196]	; (80031ec <GPS_parse+0x15c>)
 8003126:	9304      	str	r3, [sp, #16]
 8003128:	4b31      	ldr	r3, [pc, #196]	; (80031f0 <GPS_parse+0x160>)
 800312a:	9303      	str	r3, [sp, #12]
 800312c:	4b28      	ldr	r3, [pc, #160]	; (80031d0 <GPS_parse+0x140>)
 800312e:	9302      	str	r3, [sp, #8]
 8003130:	4b28      	ldr	r3, [pc, #160]	; (80031d4 <GPS_parse+0x144>)
 8003132:	9301      	str	r3, [sp, #4]
 8003134:	4b28      	ldr	r3, [pc, #160]	; (80031d8 <GPS_parse+0x148>)
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	0023      	movs	r3, r4
 800313a:	f004 f96d 	bl	8007418 <siscanf>
 800313e:	e032      	b.n	80031a6 <GPS_parse+0x116>
    		return;

    }
    else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 8003140:	492c      	ldr	r1, [pc, #176]	; (80031f4 <GPS_parse+0x164>)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2206      	movs	r2, #6
 8003146:	0018      	movs	r0, r3
 8003148:	f004 f9dc 	bl	8007504 <strncmp>
 800314c:	1e03      	subs	r3, r0, #0
 800314e:	d10f      	bne.n	8003170 <GPS_parse+0xe0>
        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 8003150:	4c21      	ldr	r4, [pc, #132]	; (80031d8 <GPS_parse+0x148>)
 8003152:	4a17      	ldr	r2, [pc, #92]	; (80031b0 <GPS_parse+0x120>)
 8003154:	4928      	ldr	r1, [pc, #160]	; (80031f8 <GPS_parse+0x168>)
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	4b28      	ldr	r3, [pc, #160]	; (80031fc <GPS_parse+0x16c>)
 800315a:	9303      	str	r3, [sp, #12]
 800315c:	4b15      	ldr	r3, [pc, #84]	; (80031b4 <GPS_parse+0x124>)
 800315e:	9302      	str	r3, [sp, #8]
 8003160:	4b1b      	ldr	r3, [pc, #108]	; (80031d0 <GPS_parse+0x140>)
 8003162:	9301      	str	r3, [sp, #4]
 8003164:	4b1b      	ldr	r3, [pc, #108]	; (80031d4 <GPS_parse+0x144>)
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	0023      	movs	r3, r4
 800316a:	f004 f955 	bl	8007418 <siscanf>
 800316e:	e01a      	b.n	80031a6 <GPS_parse+0x116>
            return;
    }
    else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 8003170:	4923      	ldr	r1, [pc, #140]	; (8003200 <GPS_parse+0x170>)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2206      	movs	r2, #6
 8003176:	0018      	movs	r0, r3
 8003178:	f004 f9c4 	bl	8007504 <strncmp>
 800317c:	1e03      	subs	r3, r0, #0
 800317e:	d112      	bne.n	80031a6 <GPS_parse+0x116>
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8003180:	4c20      	ldr	r4, [pc, #128]	; (8003204 <GPS_parse+0x174>)
 8003182:	4a21      	ldr	r2, [pc, #132]	; (8003208 <GPS_parse+0x178>)
 8003184:	4921      	ldr	r1, [pc, #132]	; (800320c <GPS_parse+0x17c>)
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	4b21      	ldr	r3, [pc, #132]	; (8003210 <GPS_parse+0x180>)
 800318a:	9305      	str	r3, [sp, #20]
 800318c:	4b21      	ldr	r3, [pc, #132]	; (8003214 <GPS_parse+0x184>)
 800318e:	9304      	str	r3, [sp, #16]
 8003190:	4b21      	ldr	r3, [pc, #132]	; (8003218 <GPS_parse+0x188>)
 8003192:	9303      	str	r3, [sp, #12]
 8003194:	4b16      	ldr	r3, [pc, #88]	; (80031f0 <GPS_parse+0x160>)
 8003196:	9302      	str	r3, [sp, #8]
 8003198:	4b20      	ldr	r3, [pc, #128]	; (800321c <GPS_parse+0x18c>)
 800319a:	9301      	str	r3, [sp, #4]
 800319c:	4b20      	ldr	r3, [pc, #128]	; (8003220 <GPS_parse+0x190>)
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	0023      	movs	r3, r4
 80031a2:	f004 f939 	bl	8007418 <siscanf>
            return;
    }
}
 80031a6:	46bd      	mov	sp, r7
 80031a8:	b003      	add	sp, #12
 80031aa:	bd90      	pop	{r4, r7, pc}
 80031ac:	0800ba28 	.word	0x0800ba28
 80031b0:	20000294 	.word	0x20000294
 80031b4:	20000298 	.word	0x20000298
 80031b8:	0800ba30 	.word	0x0800ba30
 80031bc:	200002b0 	.word	0x200002b0
 80031c0:	200002ac 	.word	0x200002ac
 80031c4:	200002a8 	.word	0x200002a8
 80031c8:	200002a4 	.word	0x200002a4
 80031cc:	200002a0 	.word	0x200002a0
 80031d0:	2000029d 	.word	0x2000029d
 80031d4:	20000290 	.word	0x20000290
 80031d8:	2000029c 	.word	0x2000029c
 80031dc:	20000284 	.word	0x20000284
 80031e0:	0800ba58 	.word	0x0800ba58
 80031e4:	0800ba60 	.word	0x0800ba60
 80031e8:	200002bc 	.word	0x200002bc
 80031ec:	200002b8 	.word	0x200002b8
 80031f0:	200002b4 	.word	0x200002b4
 80031f4:	0800ba80 	.word	0x0800ba80
 80031f8:	0800ba88 	.word	0x0800ba88
 80031fc:	200002c0 	.word	0x200002c0
 8003200:	0800baa4 	.word	0x0800baa4
 8003204:	200002c8 	.word	0x200002c8
 8003208:	200002c4 	.word	0x200002c4
 800320c:	0800baac 	.word	0x0800baac
 8003210:	200002d8 	.word	0x200002d8
 8003214:	200002d4 	.word	0x200002d4
 8003218:	200002d1 	.word	0x200002d1
 800321c:	200002d0 	.word	0x200002d0
 8003220:	200002cc 	.word	0x200002cc

08003224 <GPS_nmea_to_dec>:
float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	000a      	movs	r2, r1
 800322e:	1cfb      	adds	r3, r7, #3
 8003230:	701a      	strb	r2, [r3, #0]
    int degree = (int)(deg_coord/100);
 8003232:	491c      	ldr	r1, [pc, #112]	; (80032a4 <GPS_nmea_to_dec+0x80>)
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7fd fc5f 	bl	8000af8 <__aeabi_fdiv>
 800323a:	1c03      	adds	r3, r0, #0
 800323c:	1c18      	adds	r0, r3, #0
 800323e:	f7fd ff21 	bl	8001084 <__aeabi_f2iz>
 8003242:	0003      	movs	r3, r0
 8003244:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	2264      	movs	r2, #100	; 0x64
 800324a:	4353      	muls	r3, r2
 800324c:	0018      	movs	r0, r3
 800324e:	f7fd ff39 	bl	80010c4 <__aeabi_i2f>
 8003252:	1c03      	adds	r3, r0, #0
 8003254:	1c19      	adds	r1, r3, #0
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7fd fd66 	bl	8000d28 <__aeabi_fsub>
 800325c:	1c03      	adds	r3, r0, #0
 800325e:	60fb      	str	r3, [r7, #12]
    float dec_deg = minutes / 60;
 8003260:	4911      	ldr	r1, [pc, #68]	; (80032a8 <GPS_nmea_to_dec+0x84>)
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f7fd fc48 	bl	8000af8 <__aeabi_fdiv>
 8003268:	1c03      	adds	r3, r0, #0
 800326a:	60bb      	str	r3, [r7, #8]
    float decimal = degree + dec_deg;
 800326c:	6938      	ldr	r0, [r7, #16]
 800326e:	f7fd ff29 	bl	80010c4 <__aeabi_i2f>
 8003272:	1c03      	adds	r3, r0, #0
 8003274:	1c19      	adds	r1, r3, #0
 8003276:	68b8      	ldr	r0, [r7, #8]
 8003278:	f7fd faa0 	bl	80007bc <__aeabi_fadd>
 800327c:	1c03      	adds	r3, r0, #0
 800327e:	617b      	str	r3, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8003280:	1cfb      	adds	r3, r7, #3
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	2b53      	cmp	r3, #83	; 0x53
 8003286:	d003      	beq.n	8003290 <GPS_nmea_to_dec+0x6c>
 8003288:	1cfb      	adds	r3, r7, #3
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	2b57      	cmp	r3, #87	; 0x57
 800328e:	d104      	bne.n	800329a <GPS_nmea_to_dec+0x76>
        decimal *= -1;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	2280      	movs	r2, #128	; 0x80
 8003294:	0612      	lsls	r2, r2, #24
 8003296:	4053      	eors	r3, r2
 8003298:	617b      	str	r3, [r7, #20]
    }
    return decimal;
 800329a:	697b      	ldr	r3, [r7, #20]
}
 800329c:	1c18      	adds	r0, r3, #0
 800329e:	46bd      	mov	sp, r7
 80032a0:	b006      	add	sp, #24
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	42c80000 	.word	0x42c80000
 80032a8:	42700000 	.word	0x42700000

080032ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80032ac:	b5b0      	push	{r4, r5, r7, lr}
 80032ae:	b090      	sub	sp, #64	; 0x40
 80032b0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80032b2:	f000 fb0b 	bl	80038cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80032b6:	f000 f831 	bl	800331c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80032ba:	f000 f903 	bl	80034c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80032be:	f000 f8d1 	bl	8003464 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80032c2:	f000 f89f 	bl	8003404 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  GPS_Init();
 80032c6:	f7ff fe2b 	bl	8002f20 <GPS_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 sprintf(buffer, "Latitude: %f Longitude: %f \n\r", GPS.dec_latitude, GPS.dec_longitude);
 80032ca:	4b11      	ldr	r3, [pc, #68]	; (8003310 <main+0x64>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	1c18      	adds	r0, r3, #0
 80032d0:	f7ff fd2c 	bl	8002d2c <__aeabi_f2d>
 80032d4:	0004      	movs	r4, r0
 80032d6:	000d      	movs	r5, r1
 80032d8:	4b0d      	ldr	r3, [pc, #52]	; (8003310 <main+0x64>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	1c18      	adds	r0, r3, #0
 80032de:	f7ff fd25 	bl	8002d2c <__aeabi_f2d>
 80032e2:	0002      	movs	r2, r0
 80032e4:	000b      	movs	r3, r1
 80032e6:	490b      	ldr	r1, [pc, #44]	; (8003314 <main+0x68>)
 80032e8:	1d38      	adds	r0, r7, #4
 80032ea:	9200      	str	r2, [sp, #0]
 80032ec:	9301      	str	r3, [sp, #4]
 80032ee:	0022      	movs	r2, r4
 80032f0:	002b      	movs	r3, r5
 80032f2:	f004 f871 	bl	80073d8 <siprintf>
	 HAL_UART_Transmit(&huart2,(uint8_t *) buffer, strlen(buffer), 1000);
 80032f6:	1d3b      	adds	r3, r7, #4
 80032f8:	0018      	movs	r0, r3
 80032fa:	f7fc ff05 	bl	8000108 <strlen>
 80032fe:	0003      	movs	r3, r0
 8003300:	b29a      	uxth	r2, r3
 8003302:	23fa      	movs	r3, #250	; 0xfa
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	1d39      	adds	r1, r7, #4
 8003308:	4803      	ldr	r0, [pc, #12]	; (8003318 <main+0x6c>)
 800330a:	f001 fe1d 	bl	8004f48 <HAL_UART_Transmit>
	 sprintf(buffer, "Latitude: %f Longitude: %f \n\r", GPS.dec_latitude, GPS.dec_longitude);
 800330e:	e7dc      	b.n	80032ca <main+0x1e>
 8003310:	20000284 	.word	0x20000284
 8003314:	0800bacc 	.word	0x0800bacc
 8003318:	20000364 	.word	0x20000364

0800331c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800331c:	b590      	push	{r4, r7, lr}
 800331e:	b09f      	sub	sp, #124	; 0x7c
 8003320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003322:	2440      	movs	r4, #64	; 0x40
 8003324:	193b      	adds	r3, r7, r4
 8003326:	0018      	movs	r0, r3
 8003328:	2338      	movs	r3, #56	; 0x38
 800332a:	001a      	movs	r2, r3
 800332c:	2100      	movs	r1, #0
 800332e:	f003 f9d1 	bl	80066d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003332:	232c      	movs	r3, #44	; 0x2c
 8003334:	18fb      	adds	r3, r7, r3
 8003336:	0018      	movs	r0, r3
 8003338:	2314      	movs	r3, #20
 800333a:	001a      	movs	r2, r3
 800333c:	2100      	movs	r1, #0
 800333e:	f003 f9c9 	bl	80066d4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003342:	1d3b      	adds	r3, r7, #4
 8003344:	0018      	movs	r0, r3
 8003346:	2328      	movs	r3, #40	; 0x28
 8003348:	001a      	movs	r2, r3
 800334a:	2100      	movs	r1, #0
 800334c:	f003 f9c2 	bl	80066d4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003350:	4b2a      	ldr	r3, [pc, #168]	; (80033fc <SystemClock_Config+0xe0>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a2a      	ldr	r2, [pc, #168]	; (8003400 <SystemClock_Config+0xe4>)
 8003356:	401a      	ands	r2, r3
 8003358:	4b28      	ldr	r3, [pc, #160]	; (80033fc <SystemClock_Config+0xe0>)
 800335a:	2180      	movs	r1, #128	; 0x80
 800335c:	0109      	lsls	r1, r1, #4
 800335e:	430a      	orrs	r2, r1
 8003360:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003362:	0021      	movs	r1, r4
 8003364:	187b      	adds	r3, r7, r1
 8003366:	2201      	movs	r2, #1
 8003368:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800336a:	187b      	adds	r3, r7, r1
 800336c:	2280      	movs	r2, #128	; 0x80
 800336e:	0252      	lsls	r2, r2, #9
 8003370:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003372:	187b      	adds	r3, r7, r1
 8003374:	2202      	movs	r2, #2
 8003376:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003378:	187b      	adds	r3, r7, r1
 800337a:	2280      	movs	r2, #128	; 0x80
 800337c:	0252      	lsls	r2, r2, #9
 800337e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 8003380:	187b      	adds	r3, r7, r1
 8003382:	22c0      	movs	r2, #192	; 0xc0
 8003384:	0312      	lsls	r2, r2, #12
 8003386:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8003388:	187b      	adds	r3, r7, r1
 800338a:	2280      	movs	r2, #128	; 0x80
 800338c:	03d2      	lsls	r2, r2, #15
 800338e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003390:	187b      	adds	r3, r7, r1
 8003392:	0018      	movs	r0, r3
 8003394:	f000 fdee 	bl	8003f74 <HAL_RCC_OscConfig>
 8003398:	1e03      	subs	r3, r0, #0
 800339a:	d001      	beq.n	80033a0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800339c:	f000 f8ec 	bl	8003578 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033a0:	212c      	movs	r1, #44	; 0x2c
 80033a2:	187b      	adds	r3, r7, r1
 80033a4:	220f      	movs	r2, #15
 80033a6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033a8:	187b      	adds	r3, r7, r1
 80033aa:	2203      	movs	r2, #3
 80033ac:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033ae:	187b      	adds	r3, r7, r1
 80033b0:	2200      	movs	r2, #0
 80033b2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80033b4:	187b      	adds	r3, r7, r1
 80033b6:	2200      	movs	r2, #0
 80033b8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80033ba:	187b      	adds	r3, r7, r1
 80033bc:	2200      	movs	r2, #0
 80033be:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80033c0:	187b      	adds	r3, r7, r1
 80033c2:	2101      	movs	r1, #1
 80033c4:	0018      	movs	r0, r3
 80033c6:	f001 f9a9 	bl	800471c <HAL_RCC_ClockConfig>
 80033ca:	1e03      	subs	r3, r0, #0
 80033cc:	d001      	beq.n	80033d2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80033ce:	f000 f8d3 	bl	8003578 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80033d2:	1d3b      	adds	r3, r7, #4
 80033d4:	2203      	movs	r2, #3
 80033d6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80033d8:	1d3b      	adds	r3, r7, #4
 80033da:	2200      	movs	r2, #0
 80033dc:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80033de:	1d3b      	adds	r3, r7, #4
 80033e0:	2200      	movs	r2, #0
 80033e2:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033e4:	1d3b      	adds	r3, r7, #4
 80033e6:	0018      	movs	r0, r3
 80033e8:	f001 fbbc 	bl	8004b64 <HAL_RCCEx_PeriphCLKConfig>
 80033ec:	1e03      	subs	r3, r0, #0
 80033ee:	d001      	beq.n	80033f4 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80033f0:	f000 f8c2 	bl	8003578 <Error_Handler>
  }
}
 80033f4:	46c0      	nop			; (mov r8, r8)
 80033f6:	46bd      	mov	sp, r7
 80033f8:	b01f      	add	sp, #124	; 0x7c
 80033fa:	bd90      	pop	{r4, r7, pc}
 80033fc:	40007000 	.word	0x40007000
 8003400:	ffffe7ff 	.word	0xffffe7ff

08003404 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003408:	4b14      	ldr	r3, [pc, #80]	; (800345c <MX_USART1_UART_Init+0x58>)
 800340a:	4a15      	ldr	r2, [pc, #84]	; (8003460 <MX_USART1_UART_Init+0x5c>)
 800340c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800340e:	4b13      	ldr	r3, [pc, #76]	; (800345c <MX_USART1_UART_Init+0x58>)
 8003410:	2296      	movs	r2, #150	; 0x96
 8003412:	0192      	lsls	r2, r2, #6
 8003414:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003416:	4b11      	ldr	r3, [pc, #68]	; (800345c <MX_USART1_UART_Init+0x58>)
 8003418:	2200      	movs	r2, #0
 800341a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800341c:	4b0f      	ldr	r3, [pc, #60]	; (800345c <MX_USART1_UART_Init+0x58>)
 800341e:	2200      	movs	r2, #0
 8003420:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003422:	4b0e      	ldr	r3, [pc, #56]	; (800345c <MX_USART1_UART_Init+0x58>)
 8003424:	2200      	movs	r2, #0
 8003426:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003428:	4b0c      	ldr	r3, [pc, #48]	; (800345c <MX_USART1_UART_Init+0x58>)
 800342a:	220c      	movs	r2, #12
 800342c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800342e:	4b0b      	ldr	r3, [pc, #44]	; (800345c <MX_USART1_UART_Init+0x58>)
 8003430:	2200      	movs	r2, #0
 8003432:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003434:	4b09      	ldr	r3, [pc, #36]	; (800345c <MX_USART1_UART_Init+0x58>)
 8003436:	2200      	movs	r2, #0
 8003438:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800343a:	4b08      	ldr	r3, [pc, #32]	; (800345c <MX_USART1_UART_Init+0x58>)
 800343c:	2200      	movs	r2, #0
 800343e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003440:	4b06      	ldr	r3, [pc, #24]	; (800345c <MX_USART1_UART_Init+0x58>)
 8003442:	2200      	movs	r2, #0
 8003444:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003446:	4b05      	ldr	r3, [pc, #20]	; (800345c <MX_USART1_UART_Init+0x58>)
 8003448:	0018      	movs	r0, r3
 800344a:	f001 fd29 	bl	8004ea0 <HAL_UART_Init>
 800344e:	1e03      	subs	r3, r0, #0
 8003450:	d001      	beq.n	8003456 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003452:	f000 f891 	bl	8003578 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003456:	46c0      	nop			; (mov r8, r8)
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	200002dc 	.word	0x200002dc
 8003460:	40013800 	.word	0x40013800

08003464 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003468:	4b14      	ldr	r3, [pc, #80]	; (80034bc <MX_USART2_UART_Init+0x58>)
 800346a:	4a15      	ldr	r2, [pc, #84]	; (80034c0 <MX_USART2_UART_Init+0x5c>)
 800346c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800346e:	4b13      	ldr	r3, [pc, #76]	; (80034bc <MX_USART2_UART_Init+0x58>)
 8003470:	22e1      	movs	r2, #225	; 0xe1
 8003472:	0252      	lsls	r2, r2, #9
 8003474:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003476:	4b11      	ldr	r3, [pc, #68]	; (80034bc <MX_USART2_UART_Init+0x58>)
 8003478:	2200      	movs	r2, #0
 800347a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800347c:	4b0f      	ldr	r3, [pc, #60]	; (80034bc <MX_USART2_UART_Init+0x58>)
 800347e:	2200      	movs	r2, #0
 8003480:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003482:	4b0e      	ldr	r3, [pc, #56]	; (80034bc <MX_USART2_UART_Init+0x58>)
 8003484:	2200      	movs	r2, #0
 8003486:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003488:	4b0c      	ldr	r3, [pc, #48]	; (80034bc <MX_USART2_UART_Init+0x58>)
 800348a:	220c      	movs	r2, #12
 800348c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800348e:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <MX_USART2_UART_Init+0x58>)
 8003490:	2200      	movs	r2, #0
 8003492:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003494:	4b09      	ldr	r3, [pc, #36]	; (80034bc <MX_USART2_UART_Init+0x58>)
 8003496:	2200      	movs	r2, #0
 8003498:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800349a:	4b08      	ldr	r3, [pc, #32]	; (80034bc <MX_USART2_UART_Init+0x58>)
 800349c:	2200      	movs	r2, #0
 800349e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80034a0:	4b06      	ldr	r3, [pc, #24]	; (80034bc <MX_USART2_UART_Init+0x58>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80034a6:	4b05      	ldr	r3, [pc, #20]	; (80034bc <MX_USART2_UART_Init+0x58>)
 80034a8:	0018      	movs	r0, r3
 80034aa:	f001 fcf9 	bl	8004ea0 <HAL_UART_Init>
 80034ae:	1e03      	subs	r3, r0, #0
 80034b0:	d001      	beq.n	80034b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80034b2:	f000 f861 	bl	8003578 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	20000364 	.word	0x20000364
 80034c0:	40004400 	.word	0x40004400

080034c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80034c4:	b590      	push	{r4, r7, lr}
 80034c6:	b089      	sub	sp, #36	; 0x24
 80034c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034ca:	240c      	movs	r4, #12
 80034cc:	193b      	adds	r3, r7, r4
 80034ce:	0018      	movs	r0, r3
 80034d0:	2314      	movs	r3, #20
 80034d2:	001a      	movs	r2, r3
 80034d4:	2100      	movs	r1, #0
 80034d6:	f003 f8fd 	bl	80066d4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034da:	4b1c      	ldr	r3, [pc, #112]	; (800354c <MX_GPIO_Init+0x88>)
 80034dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034de:	4b1b      	ldr	r3, [pc, #108]	; (800354c <MX_GPIO_Init+0x88>)
 80034e0:	2104      	movs	r1, #4
 80034e2:	430a      	orrs	r2, r1
 80034e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80034e6:	4b19      	ldr	r3, [pc, #100]	; (800354c <MX_GPIO_Init+0x88>)
 80034e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ea:	2204      	movs	r2, #4
 80034ec:	4013      	ands	r3, r2
 80034ee:	60bb      	str	r3, [r7, #8]
 80034f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80034f2:	4b16      	ldr	r3, [pc, #88]	; (800354c <MX_GPIO_Init+0x88>)
 80034f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f6:	4b15      	ldr	r3, [pc, #84]	; (800354c <MX_GPIO_Init+0x88>)
 80034f8:	2180      	movs	r1, #128	; 0x80
 80034fa:	430a      	orrs	r2, r1
 80034fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80034fe:	4b13      	ldr	r3, [pc, #76]	; (800354c <MX_GPIO_Init+0x88>)
 8003500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003502:	2280      	movs	r2, #128	; 0x80
 8003504:	4013      	ands	r3, r2
 8003506:	607b      	str	r3, [r7, #4]
 8003508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800350a:	4b10      	ldr	r3, [pc, #64]	; (800354c <MX_GPIO_Init+0x88>)
 800350c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800350e:	4b0f      	ldr	r3, [pc, #60]	; (800354c <MX_GPIO_Init+0x88>)
 8003510:	2101      	movs	r1, #1
 8003512:	430a      	orrs	r2, r1
 8003514:	62da      	str	r2, [r3, #44]	; 0x2c
 8003516:	4b0d      	ldr	r3, [pc, #52]	; (800354c <MX_GPIO_Init+0x88>)
 8003518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351a:	2201      	movs	r2, #1
 800351c:	4013      	ands	r3, r2
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003522:	193b      	adds	r3, r7, r4
 8003524:	2280      	movs	r2, #128	; 0x80
 8003526:	0192      	lsls	r2, r2, #6
 8003528:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800352a:	193b      	adds	r3, r7, r4
 800352c:	2284      	movs	r2, #132	; 0x84
 800352e:	0392      	lsls	r2, r2, #14
 8003530:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003532:	193b      	adds	r3, r7, r4
 8003534:	2200      	movs	r2, #0
 8003536:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003538:	193b      	adds	r3, r7, r4
 800353a:	4a05      	ldr	r2, [pc, #20]	; (8003550 <MX_GPIO_Init+0x8c>)
 800353c:	0019      	movs	r1, r3
 800353e:	0010      	movs	r0, r2
 8003540:	f000 fb9a 	bl	8003c78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003544:	46c0      	nop			; (mov r8, r8)
 8003546:	46bd      	mov	sp, r7
 8003548:	b009      	add	sp, #36	; 0x24
 800354a:	bd90      	pop	{r4, r7, pc}
 800354c:	40021000 	.word	0x40021000
 8003550:	50000800 	.word	0x50000800

08003554 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a04      	ldr	r2, [pc, #16]	; (8003574 <HAL_UART_RxCpltCallback+0x20>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d101      	bne.n	800356a <HAL_UART_RxCpltCallback+0x16>
	{
		GPS_UART_CallBack();
 8003566:	f7ff fceb 	bl	8002f40 <GPS_UART_CallBack>
	}
}
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	46bd      	mov	sp, r7
 800356e:	b002      	add	sp, #8
 8003570:	bd80      	pop	{r7, pc}
 8003572:	46c0      	nop			; (mov r8, r8)
 8003574:	40013800 	.word	0x40013800

08003578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800357c:	b672      	cpsid	i
}
 800357e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003580:	e7fe      	b.n	8003580 <Error_Handler+0x8>
	...

08003584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003588:	4b07      	ldr	r3, [pc, #28]	; (80035a8 <HAL_MspInit+0x24>)
 800358a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800358c:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <HAL_MspInit+0x24>)
 800358e:	2101      	movs	r1, #1
 8003590:	430a      	orrs	r2, r1
 8003592:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003594:	4b04      	ldr	r3, [pc, #16]	; (80035a8 <HAL_MspInit+0x24>)
 8003596:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003598:	4b03      	ldr	r3, [pc, #12]	; (80035a8 <HAL_MspInit+0x24>)
 800359a:	2180      	movs	r1, #128	; 0x80
 800359c:	0549      	lsls	r1, r1, #21
 800359e:	430a      	orrs	r2, r1
 80035a0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035a2:	46c0      	nop			; (mov r8, r8)
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40021000 	.word	0x40021000

080035ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035ac:	b590      	push	{r4, r7, lr}
 80035ae:	b08b      	sub	sp, #44	; 0x2c
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b4:	2414      	movs	r4, #20
 80035b6:	193b      	adds	r3, r7, r4
 80035b8:	0018      	movs	r0, r3
 80035ba:	2314      	movs	r3, #20
 80035bc:	001a      	movs	r2, r3
 80035be:	2100      	movs	r1, #0
 80035c0:	f003 f888 	bl	80066d4 <memset>
  if(huart->Instance==USART1)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a34      	ldr	r2, [pc, #208]	; (800369c <HAL_UART_MspInit+0xf0>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d133      	bne.n	8003636 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80035ce:	4b34      	ldr	r3, [pc, #208]	; (80036a0 <HAL_UART_MspInit+0xf4>)
 80035d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035d2:	4b33      	ldr	r3, [pc, #204]	; (80036a0 <HAL_UART_MspInit+0xf4>)
 80035d4:	2180      	movs	r1, #128	; 0x80
 80035d6:	01c9      	lsls	r1, r1, #7
 80035d8:	430a      	orrs	r2, r1
 80035da:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035dc:	4b30      	ldr	r3, [pc, #192]	; (80036a0 <HAL_UART_MspInit+0xf4>)
 80035de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e0:	4b2f      	ldr	r3, [pc, #188]	; (80036a0 <HAL_UART_MspInit+0xf4>)
 80035e2:	2101      	movs	r1, #1
 80035e4:	430a      	orrs	r2, r1
 80035e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80035e8:	4b2d      	ldr	r3, [pc, #180]	; (80036a0 <HAL_UART_MspInit+0xf4>)
 80035ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ec:	2201      	movs	r2, #1
 80035ee:	4013      	ands	r3, r2
 80035f0:	613b      	str	r3, [r7, #16]
 80035f2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80035f4:	193b      	adds	r3, r7, r4
 80035f6:	22c0      	movs	r2, #192	; 0xc0
 80035f8:	00d2      	lsls	r2, r2, #3
 80035fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035fc:	0021      	movs	r1, r4
 80035fe:	187b      	adds	r3, r7, r1
 8003600:	2202      	movs	r2, #2
 8003602:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003604:	187b      	adds	r3, r7, r1
 8003606:	2200      	movs	r2, #0
 8003608:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800360a:	187b      	adds	r3, r7, r1
 800360c:	2203      	movs	r2, #3
 800360e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003610:	187b      	adds	r3, r7, r1
 8003612:	2204      	movs	r2, #4
 8003614:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003616:	187a      	adds	r2, r7, r1
 8003618:	23a0      	movs	r3, #160	; 0xa0
 800361a:	05db      	lsls	r3, r3, #23
 800361c:	0011      	movs	r1, r2
 800361e:	0018      	movs	r0, r3
 8003620:	f000 fb2a 	bl	8003c78 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003624:	2200      	movs	r2, #0
 8003626:	2100      	movs	r1, #0
 8003628:	201b      	movs	r0, #27
 800362a:	f000 fa6b 	bl	8003b04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800362e:	201b      	movs	r0, #27
 8003630:	f000 fa7d 	bl	8003b2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003634:	e02e      	b.n	8003694 <HAL_UART_MspInit+0xe8>
  else if(huart->Instance==USART2)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a1a      	ldr	r2, [pc, #104]	; (80036a4 <HAL_UART_MspInit+0xf8>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d129      	bne.n	8003694 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003640:	4b17      	ldr	r3, [pc, #92]	; (80036a0 <HAL_UART_MspInit+0xf4>)
 8003642:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003644:	4b16      	ldr	r3, [pc, #88]	; (80036a0 <HAL_UART_MspInit+0xf4>)
 8003646:	2180      	movs	r1, #128	; 0x80
 8003648:	0289      	lsls	r1, r1, #10
 800364a:	430a      	orrs	r2, r1
 800364c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800364e:	4b14      	ldr	r3, [pc, #80]	; (80036a0 <HAL_UART_MspInit+0xf4>)
 8003650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003652:	4b13      	ldr	r3, [pc, #76]	; (80036a0 <HAL_UART_MspInit+0xf4>)
 8003654:	2101      	movs	r1, #1
 8003656:	430a      	orrs	r2, r1
 8003658:	62da      	str	r2, [r3, #44]	; 0x2c
 800365a:	4b11      	ldr	r3, [pc, #68]	; (80036a0 <HAL_UART_MspInit+0xf4>)
 800365c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365e:	2201      	movs	r2, #1
 8003660:	4013      	ands	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003666:	2114      	movs	r1, #20
 8003668:	187b      	adds	r3, r7, r1
 800366a:	220c      	movs	r2, #12
 800366c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366e:	187b      	adds	r3, r7, r1
 8003670:	2202      	movs	r2, #2
 8003672:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003674:	187b      	adds	r3, r7, r1
 8003676:	2200      	movs	r2, #0
 8003678:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800367a:	187b      	adds	r3, r7, r1
 800367c:	2203      	movs	r2, #3
 800367e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003680:	187b      	adds	r3, r7, r1
 8003682:	2204      	movs	r2, #4
 8003684:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003686:	187a      	adds	r2, r7, r1
 8003688:	23a0      	movs	r3, #160	; 0xa0
 800368a:	05db      	lsls	r3, r3, #23
 800368c:	0011      	movs	r1, r2
 800368e:	0018      	movs	r0, r3
 8003690:	f000 faf2 	bl	8003c78 <HAL_GPIO_Init>
}
 8003694:	46c0      	nop			; (mov r8, r8)
 8003696:	46bd      	mov	sp, r7
 8003698:	b00b      	add	sp, #44	; 0x2c
 800369a:	bd90      	pop	{r4, r7, pc}
 800369c:	40013800 	.word	0x40013800
 80036a0:	40021000 	.word	0x40021000
 80036a4:	40004400 	.word	0x40004400

080036a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036ac:	e7fe      	b.n	80036ac <NMI_Handler+0x4>

080036ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036b2:	e7fe      	b.n	80036b2 <HardFault_Handler+0x4>

080036b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80036b8:	46c0      	nop			; (mov r8, r8)
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036c2:	46c0      	nop			; (mov r8, r8)
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036cc:	f000 f952 	bl	8003974 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036d0:	46c0      	nop			; (mov r8, r8)
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
	...

080036d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80036dc:	4b03      	ldr	r3, [pc, #12]	; (80036ec <USART1_IRQHandler+0x14>)
 80036de:	0018      	movs	r0, r3
 80036e0:	f001 fd30 	bl	8005144 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80036e4:	46c0      	nop			; (mov r8, r8)
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	200002dc 	.word	0x200002dc

080036f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
  return 1;
 80036f4:	2301      	movs	r3, #1
}
 80036f6:	0018      	movs	r0, r3
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <_kill>:

int _kill(int pid, int sig)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003706:	f002 ffbb 	bl	8006680 <__errno>
 800370a:	0003      	movs	r3, r0
 800370c:	2216      	movs	r2, #22
 800370e:	601a      	str	r2, [r3, #0]
  return -1;
 8003710:	2301      	movs	r3, #1
 8003712:	425b      	negs	r3, r3
}
 8003714:	0018      	movs	r0, r3
 8003716:	46bd      	mov	sp, r7
 8003718:	b002      	add	sp, #8
 800371a:	bd80      	pop	{r7, pc}

0800371c <_exit>:

void _exit (int status)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003724:	2301      	movs	r3, #1
 8003726:	425a      	negs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	0011      	movs	r1, r2
 800372c:	0018      	movs	r0, r3
 800372e:	f7ff ffe5 	bl	80036fc <_kill>
  while (1) {}    /* Make sure we hang here */
 8003732:	e7fe      	b.n	8003732 <_exit+0x16>

08003734 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003740:	2300      	movs	r3, #0
 8003742:	617b      	str	r3, [r7, #20]
 8003744:	e00a      	b.n	800375c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003746:	e000      	b.n	800374a <_read+0x16>
 8003748:	bf00      	nop
 800374a:	0001      	movs	r1, r0
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	1c5a      	adds	r2, r3, #1
 8003750:	60ba      	str	r2, [r7, #8]
 8003752:	b2ca      	uxtb	r2, r1
 8003754:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	3301      	adds	r3, #1
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	429a      	cmp	r2, r3
 8003762:	dbf0      	blt.n	8003746 <_read+0x12>
  }

  return len;
 8003764:	687b      	ldr	r3, [r7, #4]
}
 8003766:	0018      	movs	r0, r3
 8003768:	46bd      	mov	sp, r7
 800376a:	b006      	add	sp, #24
 800376c:	bd80      	pop	{r7, pc}

0800376e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b086      	sub	sp, #24
 8003772:	af00      	add	r7, sp, #0
 8003774:	60f8      	str	r0, [r7, #12]
 8003776:	60b9      	str	r1, [r7, #8]
 8003778:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800377a:	2300      	movs	r3, #0
 800377c:	617b      	str	r3, [r7, #20]
 800377e:	e009      	b.n	8003794 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	1c5a      	adds	r2, r3, #1
 8003784:	60ba      	str	r2, [r7, #8]
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	0018      	movs	r0, r3
 800378a:	e000      	b.n	800378e <_write+0x20>
 800378c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	3301      	adds	r3, #1
 8003792:	617b      	str	r3, [r7, #20]
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	429a      	cmp	r2, r3
 800379a:	dbf1      	blt.n	8003780 <_write+0x12>
  }
  return len;
 800379c:	687b      	ldr	r3, [r7, #4]
}
 800379e:	0018      	movs	r0, r3
 80037a0:	46bd      	mov	sp, r7
 80037a2:	b006      	add	sp, #24
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <_close>:

int _close(int file)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b082      	sub	sp, #8
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80037ae:	2301      	movs	r3, #1
 80037b0:	425b      	negs	r3, r3
}
 80037b2:	0018      	movs	r0, r3
 80037b4:	46bd      	mov	sp, r7
 80037b6:	b002      	add	sp, #8
 80037b8:	bd80      	pop	{r7, pc}

080037ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b082      	sub	sp, #8
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	2280      	movs	r2, #128	; 0x80
 80037c8:	0192      	lsls	r2, r2, #6
 80037ca:	605a      	str	r2, [r3, #4]
  return 0;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	0018      	movs	r0, r3
 80037d0:	46bd      	mov	sp, r7
 80037d2:	b002      	add	sp, #8
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <_isatty>:

int _isatty(int file)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b082      	sub	sp, #8
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80037de:	2301      	movs	r3, #1
}
 80037e0:	0018      	movs	r0, r3
 80037e2:	46bd      	mov	sp, r7
 80037e4:	b002      	add	sp, #8
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	0018      	movs	r0, r3
 80037f8:	46bd      	mov	sp, r7
 80037fa:	b004      	add	sp, #16
 80037fc:	bd80      	pop	{r7, pc}
	...

08003800 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003808:	4a14      	ldr	r2, [pc, #80]	; (800385c <_sbrk+0x5c>)
 800380a:	4b15      	ldr	r3, [pc, #84]	; (8003860 <_sbrk+0x60>)
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003814:	4b13      	ldr	r3, [pc, #76]	; (8003864 <_sbrk+0x64>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d102      	bne.n	8003822 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800381c:	4b11      	ldr	r3, [pc, #68]	; (8003864 <_sbrk+0x64>)
 800381e:	4a12      	ldr	r2, [pc, #72]	; (8003868 <_sbrk+0x68>)
 8003820:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003822:	4b10      	ldr	r3, [pc, #64]	; (8003864 <_sbrk+0x64>)
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	18d3      	adds	r3, r2, r3
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	429a      	cmp	r2, r3
 800382e:	d207      	bcs.n	8003840 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003830:	f002 ff26 	bl	8006680 <__errno>
 8003834:	0003      	movs	r3, r0
 8003836:	220c      	movs	r2, #12
 8003838:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800383a:	2301      	movs	r3, #1
 800383c:	425b      	negs	r3, r3
 800383e:	e009      	b.n	8003854 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003840:	4b08      	ldr	r3, [pc, #32]	; (8003864 <_sbrk+0x64>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003846:	4b07      	ldr	r3, [pc, #28]	; (8003864 <_sbrk+0x64>)
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	18d2      	adds	r2, r2, r3
 800384e:	4b05      	ldr	r3, [pc, #20]	; (8003864 <_sbrk+0x64>)
 8003850:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003852:	68fb      	ldr	r3, [r7, #12]
}
 8003854:	0018      	movs	r0, r3
 8003856:	46bd      	mov	sp, r7
 8003858:	b006      	add	sp, #24
 800385a:	bd80      	pop	{r7, pc}
 800385c:	20005000 	.word	0x20005000
 8003860:	00000400 	.word	0x00000400
 8003864:	200003ec 	.word	0x200003ec
 8003868:	20000408 	.word	0x20000408

0800386c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003870:	46c0      	nop			; (mov r8, r8)
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
	...

08003878 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003878:	480d      	ldr	r0, [pc, #52]	; (80038b0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800387a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800387c:	f7ff fff6 	bl	800386c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003880:	480c      	ldr	r0, [pc, #48]	; (80038b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003882:	490d      	ldr	r1, [pc, #52]	; (80038b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003884:	4a0d      	ldr	r2, [pc, #52]	; (80038bc <LoopForever+0xe>)
  movs r3, #0
 8003886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003888:	e002      	b.n	8003890 <LoopCopyDataInit>

0800388a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800388a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800388c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800388e:	3304      	adds	r3, #4

08003890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003894:	d3f9      	bcc.n	800388a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003896:	4a0a      	ldr	r2, [pc, #40]	; (80038c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003898:	4c0a      	ldr	r4, [pc, #40]	; (80038c4 <LoopForever+0x16>)
  movs r3, #0
 800389a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800389c:	e001      	b.n	80038a2 <LoopFillZerobss>

0800389e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800389e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038a0:	3204      	adds	r2, #4

080038a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038a4:	d3fb      	bcc.n	800389e <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80038a6:	f002 fef1 	bl	800668c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038aa:	f7ff fcff 	bl	80032ac <main>

080038ae <LoopForever>:

LoopForever:
    b LoopForever
 80038ae:	e7fe      	b.n	80038ae <LoopForever>
   ldr   r0, =_estack
 80038b0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80038b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038b8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80038bc:	0800c12c 	.word	0x0800c12c
  ldr r2, =_sbss
 80038c0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80038c4:	20000404 	.word	0x20000404

080038c8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038c8:	e7fe      	b.n	80038c8 <ADC1_COMP_IRQHandler>
	...

080038cc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80038d2:	1dfb      	adds	r3, r7, #7
 80038d4:	2200      	movs	r2, #0
 80038d6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80038d8:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <HAL_Init+0x3c>)
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	4b0a      	ldr	r3, [pc, #40]	; (8003908 <HAL_Init+0x3c>)
 80038de:	2140      	movs	r1, #64	; 0x40
 80038e0:	430a      	orrs	r2, r1
 80038e2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038e4:	2000      	movs	r0, #0
 80038e6:	f000 f811 	bl	800390c <HAL_InitTick>
 80038ea:	1e03      	subs	r3, r0, #0
 80038ec:	d003      	beq.n	80038f6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80038ee:	1dfb      	adds	r3, r7, #7
 80038f0:	2201      	movs	r2, #1
 80038f2:	701a      	strb	r2, [r3, #0]
 80038f4:	e001      	b.n	80038fa <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80038f6:	f7ff fe45 	bl	8003584 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80038fa:	1dfb      	adds	r3, r7, #7
 80038fc:	781b      	ldrb	r3, [r3, #0]
}
 80038fe:	0018      	movs	r0, r3
 8003900:	46bd      	mov	sp, r7
 8003902:	b002      	add	sp, #8
 8003904:	bd80      	pop	{r7, pc}
 8003906:	46c0      	nop			; (mov r8, r8)
 8003908:	40022000 	.word	0x40022000

0800390c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800390c:	b590      	push	{r4, r7, lr}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003914:	4b14      	ldr	r3, [pc, #80]	; (8003968 <HAL_InitTick+0x5c>)
 8003916:	681c      	ldr	r4, [r3, #0]
 8003918:	4b14      	ldr	r3, [pc, #80]	; (800396c <HAL_InitTick+0x60>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	0019      	movs	r1, r3
 800391e:	23fa      	movs	r3, #250	; 0xfa
 8003920:	0098      	lsls	r0, r3, #2
 8003922:	f7fc fc0d 	bl	8000140 <__udivsi3>
 8003926:	0003      	movs	r3, r0
 8003928:	0019      	movs	r1, r3
 800392a:	0020      	movs	r0, r4
 800392c:	f7fc fc08 	bl	8000140 <__udivsi3>
 8003930:	0003      	movs	r3, r0
 8003932:	0018      	movs	r0, r3
 8003934:	f000 f90b 	bl	8003b4e <HAL_SYSTICK_Config>
 8003938:	1e03      	subs	r3, r0, #0
 800393a:	d001      	beq.n	8003940 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e00f      	b.n	8003960 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b03      	cmp	r3, #3
 8003944:	d80b      	bhi.n	800395e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003946:	6879      	ldr	r1, [r7, #4]
 8003948:	2301      	movs	r3, #1
 800394a:	425b      	negs	r3, r3
 800394c:	2200      	movs	r2, #0
 800394e:	0018      	movs	r0, r3
 8003950:	f000 f8d8 	bl	8003b04 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003954:	4b06      	ldr	r3, [pc, #24]	; (8003970 <HAL_InitTick+0x64>)
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800395a:	2300      	movs	r3, #0
 800395c:	e000      	b.n	8003960 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
}
 8003960:	0018      	movs	r0, r3
 8003962:	46bd      	mov	sp, r7
 8003964:	b003      	add	sp, #12
 8003966:	bd90      	pop	{r4, r7, pc}
 8003968:	20000000 	.word	0x20000000
 800396c:	20000008 	.word	0x20000008
 8003970:	20000004 	.word	0x20000004

08003974 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003978:	4b05      	ldr	r3, [pc, #20]	; (8003990 <HAL_IncTick+0x1c>)
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	001a      	movs	r2, r3
 800397e:	4b05      	ldr	r3, [pc, #20]	; (8003994 <HAL_IncTick+0x20>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	18d2      	adds	r2, r2, r3
 8003984:	4b03      	ldr	r3, [pc, #12]	; (8003994 <HAL_IncTick+0x20>)
 8003986:	601a      	str	r2, [r3, #0]
}
 8003988:	46c0      	nop			; (mov r8, r8)
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	20000008 	.word	0x20000008
 8003994:	200003f0 	.word	0x200003f0

08003998 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  return uwTick;
 800399c:	4b02      	ldr	r3, [pc, #8]	; (80039a8 <HAL_GetTick+0x10>)
 800399e:	681b      	ldr	r3, [r3, #0]
}
 80039a0:	0018      	movs	r0, r3
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	46c0      	nop			; (mov r8, r8)
 80039a8:	200003f0 	.word	0x200003f0

080039ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	0002      	movs	r2, r0
 80039b4:	1dfb      	adds	r3, r7, #7
 80039b6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80039b8:	1dfb      	adds	r3, r7, #7
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	2b7f      	cmp	r3, #127	; 0x7f
 80039be:	d809      	bhi.n	80039d4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039c0:	1dfb      	adds	r3, r7, #7
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	001a      	movs	r2, r3
 80039c6:	231f      	movs	r3, #31
 80039c8:	401a      	ands	r2, r3
 80039ca:	4b04      	ldr	r3, [pc, #16]	; (80039dc <__NVIC_EnableIRQ+0x30>)
 80039cc:	2101      	movs	r1, #1
 80039ce:	4091      	lsls	r1, r2
 80039d0:	000a      	movs	r2, r1
 80039d2:	601a      	str	r2, [r3, #0]
  }
}
 80039d4:	46c0      	nop			; (mov r8, r8)
 80039d6:	46bd      	mov	sp, r7
 80039d8:	b002      	add	sp, #8
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	e000e100 	.word	0xe000e100

080039e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039e0:	b590      	push	{r4, r7, lr}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	0002      	movs	r2, r0
 80039e8:	6039      	str	r1, [r7, #0]
 80039ea:	1dfb      	adds	r3, r7, #7
 80039ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80039ee:	1dfb      	adds	r3, r7, #7
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	2b7f      	cmp	r3, #127	; 0x7f
 80039f4:	d828      	bhi.n	8003a48 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039f6:	4a2f      	ldr	r2, [pc, #188]	; (8003ab4 <__NVIC_SetPriority+0xd4>)
 80039f8:	1dfb      	adds	r3, r7, #7
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	b25b      	sxtb	r3, r3
 80039fe:	089b      	lsrs	r3, r3, #2
 8003a00:	33c0      	adds	r3, #192	; 0xc0
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	589b      	ldr	r3, [r3, r2]
 8003a06:	1dfa      	adds	r2, r7, #7
 8003a08:	7812      	ldrb	r2, [r2, #0]
 8003a0a:	0011      	movs	r1, r2
 8003a0c:	2203      	movs	r2, #3
 8003a0e:	400a      	ands	r2, r1
 8003a10:	00d2      	lsls	r2, r2, #3
 8003a12:	21ff      	movs	r1, #255	; 0xff
 8003a14:	4091      	lsls	r1, r2
 8003a16:	000a      	movs	r2, r1
 8003a18:	43d2      	mvns	r2, r2
 8003a1a:	401a      	ands	r2, r3
 8003a1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	019b      	lsls	r3, r3, #6
 8003a22:	22ff      	movs	r2, #255	; 0xff
 8003a24:	401a      	ands	r2, r3
 8003a26:	1dfb      	adds	r3, r7, #7
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	4003      	ands	r3, r0
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a34:	481f      	ldr	r0, [pc, #124]	; (8003ab4 <__NVIC_SetPriority+0xd4>)
 8003a36:	1dfb      	adds	r3, r7, #7
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	b25b      	sxtb	r3, r3
 8003a3c:	089b      	lsrs	r3, r3, #2
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	33c0      	adds	r3, #192	; 0xc0
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003a46:	e031      	b.n	8003aac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a48:	4a1b      	ldr	r2, [pc, #108]	; (8003ab8 <__NVIC_SetPriority+0xd8>)
 8003a4a:	1dfb      	adds	r3, r7, #7
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	0019      	movs	r1, r3
 8003a50:	230f      	movs	r3, #15
 8003a52:	400b      	ands	r3, r1
 8003a54:	3b08      	subs	r3, #8
 8003a56:	089b      	lsrs	r3, r3, #2
 8003a58:	3306      	adds	r3, #6
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	18d3      	adds	r3, r2, r3
 8003a5e:	3304      	adds	r3, #4
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	1dfa      	adds	r2, r7, #7
 8003a64:	7812      	ldrb	r2, [r2, #0]
 8003a66:	0011      	movs	r1, r2
 8003a68:	2203      	movs	r2, #3
 8003a6a:	400a      	ands	r2, r1
 8003a6c:	00d2      	lsls	r2, r2, #3
 8003a6e:	21ff      	movs	r1, #255	; 0xff
 8003a70:	4091      	lsls	r1, r2
 8003a72:	000a      	movs	r2, r1
 8003a74:	43d2      	mvns	r2, r2
 8003a76:	401a      	ands	r2, r3
 8003a78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	019b      	lsls	r3, r3, #6
 8003a7e:	22ff      	movs	r2, #255	; 0xff
 8003a80:	401a      	ands	r2, r3
 8003a82:	1dfb      	adds	r3, r7, #7
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	0018      	movs	r0, r3
 8003a88:	2303      	movs	r3, #3
 8003a8a:	4003      	ands	r3, r0
 8003a8c:	00db      	lsls	r3, r3, #3
 8003a8e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a90:	4809      	ldr	r0, [pc, #36]	; (8003ab8 <__NVIC_SetPriority+0xd8>)
 8003a92:	1dfb      	adds	r3, r7, #7
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	001c      	movs	r4, r3
 8003a98:	230f      	movs	r3, #15
 8003a9a:	4023      	ands	r3, r4
 8003a9c:	3b08      	subs	r3, #8
 8003a9e:	089b      	lsrs	r3, r3, #2
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	3306      	adds	r3, #6
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	18c3      	adds	r3, r0, r3
 8003aa8:	3304      	adds	r3, #4
 8003aaa:	601a      	str	r2, [r3, #0]
}
 8003aac:	46c0      	nop			; (mov r8, r8)
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	b003      	add	sp, #12
 8003ab2:	bd90      	pop	{r4, r7, pc}
 8003ab4:	e000e100 	.word	0xe000e100
 8003ab8:	e000ed00 	.word	0xe000ed00

08003abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	1e5a      	subs	r2, r3, #1
 8003ac8:	2380      	movs	r3, #128	; 0x80
 8003aca:	045b      	lsls	r3, r3, #17
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d301      	bcc.n	8003ad4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e010      	b.n	8003af6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ad4:	4b0a      	ldr	r3, [pc, #40]	; (8003b00 <SysTick_Config+0x44>)
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	3a01      	subs	r2, #1
 8003ada:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003adc:	2301      	movs	r3, #1
 8003ade:	425b      	negs	r3, r3
 8003ae0:	2103      	movs	r1, #3
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	f7ff ff7c 	bl	80039e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ae8:	4b05      	ldr	r3, [pc, #20]	; (8003b00 <SysTick_Config+0x44>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003aee:	4b04      	ldr	r3, [pc, #16]	; (8003b00 <SysTick_Config+0x44>)
 8003af0:	2207      	movs	r2, #7
 8003af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	0018      	movs	r0, r3
 8003af8:	46bd      	mov	sp, r7
 8003afa:	b002      	add	sp, #8
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	46c0      	nop			; (mov r8, r8)
 8003b00:	e000e010 	.word	0xe000e010

08003b04 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60b9      	str	r1, [r7, #8]
 8003b0c:	607a      	str	r2, [r7, #4]
 8003b0e:	210f      	movs	r1, #15
 8003b10:	187b      	adds	r3, r7, r1
 8003b12:	1c02      	adds	r2, r0, #0
 8003b14:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003b16:	68ba      	ldr	r2, [r7, #8]
 8003b18:	187b      	adds	r3, r7, r1
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	b25b      	sxtb	r3, r3
 8003b1e:	0011      	movs	r1, r2
 8003b20:	0018      	movs	r0, r3
 8003b22:	f7ff ff5d 	bl	80039e0 <__NVIC_SetPriority>
}
 8003b26:	46c0      	nop			; (mov r8, r8)
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	b004      	add	sp, #16
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b082      	sub	sp, #8
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	0002      	movs	r2, r0
 8003b36:	1dfb      	adds	r3, r7, #7
 8003b38:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b3a:	1dfb      	adds	r3, r7, #7
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	b25b      	sxtb	r3, r3
 8003b40:	0018      	movs	r0, r3
 8003b42:	f7ff ff33 	bl	80039ac <__NVIC_EnableIRQ>
}
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	b002      	add	sp, #8
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b082      	sub	sp, #8
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	0018      	movs	r0, r3
 8003b5a:	f7ff ffaf 	bl	8003abc <SysTick_Config>
 8003b5e:	0003      	movs	r3, r0
}
 8003b60:	0018      	movs	r0, r3
 8003b62:	46bd      	mov	sp, r7
 8003b64:	b002      	add	sp, #8
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b70:	230f      	movs	r3, #15
 8003b72:	18fb      	adds	r3, r7, r3
 8003b74:	2200      	movs	r2, #0
 8003b76:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2225      	movs	r2, #37	; 0x25
 8003b7c:	5c9b      	ldrb	r3, [r3, r2]
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d008      	beq.n	8003b96 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2204      	movs	r2, #4
 8003b88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2224      	movs	r2, #36	; 0x24
 8003b8e:	2100      	movs	r1, #0
 8003b90:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e024      	b.n	8003be0 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	210e      	movs	r1, #14
 8003ba2:	438a      	bics	r2, r1
 8003ba4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	438a      	bics	r2, r1
 8003bb4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bba:	221c      	movs	r2, #28
 8003bbc:	401a      	ands	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	2101      	movs	r1, #1
 8003bc4:	4091      	lsls	r1, r2
 8003bc6:	000a      	movs	r2, r1
 8003bc8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2225      	movs	r2, #37	; 0x25
 8003bce:	2101      	movs	r1, #1
 8003bd0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2224      	movs	r2, #36	; 0x24
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	5499      	strb	r1, [r3, r2]

    return status;
 8003bda:	230f      	movs	r3, #15
 8003bdc:	18fb      	adds	r3, r7, r3
 8003bde:	781b      	ldrb	r3, [r3, #0]
  }
}
 8003be0:	0018      	movs	r0, r3
 8003be2:	46bd      	mov	sp, r7
 8003be4:	b004      	add	sp, #16
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf0:	210f      	movs	r1, #15
 8003bf2:	187b      	adds	r3, r7, r1
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2225      	movs	r2, #37	; 0x25
 8003bfc:	5c9b      	ldrb	r3, [r3, r2]
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d006      	beq.n	8003c12 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2204      	movs	r2, #4
 8003c08:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003c0a:	187b      	adds	r3, r7, r1
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	701a      	strb	r2, [r3, #0]
 8003c10:	e02a      	b.n	8003c68 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	210e      	movs	r1, #14
 8003c1e:	438a      	bics	r2, r1
 8003c20:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	438a      	bics	r2, r1
 8003c30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c36:	221c      	movs	r2, #28
 8003c38:	401a      	ands	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	2101      	movs	r1, #1
 8003c40:	4091      	lsls	r1, r2
 8003c42:	000a      	movs	r2, r1
 8003c44:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2225      	movs	r2, #37	; 0x25
 8003c4a:	2101      	movs	r1, #1
 8003c4c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2224      	movs	r2, #36	; 0x24
 8003c52:	2100      	movs	r1, #0
 8003c54:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d004      	beq.n	8003c68 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	0010      	movs	r0, r2
 8003c66:	4798      	blx	r3
    }
  }
  return status;
 8003c68:	230f      	movs	r3, #15
 8003c6a:	18fb      	adds	r3, r7, r3
 8003c6c:	781b      	ldrb	r3, [r3, #0]
}
 8003c6e:	0018      	movs	r0, r3
 8003c70:	46bd      	mov	sp, r7
 8003c72:	b004      	add	sp, #16
 8003c74:	bd80      	pop	{r7, pc}
	...

08003c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c86:	2300      	movs	r3, #0
 8003c88:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003c8e:	e155      	b.n	8003f3c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2101      	movs	r1, #1
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	4091      	lsls	r1, r2
 8003c9a:	000a      	movs	r2, r1
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d100      	bne.n	8003ca8 <HAL_GPIO_Init+0x30>
 8003ca6:	e146      	b.n	8003f36 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	2203      	movs	r2, #3
 8003cae:	4013      	ands	r3, r2
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d005      	beq.n	8003cc0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	2203      	movs	r2, #3
 8003cba:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d130      	bne.n	8003d22 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	2203      	movs	r2, #3
 8003ccc:	409a      	lsls	r2, r3
 8003cce:	0013      	movs	r3, r2
 8003cd0:	43da      	mvns	r2, r3
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	68da      	ldr	r2, [r3, #12]
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	409a      	lsls	r2, r3
 8003ce2:	0013      	movs	r3, r2
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	409a      	lsls	r2, r3
 8003cfc:	0013      	movs	r3, r2
 8003cfe:	43da      	mvns	r2, r3
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	4013      	ands	r3, r2
 8003d04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	091b      	lsrs	r3, r3, #4
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	401a      	ands	r2, r3
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	409a      	lsls	r2, r3
 8003d14:	0013      	movs	r3, r2
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2203      	movs	r2, #3
 8003d28:	4013      	ands	r3, r2
 8003d2a:	2b03      	cmp	r3, #3
 8003d2c:	d017      	beq.n	8003d5e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	2203      	movs	r2, #3
 8003d3a:	409a      	lsls	r2, r3
 8003d3c:	0013      	movs	r3, r2
 8003d3e:	43da      	mvns	r2, r3
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	4013      	ands	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	689a      	ldr	r2, [r3, #8]
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	409a      	lsls	r2, r3
 8003d50:	0013      	movs	r3, r2
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2203      	movs	r2, #3
 8003d64:	4013      	ands	r3, r2
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d123      	bne.n	8003db2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	08da      	lsrs	r2, r3, #3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	3208      	adds	r2, #8
 8003d72:	0092      	lsls	r2, r2, #2
 8003d74:	58d3      	ldr	r3, [r2, r3]
 8003d76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	2207      	movs	r2, #7
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	220f      	movs	r2, #15
 8003d82:	409a      	lsls	r2, r3
 8003d84:	0013      	movs	r3, r2
 8003d86:	43da      	mvns	r2, r3
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	691a      	ldr	r2, [r3, #16]
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2107      	movs	r1, #7
 8003d96:	400b      	ands	r3, r1
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	409a      	lsls	r2, r3
 8003d9c:	0013      	movs	r3, r2
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	08da      	lsrs	r2, r3, #3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	3208      	adds	r2, #8
 8003dac:	0092      	lsls	r2, r2, #2
 8003dae:	6939      	ldr	r1, [r7, #16]
 8003db0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	2203      	movs	r2, #3
 8003dbe:	409a      	lsls	r2, r3
 8003dc0:	0013      	movs	r3, r2
 8003dc2:	43da      	mvns	r2, r3
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2203      	movs	r2, #3
 8003dd0:	401a      	ands	r2, r3
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	409a      	lsls	r2, r3
 8003dd8:	0013      	movs	r3, r2
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	23c0      	movs	r3, #192	; 0xc0
 8003dec:	029b      	lsls	r3, r3, #10
 8003dee:	4013      	ands	r3, r2
 8003df0:	d100      	bne.n	8003df4 <HAL_GPIO_Init+0x17c>
 8003df2:	e0a0      	b.n	8003f36 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003df4:	4b57      	ldr	r3, [pc, #348]	; (8003f54 <HAL_GPIO_Init+0x2dc>)
 8003df6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003df8:	4b56      	ldr	r3, [pc, #344]	; (8003f54 <HAL_GPIO_Init+0x2dc>)
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e00:	4a55      	ldr	r2, [pc, #340]	; (8003f58 <HAL_GPIO_Init+0x2e0>)
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	089b      	lsrs	r3, r3, #2
 8003e06:	3302      	adds	r3, #2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	589b      	ldr	r3, [r3, r2]
 8003e0c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	2203      	movs	r2, #3
 8003e12:	4013      	ands	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	220f      	movs	r2, #15
 8003e18:	409a      	lsls	r2, r3
 8003e1a:	0013      	movs	r3, r2
 8003e1c:	43da      	mvns	r2, r3
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	4013      	ands	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	23a0      	movs	r3, #160	; 0xa0
 8003e28:	05db      	lsls	r3, r3, #23
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d01f      	beq.n	8003e6e <HAL_GPIO_Init+0x1f6>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a4a      	ldr	r2, [pc, #296]	; (8003f5c <HAL_GPIO_Init+0x2e4>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d019      	beq.n	8003e6a <HAL_GPIO_Init+0x1f2>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a49      	ldr	r2, [pc, #292]	; (8003f60 <HAL_GPIO_Init+0x2e8>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d013      	beq.n	8003e66 <HAL_GPIO_Init+0x1ee>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a48      	ldr	r2, [pc, #288]	; (8003f64 <HAL_GPIO_Init+0x2ec>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d00d      	beq.n	8003e62 <HAL_GPIO_Init+0x1ea>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a47      	ldr	r2, [pc, #284]	; (8003f68 <HAL_GPIO_Init+0x2f0>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d007      	beq.n	8003e5e <HAL_GPIO_Init+0x1e6>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a46      	ldr	r2, [pc, #280]	; (8003f6c <HAL_GPIO_Init+0x2f4>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d101      	bne.n	8003e5a <HAL_GPIO_Init+0x1e2>
 8003e56:	2305      	movs	r3, #5
 8003e58:	e00a      	b.n	8003e70 <HAL_GPIO_Init+0x1f8>
 8003e5a:	2306      	movs	r3, #6
 8003e5c:	e008      	b.n	8003e70 <HAL_GPIO_Init+0x1f8>
 8003e5e:	2304      	movs	r3, #4
 8003e60:	e006      	b.n	8003e70 <HAL_GPIO_Init+0x1f8>
 8003e62:	2303      	movs	r3, #3
 8003e64:	e004      	b.n	8003e70 <HAL_GPIO_Init+0x1f8>
 8003e66:	2302      	movs	r3, #2
 8003e68:	e002      	b.n	8003e70 <HAL_GPIO_Init+0x1f8>
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e000      	b.n	8003e70 <HAL_GPIO_Init+0x1f8>
 8003e6e:	2300      	movs	r3, #0
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	2103      	movs	r1, #3
 8003e74:	400a      	ands	r2, r1
 8003e76:	0092      	lsls	r2, r2, #2
 8003e78:	4093      	lsls	r3, r2
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e80:	4935      	ldr	r1, [pc, #212]	; (8003f58 <HAL_GPIO_Init+0x2e0>)
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	089b      	lsrs	r3, r3, #2
 8003e86:	3302      	adds	r3, #2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e8e:	4b38      	ldr	r3, [pc, #224]	; (8003f70 <HAL_GPIO_Init+0x2f8>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	43da      	mvns	r2, r3
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	2380      	movs	r3, #128	; 0x80
 8003ea4:	035b      	lsls	r3, r3, #13
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	d003      	beq.n	8003eb2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003eb2:	4b2f      	ldr	r3, [pc, #188]	; (8003f70 <HAL_GPIO_Init+0x2f8>)
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003eb8:	4b2d      	ldr	r3, [pc, #180]	; (8003f70 <HAL_GPIO_Init+0x2f8>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	43da      	mvns	r2, r3
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	2380      	movs	r3, #128	; 0x80
 8003ece:	039b      	lsls	r3, r3, #14
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	d003      	beq.n	8003edc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003edc:	4b24      	ldr	r3, [pc, #144]	; (8003f70 <HAL_GPIO_Init+0x2f8>)
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8003ee2:	4b23      	ldr	r3, [pc, #140]	; (8003f70 <HAL_GPIO_Init+0x2f8>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	43da      	mvns	r2, r3
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	4013      	ands	r3, r2
 8003ef0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	2380      	movs	r3, #128	; 0x80
 8003ef8:	029b      	lsls	r3, r3, #10
 8003efa:	4013      	ands	r3, r2
 8003efc:	d003      	beq.n	8003f06 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003f06:	4b1a      	ldr	r3, [pc, #104]	; (8003f70 <HAL_GPIO_Init+0x2f8>)
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f0c:	4b18      	ldr	r3, [pc, #96]	; (8003f70 <HAL_GPIO_Init+0x2f8>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	43da      	mvns	r2, r3
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	2380      	movs	r3, #128	; 0x80
 8003f22:	025b      	lsls	r3, r3, #9
 8003f24:	4013      	ands	r3, r2
 8003f26:	d003      	beq.n	8003f30 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003f30:	4b0f      	ldr	r3, [pc, #60]	; (8003f70 <HAL_GPIO_Init+0x2f8>)
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	40da      	lsrs	r2, r3
 8003f44:	1e13      	subs	r3, r2, #0
 8003f46:	d000      	beq.n	8003f4a <HAL_GPIO_Init+0x2d2>
 8003f48:	e6a2      	b.n	8003c90 <HAL_GPIO_Init+0x18>
  }
}
 8003f4a:	46c0      	nop			; (mov r8, r8)
 8003f4c:	46c0      	nop			; (mov r8, r8)
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	b006      	add	sp, #24
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	40021000 	.word	0x40021000
 8003f58:	40010000 	.word	0x40010000
 8003f5c:	50000400 	.word	0x50000400
 8003f60:	50000800 	.word	0x50000800
 8003f64:	50000c00 	.word	0x50000c00
 8003f68:	50001000 	.word	0x50001000
 8003f6c:	50001c00 	.word	0x50001c00
 8003f70:	40010400 	.word	0x40010400

08003f74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f74:	b5b0      	push	{r4, r5, r7, lr}
 8003f76:	b08a      	sub	sp, #40	; 0x28
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d102      	bne.n	8003f88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	f000 fbbf 	bl	8004706 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f88:	4bc9      	ldr	r3, [pc, #804]	; (80042b0 <HAL_RCC_OscConfig+0x33c>)
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	220c      	movs	r2, #12
 8003f8e:	4013      	ands	r3, r2
 8003f90:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f92:	4bc7      	ldr	r3, [pc, #796]	; (80042b0 <HAL_RCC_OscConfig+0x33c>)
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	2380      	movs	r3, #128	; 0x80
 8003f98:	025b      	lsls	r3, r3, #9
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	d100      	bne.n	8003faa <HAL_RCC_OscConfig+0x36>
 8003fa8:	e07e      	b.n	80040a8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	2b08      	cmp	r3, #8
 8003fae:	d007      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	2b0c      	cmp	r3, #12
 8003fb4:	d112      	bne.n	8003fdc <HAL_RCC_OscConfig+0x68>
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	2380      	movs	r3, #128	; 0x80
 8003fba:	025b      	lsls	r3, r3, #9
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d10d      	bne.n	8003fdc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc0:	4bbb      	ldr	r3, [pc, #748]	; (80042b0 <HAL_RCC_OscConfig+0x33c>)
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	2380      	movs	r3, #128	; 0x80
 8003fc6:	029b      	lsls	r3, r3, #10
 8003fc8:	4013      	ands	r3, r2
 8003fca:	d100      	bne.n	8003fce <HAL_RCC_OscConfig+0x5a>
 8003fcc:	e06b      	b.n	80040a6 <HAL_RCC_OscConfig+0x132>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d167      	bne.n	80040a6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	f000 fb95 	bl	8004706 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	2380      	movs	r3, #128	; 0x80
 8003fe2:	025b      	lsls	r3, r3, #9
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d107      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x84>
 8003fe8:	4bb1      	ldr	r3, [pc, #708]	; (80042b0 <HAL_RCC_OscConfig+0x33c>)
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	4bb0      	ldr	r3, [pc, #704]	; (80042b0 <HAL_RCC_OscConfig+0x33c>)
 8003fee:	2180      	movs	r1, #128	; 0x80
 8003ff0:	0249      	lsls	r1, r1, #9
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	601a      	str	r2, [r3, #0]
 8003ff6:	e027      	b.n	8004048 <HAL_RCC_OscConfig+0xd4>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	23a0      	movs	r3, #160	; 0xa0
 8003ffe:	02db      	lsls	r3, r3, #11
 8004000:	429a      	cmp	r2, r3
 8004002:	d10e      	bne.n	8004022 <HAL_RCC_OscConfig+0xae>
 8004004:	4baa      	ldr	r3, [pc, #680]	; (80042b0 <HAL_RCC_OscConfig+0x33c>)
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	4ba9      	ldr	r3, [pc, #676]	; (80042b0 <HAL_RCC_OscConfig+0x33c>)
 800400a:	2180      	movs	r1, #128	; 0x80
 800400c:	02c9      	lsls	r1, r1, #11
 800400e:	430a      	orrs	r2, r1
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	4ba7      	ldr	r3, [pc, #668]	; (80042b0 <HAL_RCC_OscConfig+0x33c>)
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	4ba6      	ldr	r3, [pc, #664]	; (80042b0 <HAL_RCC_OscConfig+0x33c>)
 8004018:	2180      	movs	r1, #128	; 0x80
 800401a:	0249      	lsls	r1, r1, #9
 800401c:	430a      	orrs	r2, r1
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	e012      	b.n	8004048 <HAL_RCC_OscConfig+0xd4>
 8004022:	4ba3      	ldr	r3, [pc, #652]	; (80042b0 <HAL_RCC_OscConfig+0x33c>)
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	4ba2      	ldr	r3, [pc, #648]	; (80042b0 <HAL_RCC_OscConfig+0x33c>)
 8004028:	49a2      	ldr	r1, [pc, #648]	; (80042b4 <HAL_RCC_OscConfig+0x340>)
 800402a:	400a      	ands	r2, r1
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	4ba0      	ldr	r3, [pc, #640]	; (80042b0 <HAL_RCC_OscConfig+0x33c>)
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	2380      	movs	r3, #128	; 0x80
 8004034:	025b      	lsls	r3, r3, #9
 8004036:	4013      	ands	r3, r2
 8004038:	60fb      	str	r3, [r7, #12]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	4b9c      	ldr	r3, [pc, #624]	; (80042b0 <HAL_RCC_OscConfig+0x33c>)
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	4b9b      	ldr	r3, [pc, #620]	; (80042b0 <HAL_RCC_OscConfig+0x33c>)
 8004042:	499d      	ldr	r1, [pc, #628]	; (80042b8 <HAL_RCC_OscConfig+0x344>)
 8004044:	400a      	ands	r2, r1
 8004046:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d015      	beq.n	800407c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004050:	f7ff fca2 	bl	8003998 <HAL_GetTick>
 8004054:	0003      	movs	r3, r0
 8004056:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004058:	e009      	b.n	800406e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800405a:	f7ff fc9d 	bl	8003998 <HAL_GetTick>
 800405e:	0002      	movs	r2, r0
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b64      	cmp	r3, #100	; 0x64
 8004066:	d902      	bls.n	800406e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	f000 fb4c 	bl	8004706 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800406e:	4b90      	ldr	r3, [pc, #576]	; (80042b0 <HAL_RCC_OscConfig+0x33c>)
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	2380      	movs	r3, #128	; 0x80
 8004074:	029b      	lsls	r3, r3, #10
 8004076:	4013      	ands	r3, r2
 8004078:	d0ef      	beq.n	800405a <HAL_RCC_OscConfig+0xe6>
 800407a:	e015      	b.n	80040a8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407c:	f7ff fc8c 	bl	8003998 <HAL_GetTick>
 8004080:	0003      	movs	r3, r0
 8004082:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004084:	e008      	b.n	8004098 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004086:	f7ff fc87 	bl	8003998 <HAL_GetTick>
 800408a:	0002      	movs	r2, r0
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b64      	cmp	r3, #100	; 0x64
 8004092:	d901      	bls.n	8004098 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e336      	b.n	8004706 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004098:	4b85      	ldr	r3, [pc, #532]	; (80042b0 <HAL_RCC_OscConfig+0x33c>)
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	2380      	movs	r3, #128	; 0x80
 800409e:	029b      	lsls	r3, r3, #10
 80040a0:	4013      	ands	r3, r2
 80040a2:	d1f0      	bne.n	8004086 <HAL_RCC_OscConfig+0x112>
 80040a4:	e000      	b.n	80040a8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040a6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2202      	movs	r2, #2
 80040ae:	4013      	ands	r3, r2
 80040b0:	d100      	bne.n	80040b4 <HAL_RCC_OscConfig+0x140>
 80040b2:	e099      	b.n	80041e8 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80040ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040bc:	2220      	movs	r2, #32
 80040be:	4013      	ands	r3, r2
 80040c0:	d009      	beq.n	80040d6 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80040c2:	4b7b      	ldr	r3, [pc, #492]	; (80042b0 <HAL_RCC_OscConfig+0x33c>)
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	4b7a      	ldr	r3, [pc, #488]	; (80042b0 <HAL_RCC_OscConfig+0x33c>)
 80040c8:	2120      	movs	r1, #32
 80040ca:	430a      	orrs	r2, r1
 80040cc:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80040ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d0:	2220      	movs	r2, #32
 80040d2:	4393      	bics	r3, r2
 80040d4:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	2b04      	cmp	r3, #4
 80040da:	d005      	beq.n	80040e8 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	2b0c      	cmp	r3, #12
 80040e0:	d13e      	bne.n	8004160 <HAL_RCC_OscConfig+0x1ec>
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d13b      	bne.n	8004160 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80040e8:	4b71      	ldr	r3, [pc, #452]	; (80042b0 <HAL_RCC_OscConfig+0x33c>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2204      	movs	r2, #4
 80040ee:	4013      	ands	r3, r2
 80040f0:	d004      	beq.n	80040fc <HAL_RCC_OscConfig+0x188>
 80040f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e304      	b.n	8004706 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040fc:	4b6c      	ldr	r3, [pc, #432]	; (80042b0 <HAL_RCC_OscConfig+0x33c>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	4a6e      	ldr	r2, [pc, #440]	; (80042bc <HAL_RCC_OscConfig+0x348>)
 8004102:	4013      	ands	r3, r2
 8004104:	0019      	movs	r1, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	021a      	lsls	r2, r3, #8
 800410c:	4b68      	ldr	r3, [pc, #416]	; (80042b0 <HAL_RCC_OscConfig+0x33c>)
 800410e:	430a      	orrs	r2, r1
 8004110:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004112:	4b67      	ldr	r3, [pc, #412]	; (80042b0 <HAL_RCC_OscConfig+0x33c>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2209      	movs	r2, #9
 8004118:	4393      	bics	r3, r2
 800411a:	0019      	movs	r1, r3
 800411c:	4b64      	ldr	r3, [pc, #400]	; (80042b0 <HAL_RCC_OscConfig+0x33c>)
 800411e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004120:	430a      	orrs	r2, r1
 8004122:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004124:	f000 fc42 	bl	80049ac <HAL_RCC_GetSysClockFreq>
 8004128:	0001      	movs	r1, r0
 800412a:	4b61      	ldr	r3, [pc, #388]	; (80042b0 <HAL_RCC_OscConfig+0x33c>)
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	091b      	lsrs	r3, r3, #4
 8004130:	220f      	movs	r2, #15
 8004132:	4013      	ands	r3, r2
 8004134:	4a62      	ldr	r2, [pc, #392]	; (80042c0 <HAL_RCC_OscConfig+0x34c>)
 8004136:	5cd3      	ldrb	r3, [r2, r3]
 8004138:	000a      	movs	r2, r1
 800413a:	40da      	lsrs	r2, r3
 800413c:	4b61      	ldr	r3, [pc, #388]	; (80042c4 <HAL_RCC_OscConfig+0x350>)
 800413e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004140:	4b61      	ldr	r3, [pc, #388]	; (80042c8 <HAL_RCC_OscConfig+0x354>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2513      	movs	r5, #19
 8004146:	197c      	adds	r4, r7, r5
 8004148:	0018      	movs	r0, r3
 800414a:	f7ff fbdf 	bl	800390c <HAL_InitTick>
 800414e:	0003      	movs	r3, r0
 8004150:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004152:	197b      	adds	r3, r7, r5
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d046      	beq.n	80041e8 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800415a:	197b      	adds	r3, r7, r5
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	e2d2      	b.n	8004706 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004162:	2b00      	cmp	r3, #0
 8004164:	d027      	beq.n	80041b6 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004166:	4b52      	ldr	r3, [pc, #328]	; (80042b0 <HAL_RCC_OscConfig+0x33c>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2209      	movs	r2, #9
 800416c:	4393      	bics	r3, r2
 800416e:	0019      	movs	r1, r3
 8004170:	4b4f      	ldr	r3, [pc, #316]	; (80042b0 <HAL_RCC_OscConfig+0x33c>)
 8004172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004174:	430a      	orrs	r2, r1
 8004176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004178:	f7ff fc0e 	bl	8003998 <HAL_GetTick>
 800417c:	0003      	movs	r3, r0
 800417e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004180:	e008      	b.n	8004194 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004182:	f7ff fc09 	bl	8003998 <HAL_GetTick>
 8004186:	0002      	movs	r2, r0
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d901      	bls.n	8004194 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e2b8      	b.n	8004706 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004194:	4b46      	ldr	r3, [pc, #280]	; (80042b0 <HAL_RCC_OscConfig+0x33c>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2204      	movs	r2, #4
 800419a:	4013      	ands	r3, r2
 800419c:	d0f1      	beq.n	8004182 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800419e:	4b44      	ldr	r3, [pc, #272]	; (80042b0 <HAL_RCC_OscConfig+0x33c>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	4a46      	ldr	r2, [pc, #280]	; (80042bc <HAL_RCC_OscConfig+0x348>)
 80041a4:	4013      	ands	r3, r2
 80041a6:	0019      	movs	r1, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	021a      	lsls	r2, r3, #8
 80041ae:	4b40      	ldr	r3, [pc, #256]	; (80042b0 <HAL_RCC_OscConfig+0x33c>)
 80041b0:	430a      	orrs	r2, r1
 80041b2:	605a      	str	r2, [r3, #4]
 80041b4:	e018      	b.n	80041e8 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041b6:	4b3e      	ldr	r3, [pc, #248]	; (80042b0 <HAL_RCC_OscConfig+0x33c>)
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	4b3d      	ldr	r3, [pc, #244]	; (80042b0 <HAL_RCC_OscConfig+0x33c>)
 80041bc:	2101      	movs	r1, #1
 80041be:	438a      	bics	r2, r1
 80041c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c2:	f7ff fbe9 	bl	8003998 <HAL_GetTick>
 80041c6:	0003      	movs	r3, r0
 80041c8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041cc:	f7ff fbe4 	bl	8003998 <HAL_GetTick>
 80041d0:	0002      	movs	r2, r0
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e293      	b.n	8004706 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80041de:	4b34      	ldr	r3, [pc, #208]	; (80042b0 <HAL_RCC_OscConfig+0x33c>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2204      	movs	r2, #4
 80041e4:	4013      	ands	r3, r2
 80041e6:	d1f1      	bne.n	80041cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2210      	movs	r2, #16
 80041ee:	4013      	ands	r3, r2
 80041f0:	d100      	bne.n	80041f4 <HAL_RCC_OscConfig+0x280>
 80041f2:	e0a2      	b.n	800433a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d140      	bne.n	800427c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041fa:	4b2d      	ldr	r3, [pc, #180]	; (80042b0 <HAL_RCC_OscConfig+0x33c>)
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	2380      	movs	r3, #128	; 0x80
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	4013      	ands	r3, r2
 8004204:	d005      	beq.n	8004212 <HAL_RCC_OscConfig+0x29e>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e279      	b.n	8004706 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004212:	4b27      	ldr	r3, [pc, #156]	; (80042b0 <HAL_RCC_OscConfig+0x33c>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	4a2d      	ldr	r2, [pc, #180]	; (80042cc <HAL_RCC_OscConfig+0x358>)
 8004218:	4013      	ands	r3, r2
 800421a:	0019      	movs	r1, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004220:	4b23      	ldr	r3, [pc, #140]	; (80042b0 <HAL_RCC_OscConfig+0x33c>)
 8004222:	430a      	orrs	r2, r1
 8004224:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004226:	4b22      	ldr	r3, [pc, #136]	; (80042b0 <HAL_RCC_OscConfig+0x33c>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	021b      	lsls	r3, r3, #8
 800422c:	0a19      	lsrs	r1, r3, #8
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	061a      	lsls	r2, r3, #24
 8004234:	4b1e      	ldr	r3, [pc, #120]	; (80042b0 <HAL_RCC_OscConfig+0x33c>)
 8004236:	430a      	orrs	r2, r1
 8004238:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423e:	0b5b      	lsrs	r3, r3, #13
 8004240:	3301      	adds	r3, #1
 8004242:	2280      	movs	r2, #128	; 0x80
 8004244:	0212      	lsls	r2, r2, #8
 8004246:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004248:	4b19      	ldr	r3, [pc, #100]	; (80042b0 <HAL_RCC_OscConfig+0x33c>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	091b      	lsrs	r3, r3, #4
 800424e:	210f      	movs	r1, #15
 8004250:	400b      	ands	r3, r1
 8004252:	491b      	ldr	r1, [pc, #108]	; (80042c0 <HAL_RCC_OscConfig+0x34c>)
 8004254:	5ccb      	ldrb	r3, [r1, r3]
 8004256:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004258:	4b1a      	ldr	r3, [pc, #104]	; (80042c4 <HAL_RCC_OscConfig+0x350>)
 800425a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800425c:	4b1a      	ldr	r3, [pc, #104]	; (80042c8 <HAL_RCC_OscConfig+0x354>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2513      	movs	r5, #19
 8004262:	197c      	adds	r4, r7, r5
 8004264:	0018      	movs	r0, r3
 8004266:	f7ff fb51 	bl	800390c <HAL_InitTick>
 800426a:	0003      	movs	r3, r0
 800426c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800426e:	197b      	adds	r3, r7, r5
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d061      	beq.n	800433a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8004276:	197b      	adds	r3, r7, r5
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	e244      	b.n	8004706 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	69db      	ldr	r3, [r3, #28]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d040      	beq.n	8004306 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004284:	4b0a      	ldr	r3, [pc, #40]	; (80042b0 <HAL_RCC_OscConfig+0x33c>)
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	4b09      	ldr	r3, [pc, #36]	; (80042b0 <HAL_RCC_OscConfig+0x33c>)
 800428a:	2180      	movs	r1, #128	; 0x80
 800428c:	0049      	lsls	r1, r1, #1
 800428e:	430a      	orrs	r2, r1
 8004290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004292:	f7ff fb81 	bl	8003998 <HAL_GetTick>
 8004296:	0003      	movs	r3, r0
 8004298:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800429a:	e019      	b.n	80042d0 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800429c:	f7ff fb7c 	bl	8003998 <HAL_GetTick>
 80042a0:	0002      	movs	r2, r0
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d912      	bls.n	80042d0 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e22b      	b.n	8004706 <HAL_RCC_OscConfig+0x792>
 80042ae:	46c0      	nop			; (mov r8, r8)
 80042b0:	40021000 	.word	0x40021000
 80042b4:	fffeffff 	.word	0xfffeffff
 80042b8:	fffbffff 	.word	0xfffbffff
 80042bc:	ffffe0ff 	.word	0xffffe0ff
 80042c0:	0800bbf8 	.word	0x0800bbf8
 80042c4:	20000000 	.word	0x20000000
 80042c8:	20000004 	.word	0x20000004
 80042cc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80042d0:	4bca      	ldr	r3, [pc, #808]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	2380      	movs	r3, #128	; 0x80
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4013      	ands	r3, r2
 80042da:	d0df      	beq.n	800429c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042dc:	4bc7      	ldr	r3, [pc, #796]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	4ac7      	ldr	r2, [pc, #796]	; (8004600 <HAL_RCC_OscConfig+0x68c>)
 80042e2:	4013      	ands	r3, r2
 80042e4:	0019      	movs	r1, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042ea:	4bc4      	ldr	r3, [pc, #784]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 80042ec:	430a      	orrs	r2, r1
 80042ee:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042f0:	4bc2      	ldr	r3, [pc, #776]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	021b      	lsls	r3, r3, #8
 80042f6:	0a19      	lsrs	r1, r3, #8
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	061a      	lsls	r2, r3, #24
 80042fe:	4bbf      	ldr	r3, [pc, #764]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 8004300:	430a      	orrs	r2, r1
 8004302:	605a      	str	r2, [r3, #4]
 8004304:	e019      	b.n	800433a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004306:	4bbd      	ldr	r3, [pc, #756]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	4bbc      	ldr	r3, [pc, #752]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 800430c:	49bd      	ldr	r1, [pc, #756]	; (8004604 <HAL_RCC_OscConfig+0x690>)
 800430e:	400a      	ands	r2, r1
 8004310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004312:	f7ff fb41 	bl	8003998 <HAL_GetTick>
 8004316:	0003      	movs	r3, r0
 8004318:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800431c:	f7ff fb3c 	bl	8003998 <HAL_GetTick>
 8004320:	0002      	movs	r2, r0
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e1eb      	b.n	8004706 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800432e:	4bb3      	ldr	r3, [pc, #716]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	2380      	movs	r3, #128	; 0x80
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4013      	ands	r3, r2
 8004338:	d1f0      	bne.n	800431c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2208      	movs	r2, #8
 8004340:	4013      	ands	r3, r2
 8004342:	d036      	beq.n	80043b2 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d019      	beq.n	8004380 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800434c:	4bab      	ldr	r3, [pc, #684]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 800434e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004350:	4baa      	ldr	r3, [pc, #680]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 8004352:	2101      	movs	r1, #1
 8004354:	430a      	orrs	r2, r1
 8004356:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004358:	f7ff fb1e 	bl	8003998 <HAL_GetTick>
 800435c:	0003      	movs	r3, r0
 800435e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004360:	e008      	b.n	8004374 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004362:	f7ff fb19 	bl	8003998 <HAL_GetTick>
 8004366:	0002      	movs	r2, r0
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d901      	bls.n	8004374 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e1c8      	b.n	8004706 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004374:	4ba1      	ldr	r3, [pc, #644]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 8004376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004378:	2202      	movs	r2, #2
 800437a:	4013      	ands	r3, r2
 800437c:	d0f1      	beq.n	8004362 <HAL_RCC_OscConfig+0x3ee>
 800437e:	e018      	b.n	80043b2 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004380:	4b9e      	ldr	r3, [pc, #632]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 8004382:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004384:	4b9d      	ldr	r3, [pc, #628]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 8004386:	2101      	movs	r1, #1
 8004388:	438a      	bics	r2, r1
 800438a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800438c:	f7ff fb04 	bl	8003998 <HAL_GetTick>
 8004390:	0003      	movs	r3, r0
 8004392:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004394:	e008      	b.n	80043a8 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004396:	f7ff faff 	bl	8003998 <HAL_GetTick>
 800439a:	0002      	movs	r2, r0
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e1ae      	b.n	8004706 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80043a8:	4b94      	ldr	r3, [pc, #592]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 80043aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ac:	2202      	movs	r2, #2
 80043ae:	4013      	ands	r3, r2
 80043b0:	d1f1      	bne.n	8004396 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2204      	movs	r2, #4
 80043b8:	4013      	ands	r3, r2
 80043ba:	d100      	bne.n	80043be <HAL_RCC_OscConfig+0x44a>
 80043bc:	e0ae      	b.n	800451c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043be:	2023      	movs	r0, #35	; 0x23
 80043c0:	183b      	adds	r3, r7, r0
 80043c2:	2200      	movs	r2, #0
 80043c4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043c6:	4b8d      	ldr	r3, [pc, #564]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 80043c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043ca:	2380      	movs	r3, #128	; 0x80
 80043cc:	055b      	lsls	r3, r3, #21
 80043ce:	4013      	ands	r3, r2
 80043d0:	d109      	bne.n	80043e6 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043d2:	4b8a      	ldr	r3, [pc, #552]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 80043d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043d6:	4b89      	ldr	r3, [pc, #548]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 80043d8:	2180      	movs	r1, #128	; 0x80
 80043da:	0549      	lsls	r1, r1, #21
 80043dc:	430a      	orrs	r2, r1
 80043de:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80043e0:	183b      	adds	r3, r7, r0
 80043e2:	2201      	movs	r2, #1
 80043e4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e6:	4b88      	ldr	r3, [pc, #544]	; (8004608 <HAL_RCC_OscConfig+0x694>)
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	2380      	movs	r3, #128	; 0x80
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	4013      	ands	r3, r2
 80043f0:	d11a      	bne.n	8004428 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043f2:	4b85      	ldr	r3, [pc, #532]	; (8004608 <HAL_RCC_OscConfig+0x694>)
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	4b84      	ldr	r3, [pc, #528]	; (8004608 <HAL_RCC_OscConfig+0x694>)
 80043f8:	2180      	movs	r1, #128	; 0x80
 80043fa:	0049      	lsls	r1, r1, #1
 80043fc:	430a      	orrs	r2, r1
 80043fe:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004400:	f7ff faca 	bl	8003998 <HAL_GetTick>
 8004404:	0003      	movs	r3, r0
 8004406:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004408:	e008      	b.n	800441c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800440a:	f7ff fac5 	bl	8003998 <HAL_GetTick>
 800440e:	0002      	movs	r2, r0
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b64      	cmp	r3, #100	; 0x64
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e174      	b.n	8004706 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800441c:	4b7a      	ldr	r3, [pc, #488]	; (8004608 <HAL_RCC_OscConfig+0x694>)
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	2380      	movs	r3, #128	; 0x80
 8004422:	005b      	lsls	r3, r3, #1
 8004424:	4013      	ands	r3, r2
 8004426:	d0f0      	beq.n	800440a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	2380      	movs	r3, #128	; 0x80
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	429a      	cmp	r2, r3
 8004432:	d107      	bne.n	8004444 <HAL_RCC_OscConfig+0x4d0>
 8004434:	4b71      	ldr	r3, [pc, #452]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 8004436:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004438:	4b70      	ldr	r3, [pc, #448]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 800443a:	2180      	movs	r1, #128	; 0x80
 800443c:	0049      	lsls	r1, r1, #1
 800443e:	430a      	orrs	r2, r1
 8004440:	651a      	str	r2, [r3, #80]	; 0x50
 8004442:	e031      	b.n	80044a8 <HAL_RCC_OscConfig+0x534>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10c      	bne.n	8004466 <HAL_RCC_OscConfig+0x4f2>
 800444c:	4b6b      	ldr	r3, [pc, #428]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 800444e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004450:	4b6a      	ldr	r3, [pc, #424]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 8004452:	496c      	ldr	r1, [pc, #432]	; (8004604 <HAL_RCC_OscConfig+0x690>)
 8004454:	400a      	ands	r2, r1
 8004456:	651a      	str	r2, [r3, #80]	; 0x50
 8004458:	4b68      	ldr	r3, [pc, #416]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 800445a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800445c:	4b67      	ldr	r3, [pc, #412]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 800445e:	496b      	ldr	r1, [pc, #428]	; (800460c <HAL_RCC_OscConfig+0x698>)
 8004460:	400a      	ands	r2, r1
 8004462:	651a      	str	r2, [r3, #80]	; 0x50
 8004464:	e020      	b.n	80044a8 <HAL_RCC_OscConfig+0x534>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	689a      	ldr	r2, [r3, #8]
 800446a:	23a0      	movs	r3, #160	; 0xa0
 800446c:	00db      	lsls	r3, r3, #3
 800446e:	429a      	cmp	r2, r3
 8004470:	d10e      	bne.n	8004490 <HAL_RCC_OscConfig+0x51c>
 8004472:	4b62      	ldr	r3, [pc, #392]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 8004474:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004476:	4b61      	ldr	r3, [pc, #388]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 8004478:	2180      	movs	r1, #128	; 0x80
 800447a:	00c9      	lsls	r1, r1, #3
 800447c:	430a      	orrs	r2, r1
 800447e:	651a      	str	r2, [r3, #80]	; 0x50
 8004480:	4b5e      	ldr	r3, [pc, #376]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 8004482:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004484:	4b5d      	ldr	r3, [pc, #372]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 8004486:	2180      	movs	r1, #128	; 0x80
 8004488:	0049      	lsls	r1, r1, #1
 800448a:	430a      	orrs	r2, r1
 800448c:	651a      	str	r2, [r3, #80]	; 0x50
 800448e:	e00b      	b.n	80044a8 <HAL_RCC_OscConfig+0x534>
 8004490:	4b5a      	ldr	r3, [pc, #360]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 8004492:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004494:	4b59      	ldr	r3, [pc, #356]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 8004496:	495b      	ldr	r1, [pc, #364]	; (8004604 <HAL_RCC_OscConfig+0x690>)
 8004498:	400a      	ands	r2, r1
 800449a:	651a      	str	r2, [r3, #80]	; 0x50
 800449c:	4b57      	ldr	r3, [pc, #348]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 800449e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044a0:	4b56      	ldr	r3, [pc, #344]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 80044a2:	495a      	ldr	r1, [pc, #360]	; (800460c <HAL_RCC_OscConfig+0x698>)
 80044a4:	400a      	ands	r2, r1
 80044a6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d015      	beq.n	80044dc <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044b0:	f7ff fa72 	bl	8003998 <HAL_GetTick>
 80044b4:	0003      	movs	r3, r0
 80044b6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044b8:	e009      	b.n	80044ce <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044ba:	f7ff fa6d 	bl	8003998 <HAL_GetTick>
 80044be:	0002      	movs	r2, r0
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	4a52      	ldr	r2, [pc, #328]	; (8004610 <HAL_RCC_OscConfig+0x69c>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e11b      	b.n	8004706 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044ce:	4b4b      	ldr	r3, [pc, #300]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 80044d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044d2:	2380      	movs	r3, #128	; 0x80
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4013      	ands	r3, r2
 80044d8:	d0ef      	beq.n	80044ba <HAL_RCC_OscConfig+0x546>
 80044da:	e014      	b.n	8004506 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044dc:	f7ff fa5c 	bl	8003998 <HAL_GetTick>
 80044e0:	0003      	movs	r3, r0
 80044e2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80044e4:	e009      	b.n	80044fa <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044e6:	f7ff fa57 	bl	8003998 <HAL_GetTick>
 80044ea:	0002      	movs	r2, r0
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	4a47      	ldr	r2, [pc, #284]	; (8004610 <HAL_RCC_OscConfig+0x69c>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e105      	b.n	8004706 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80044fa:	4b40      	ldr	r3, [pc, #256]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 80044fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044fe:	2380      	movs	r3, #128	; 0x80
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4013      	ands	r3, r2
 8004504:	d1ef      	bne.n	80044e6 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004506:	2323      	movs	r3, #35	; 0x23
 8004508:	18fb      	adds	r3, r7, r3
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d105      	bne.n	800451c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004510:	4b3a      	ldr	r3, [pc, #232]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 8004512:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004514:	4b39      	ldr	r3, [pc, #228]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 8004516:	493f      	ldr	r1, [pc, #252]	; (8004614 <HAL_RCC_OscConfig+0x6a0>)
 8004518:	400a      	ands	r2, r1
 800451a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2220      	movs	r2, #32
 8004522:	4013      	ands	r3, r2
 8004524:	d049      	beq.n	80045ba <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d026      	beq.n	800457c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800452e:	4b33      	ldr	r3, [pc, #204]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 8004530:	689a      	ldr	r2, [r3, #8]
 8004532:	4b32      	ldr	r3, [pc, #200]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 8004534:	2101      	movs	r1, #1
 8004536:	430a      	orrs	r2, r1
 8004538:	609a      	str	r2, [r3, #8]
 800453a:	4b30      	ldr	r3, [pc, #192]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 800453c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800453e:	4b2f      	ldr	r3, [pc, #188]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 8004540:	2101      	movs	r1, #1
 8004542:	430a      	orrs	r2, r1
 8004544:	635a      	str	r2, [r3, #52]	; 0x34
 8004546:	4b34      	ldr	r3, [pc, #208]	; (8004618 <HAL_RCC_OscConfig+0x6a4>)
 8004548:	6a1a      	ldr	r2, [r3, #32]
 800454a:	4b33      	ldr	r3, [pc, #204]	; (8004618 <HAL_RCC_OscConfig+0x6a4>)
 800454c:	2180      	movs	r1, #128	; 0x80
 800454e:	0189      	lsls	r1, r1, #6
 8004550:	430a      	orrs	r2, r1
 8004552:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004554:	f7ff fa20 	bl	8003998 <HAL_GetTick>
 8004558:	0003      	movs	r3, r0
 800455a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800455c:	e008      	b.n	8004570 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800455e:	f7ff fa1b 	bl	8003998 <HAL_GetTick>
 8004562:	0002      	movs	r2, r0
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e0ca      	b.n	8004706 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004570:	4b22      	ldr	r3, [pc, #136]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	2202      	movs	r2, #2
 8004576:	4013      	ands	r3, r2
 8004578:	d0f1      	beq.n	800455e <HAL_RCC_OscConfig+0x5ea>
 800457a:	e01e      	b.n	80045ba <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800457c:	4b1f      	ldr	r3, [pc, #124]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	4b1e      	ldr	r3, [pc, #120]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 8004582:	2101      	movs	r1, #1
 8004584:	438a      	bics	r2, r1
 8004586:	609a      	str	r2, [r3, #8]
 8004588:	4b23      	ldr	r3, [pc, #140]	; (8004618 <HAL_RCC_OscConfig+0x6a4>)
 800458a:	6a1a      	ldr	r2, [r3, #32]
 800458c:	4b22      	ldr	r3, [pc, #136]	; (8004618 <HAL_RCC_OscConfig+0x6a4>)
 800458e:	4923      	ldr	r1, [pc, #140]	; (800461c <HAL_RCC_OscConfig+0x6a8>)
 8004590:	400a      	ands	r2, r1
 8004592:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004594:	f7ff fa00 	bl	8003998 <HAL_GetTick>
 8004598:	0003      	movs	r3, r0
 800459a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800459c:	e008      	b.n	80045b0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800459e:	f7ff f9fb 	bl	8003998 <HAL_GetTick>
 80045a2:	0002      	movs	r2, r0
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d901      	bls.n	80045b0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e0aa      	b.n	8004706 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80045b0:	4b12      	ldr	r3, [pc, #72]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	2202      	movs	r2, #2
 80045b6:	4013      	ands	r3, r2
 80045b8:	d1f1      	bne.n	800459e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d100      	bne.n	80045c4 <HAL_RCC_OscConfig+0x650>
 80045c2:	e09f      	b.n	8004704 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	2b0c      	cmp	r3, #12
 80045c8:	d100      	bne.n	80045cc <HAL_RCC_OscConfig+0x658>
 80045ca:	e078      	b.n	80046be <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d159      	bne.n	8004688 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045d4:	4b09      	ldr	r3, [pc, #36]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	4b08      	ldr	r3, [pc, #32]	; (80045fc <HAL_RCC_OscConfig+0x688>)
 80045da:	4911      	ldr	r1, [pc, #68]	; (8004620 <HAL_RCC_OscConfig+0x6ac>)
 80045dc:	400a      	ands	r2, r1
 80045de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e0:	f7ff f9da 	bl	8003998 <HAL_GetTick>
 80045e4:	0003      	movs	r3, r0
 80045e6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80045e8:	e01c      	b.n	8004624 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045ea:	f7ff f9d5 	bl	8003998 <HAL_GetTick>
 80045ee:	0002      	movs	r2, r0
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d915      	bls.n	8004624 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e084      	b.n	8004706 <HAL_RCC_OscConfig+0x792>
 80045fc:	40021000 	.word	0x40021000
 8004600:	ffff1fff 	.word	0xffff1fff
 8004604:	fffffeff 	.word	0xfffffeff
 8004608:	40007000 	.word	0x40007000
 800460c:	fffffbff 	.word	0xfffffbff
 8004610:	00001388 	.word	0x00001388
 8004614:	efffffff 	.word	0xefffffff
 8004618:	40010000 	.word	0x40010000
 800461c:	ffffdfff 	.word	0xffffdfff
 8004620:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004624:	4b3a      	ldr	r3, [pc, #232]	; (8004710 <HAL_RCC_OscConfig+0x79c>)
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	2380      	movs	r3, #128	; 0x80
 800462a:	049b      	lsls	r3, r3, #18
 800462c:	4013      	ands	r3, r2
 800462e:	d1dc      	bne.n	80045ea <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004630:	4b37      	ldr	r3, [pc, #220]	; (8004710 <HAL_RCC_OscConfig+0x79c>)
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	4a37      	ldr	r2, [pc, #220]	; (8004714 <HAL_RCC_OscConfig+0x7a0>)
 8004636:	4013      	ands	r3, r2
 8004638:	0019      	movs	r1, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004642:	431a      	orrs	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004648:	431a      	orrs	r2, r3
 800464a:	4b31      	ldr	r3, [pc, #196]	; (8004710 <HAL_RCC_OscConfig+0x79c>)
 800464c:	430a      	orrs	r2, r1
 800464e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004650:	4b2f      	ldr	r3, [pc, #188]	; (8004710 <HAL_RCC_OscConfig+0x79c>)
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	4b2e      	ldr	r3, [pc, #184]	; (8004710 <HAL_RCC_OscConfig+0x79c>)
 8004656:	2180      	movs	r1, #128	; 0x80
 8004658:	0449      	lsls	r1, r1, #17
 800465a:	430a      	orrs	r2, r1
 800465c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800465e:	f7ff f99b 	bl	8003998 <HAL_GetTick>
 8004662:	0003      	movs	r3, r0
 8004664:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004666:	e008      	b.n	800467a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004668:	f7ff f996 	bl	8003998 <HAL_GetTick>
 800466c:	0002      	movs	r2, r0
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b02      	cmp	r3, #2
 8004674:	d901      	bls.n	800467a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e045      	b.n	8004706 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800467a:	4b25      	ldr	r3, [pc, #148]	; (8004710 <HAL_RCC_OscConfig+0x79c>)
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	2380      	movs	r3, #128	; 0x80
 8004680:	049b      	lsls	r3, r3, #18
 8004682:	4013      	ands	r3, r2
 8004684:	d0f0      	beq.n	8004668 <HAL_RCC_OscConfig+0x6f4>
 8004686:	e03d      	b.n	8004704 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004688:	4b21      	ldr	r3, [pc, #132]	; (8004710 <HAL_RCC_OscConfig+0x79c>)
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	4b20      	ldr	r3, [pc, #128]	; (8004710 <HAL_RCC_OscConfig+0x79c>)
 800468e:	4922      	ldr	r1, [pc, #136]	; (8004718 <HAL_RCC_OscConfig+0x7a4>)
 8004690:	400a      	ands	r2, r1
 8004692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004694:	f7ff f980 	bl	8003998 <HAL_GetTick>
 8004698:	0003      	movs	r3, r0
 800469a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800469c:	e008      	b.n	80046b0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800469e:	f7ff f97b 	bl	8003998 <HAL_GetTick>
 80046a2:	0002      	movs	r2, r0
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e02a      	b.n	8004706 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80046b0:	4b17      	ldr	r3, [pc, #92]	; (8004710 <HAL_RCC_OscConfig+0x79c>)
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	2380      	movs	r3, #128	; 0x80
 80046b6:	049b      	lsls	r3, r3, #18
 80046b8:	4013      	ands	r3, r2
 80046ba:	d1f0      	bne.n	800469e <HAL_RCC_OscConfig+0x72a>
 80046bc:	e022      	b.n	8004704 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d101      	bne.n	80046ca <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e01d      	b.n	8004706 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046ca:	4b11      	ldr	r3, [pc, #68]	; (8004710 <HAL_RCC_OscConfig+0x79c>)
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	2380      	movs	r3, #128	; 0x80
 80046d4:	025b      	lsls	r3, r3, #9
 80046d6:	401a      	ands	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046dc:	429a      	cmp	r2, r3
 80046de:	d10f      	bne.n	8004700 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	23f0      	movs	r3, #240	; 0xf0
 80046e4:	039b      	lsls	r3, r3, #14
 80046e6:	401a      	ands	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d107      	bne.n	8004700 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	23c0      	movs	r3, #192	; 0xc0
 80046f4:	041b      	lsls	r3, r3, #16
 80046f6:	401a      	ands	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d001      	beq.n	8004704 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e000      	b.n	8004706 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	0018      	movs	r0, r3
 8004708:	46bd      	mov	sp, r7
 800470a:	b00a      	add	sp, #40	; 0x28
 800470c:	bdb0      	pop	{r4, r5, r7, pc}
 800470e:	46c0      	nop			; (mov r8, r8)
 8004710:	40021000 	.word	0x40021000
 8004714:	ff02ffff 	.word	0xff02ffff
 8004718:	feffffff 	.word	0xfeffffff

0800471c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800471c:	b5b0      	push	{r4, r5, r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e128      	b.n	8004982 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004730:	4b96      	ldr	r3, [pc, #600]	; (800498c <HAL_RCC_ClockConfig+0x270>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2201      	movs	r2, #1
 8004736:	4013      	ands	r3, r2
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	429a      	cmp	r2, r3
 800473c:	d91e      	bls.n	800477c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800473e:	4b93      	ldr	r3, [pc, #588]	; (800498c <HAL_RCC_ClockConfig+0x270>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2201      	movs	r2, #1
 8004744:	4393      	bics	r3, r2
 8004746:	0019      	movs	r1, r3
 8004748:	4b90      	ldr	r3, [pc, #576]	; (800498c <HAL_RCC_ClockConfig+0x270>)
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	430a      	orrs	r2, r1
 800474e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004750:	f7ff f922 	bl	8003998 <HAL_GetTick>
 8004754:	0003      	movs	r3, r0
 8004756:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004758:	e009      	b.n	800476e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800475a:	f7ff f91d 	bl	8003998 <HAL_GetTick>
 800475e:	0002      	movs	r2, r0
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	4a8a      	ldr	r2, [pc, #552]	; (8004990 <HAL_RCC_ClockConfig+0x274>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d901      	bls.n	800476e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e109      	b.n	8004982 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800476e:	4b87      	ldr	r3, [pc, #540]	; (800498c <HAL_RCC_ClockConfig+0x270>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2201      	movs	r2, #1
 8004774:	4013      	ands	r3, r2
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	429a      	cmp	r2, r3
 800477a:	d1ee      	bne.n	800475a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2202      	movs	r2, #2
 8004782:	4013      	ands	r3, r2
 8004784:	d009      	beq.n	800479a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004786:	4b83      	ldr	r3, [pc, #524]	; (8004994 <HAL_RCC_ClockConfig+0x278>)
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	22f0      	movs	r2, #240	; 0xf0
 800478c:	4393      	bics	r3, r2
 800478e:	0019      	movs	r1, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689a      	ldr	r2, [r3, #8]
 8004794:	4b7f      	ldr	r3, [pc, #508]	; (8004994 <HAL_RCC_ClockConfig+0x278>)
 8004796:	430a      	orrs	r2, r1
 8004798:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2201      	movs	r2, #1
 80047a0:	4013      	ands	r3, r2
 80047a2:	d100      	bne.n	80047a6 <HAL_RCC_ClockConfig+0x8a>
 80047a4:	e089      	b.n	80048ba <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d107      	bne.n	80047be <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047ae:	4b79      	ldr	r3, [pc, #484]	; (8004994 <HAL_RCC_ClockConfig+0x278>)
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	2380      	movs	r3, #128	; 0x80
 80047b4:	029b      	lsls	r3, r3, #10
 80047b6:	4013      	ands	r3, r2
 80047b8:	d120      	bne.n	80047fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e0e1      	b.n	8004982 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	2b03      	cmp	r3, #3
 80047c4:	d107      	bne.n	80047d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047c6:	4b73      	ldr	r3, [pc, #460]	; (8004994 <HAL_RCC_ClockConfig+0x278>)
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	2380      	movs	r3, #128	; 0x80
 80047cc:	049b      	lsls	r3, r3, #18
 80047ce:	4013      	ands	r3, r2
 80047d0:	d114      	bne.n	80047fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e0d5      	b.n	8004982 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d106      	bne.n	80047ec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047de:	4b6d      	ldr	r3, [pc, #436]	; (8004994 <HAL_RCC_ClockConfig+0x278>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2204      	movs	r2, #4
 80047e4:	4013      	ands	r3, r2
 80047e6:	d109      	bne.n	80047fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e0ca      	b.n	8004982 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80047ec:	4b69      	ldr	r3, [pc, #420]	; (8004994 <HAL_RCC_ClockConfig+0x278>)
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	2380      	movs	r3, #128	; 0x80
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4013      	ands	r3, r2
 80047f6:	d101      	bne.n	80047fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e0c2      	b.n	8004982 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047fc:	4b65      	ldr	r3, [pc, #404]	; (8004994 <HAL_RCC_ClockConfig+0x278>)
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	2203      	movs	r2, #3
 8004802:	4393      	bics	r3, r2
 8004804:	0019      	movs	r1, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685a      	ldr	r2, [r3, #4]
 800480a:	4b62      	ldr	r3, [pc, #392]	; (8004994 <HAL_RCC_ClockConfig+0x278>)
 800480c:	430a      	orrs	r2, r1
 800480e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004810:	f7ff f8c2 	bl	8003998 <HAL_GetTick>
 8004814:	0003      	movs	r3, r0
 8004816:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	2b02      	cmp	r3, #2
 800481e:	d111      	bne.n	8004844 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004820:	e009      	b.n	8004836 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004822:	f7ff f8b9 	bl	8003998 <HAL_GetTick>
 8004826:	0002      	movs	r2, r0
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	4a58      	ldr	r2, [pc, #352]	; (8004990 <HAL_RCC_ClockConfig+0x274>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e0a5      	b.n	8004982 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004836:	4b57      	ldr	r3, [pc, #348]	; (8004994 <HAL_RCC_ClockConfig+0x278>)
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	220c      	movs	r2, #12
 800483c:	4013      	ands	r3, r2
 800483e:	2b08      	cmp	r3, #8
 8004840:	d1ef      	bne.n	8004822 <HAL_RCC_ClockConfig+0x106>
 8004842:	e03a      	b.n	80048ba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	2b03      	cmp	r3, #3
 800484a:	d111      	bne.n	8004870 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800484c:	e009      	b.n	8004862 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800484e:	f7ff f8a3 	bl	8003998 <HAL_GetTick>
 8004852:	0002      	movs	r2, r0
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	4a4d      	ldr	r2, [pc, #308]	; (8004990 <HAL_RCC_ClockConfig+0x274>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e08f      	b.n	8004982 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004862:	4b4c      	ldr	r3, [pc, #304]	; (8004994 <HAL_RCC_ClockConfig+0x278>)
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	220c      	movs	r2, #12
 8004868:	4013      	ands	r3, r2
 800486a:	2b0c      	cmp	r3, #12
 800486c:	d1ef      	bne.n	800484e <HAL_RCC_ClockConfig+0x132>
 800486e:	e024      	b.n	80048ba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d11b      	bne.n	80048b0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004878:	e009      	b.n	800488e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800487a:	f7ff f88d 	bl	8003998 <HAL_GetTick>
 800487e:	0002      	movs	r2, r0
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	4a42      	ldr	r2, [pc, #264]	; (8004990 <HAL_RCC_ClockConfig+0x274>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d901      	bls.n	800488e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e079      	b.n	8004982 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800488e:	4b41      	ldr	r3, [pc, #260]	; (8004994 <HAL_RCC_ClockConfig+0x278>)
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	220c      	movs	r2, #12
 8004894:	4013      	ands	r3, r2
 8004896:	2b04      	cmp	r3, #4
 8004898:	d1ef      	bne.n	800487a <HAL_RCC_ClockConfig+0x15e>
 800489a:	e00e      	b.n	80048ba <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800489c:	f7ff f87c 	bl	8003998 <HAL_GetTick>
 80048a0:	0002      	movs	r2, r0
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	4a3a      	ldr	r2, [pc, #232]	; (8004990 <HAL_RCC_ClockConfig+0x274>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d901      	bls.n	80048b0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e068      	b.n	8004982 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80048b0:	4b38      	ldr	r3, [pc, #224]	; (8004994 <HAL_RCC_ClockConfig+0x278>)
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	220c      	movs	r2, #12
 80048b6:	4013      	ands	r3, r2
 80048b8:	d1f0      	bne.n	800489c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048ba:	4b34      	ldr	r3, [pc, #208]	; (800498c <HAL_RCC_ClockConfig+0x270>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2201      	movs	r2, #1
 80048c0:	4013      	ands	r3, r2
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d21e      	bcs.n	8004906 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048c8:	4b30      	ldr	r3, [pc, #192]	; (800498c <HAL_RCC_ClockConfig+0x270>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2201      	movs	r2, #1
 80048ce:	4393      	bics	r3, r2
 80048d0:	0019      	movs	r1, r3
 80048d2:	4b2e      	ldr	r3, [pc, #184]	; (800498c <HAL_RCC_ClockConfig+0x270>)
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80048da:	f7ff f85d 	bl	8003998 <HAL_GetTick>
 80048de:	0003      	movs	r3, r0
 80048e0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048e2:	e009      	b.n	80048f8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048e4:	f7ff f858 	bl	8003998 <HAL_GetTick>
 80048e8:	0002      	movs	r2, r0
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	4a28      	ldr	r2, [pc, #160]	; (8004990 <HAL_RCC_ClockConfig+0x274>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e044      	b.n	8004982 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048f8:	4b24      	ldr	r3, [pc, #144]	; (800498c <HAL_RCC_ClockConfig+0x270>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2201      	movs	r2, #1
 80048fe:	4013      	ands	r3, r2
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	429a      	cmp	r2, r3
 8004904:	d1ee      	bne.n	80048e4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2204      	movs	r2, #4
 800490c:	4013      	ands	r3, r2
 800490e:	d009      	beq.n	8004924 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004910:	4b20      	ldr	r3, [pc, #128]	; (8004994 <HAL_RCC_ClockConfig+0x278>)
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	4a20      	ldr	r2, [pc, #128]	; (8004998 <HAL_RCC_ClockConfig+0x27c>)
 8004916:	4013      	ands	r3, r2
 8004918:	0019      	movs	r1, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68da      	ldr	r2, [r3, #12]
 800491e:	4b1d      	ldr	r3, [pc, #116]	; (8004994 <HAL_RCC_ClockConfig+0x278>)
 8004920:	430a      	orrs	r2, r1
 8004922:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2208      	movs	r2, #8
 800492a:	4013      	ands	r3, r2
 800492c:	d00a      	beq.n	8004944 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800492e:	4b19      	ldr	r3, [pc, #100]	; (8004994 <HAL_RCC_ClockConfig+0x278>)
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	4a1a      	ldr	r2, [pc, #104]	; (800499c <HAL_RCC_ClockConfig+0x280>)
 8004934:	4013      	ands	r3, r2
 8004936:	0019      	movs	r1, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	00da      	lsls	r2, r3, #3
 800493e:	4b15      	ldr	r3, [pc, #84]	; (8004994 <HAL_RCC_ClockConfig+0x278>)
 8004940:	430a      	orrs	r2, r1
 8004942:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004944:	f000 f832 	bl	80049ac <HAL_RCC_GetSysClockFreq>
 8004948:	0001      	movs	r1, r0
 800494a:	4b12      	ldr	r3, [pc, #72]	; (8004994 <HAL_RCC_ClockConfig+0x278>)
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	091b      	lsrs	r3, r3, #4
 8004950:	220f      	movs	r2, #15
 8004952:	4013      	ands	r3, r2
 8004954:	4a12      	ldr	r2, [pc, #72]	; (80049a0 <HAL_RCC_ClockConfig+0x284>)
 8004956:	5cd3      	ldrb	r3, [r2, r3]
 8004958:	000a      	movs	r2, r1
 800495a:	40da      	lsrs	r2, r3
 800495c:	4b11      	ldr	r3, [pc, #68]	; (80049a4 <HAL_RCC_ClockConfig+0x288>)
 800495e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004960:	4b11      	ldr	r3, [pc, #68]	; (80049a8 <HAL_RCC_ClockConfig+0x28c>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	250b      	movs	r5, #11
 8004966:	197c      	adds	r4, r7, r5
 8004968:	0018      	movs	r0, r3
 800496a:	f7fe ffcf 	bl	800390c <HAL_InitTick>
 800496e:	0003      	movs	r3, r0
 8004970:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004972:	197b      	adds	r3, r7, r5
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d002      	beq.n	8004980 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800497a:	197b      	adds	r3, r7, r5
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	e000      	b.n	8004982 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	0018      	movs	r0, r3
 8004984:	46bd      	mov	sp, r7
 8004986:	b004      	add	sp, #16
 8004988:	bdb0      	pop	{r4, r5, r7, pc}
 800498a:	46c0      	nop			; (mov r8, r8)
 800498c:	40022000 	.word	0x40022000
 8004990:	00001388 	.word	0x00001388
 8004994:	40021000 	.word	0x40021000
 8004998:	fffff8ff 	.word	0xfffff8ff
 800499c:	ffffc7ff 	.word	0xffffc7ff
 80049a0:	0800bbf8 	.word	0x0800bbf8
 80049a4:	20000000 	.word	0x20000000
 80049a8:	20000004 	.word	0x20000004

080049ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049ac:	b5b0      	push	{r4, r5, r7, lr}
 80049ae:	b08e      	sub	sp, #56	; 0x38
 80049b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80049b2:	4b4c      	ldr	r3, [pc, #304]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x138>)
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049ba:	230c      	movs	r3, #12
 80049bc:	4013      	ands	r3, r2
 80049be:	2b0c      	cmp	r3, #12
 80049c0:	d014      	beq.n	80049ec <HAL_RCC_GetSysClockFreq+0x40>
 80049c2:	d900      	bls.n	80049c6 <HAL_RCC_GetSysClockFreq+0x1a>
 80049c4:	e07b      	b.n	8004abe <HAL_RCC_GetSysClockFreq+0x112>
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	d002      	beq.n	80049d0 <HAL_RCC_GetSysClockFreq+0x24>
 80049ca:	2b08      	cmp	r3, #8
 80049cc:	d00b      	beq.n	80049e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80049ce:	e076      	b.n	8004abe <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80049d0:	4b44      	ldr	r3, [pc, #272]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x138>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2210      	movs	r2, #16
 80049d6:	4013      	ands	r3, r2
 80049d8:	d002      	beq.n	80049e0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80049da:	4b43      	ldr	r3, [pc, #268]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80049dc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80049de:	e07c      	b.n	8004ada <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80049e0:	4b42      	ldr	r3, [pc, #264]	; (8004aec <HAL_RCC_GetSysClockFreq+0x140>)
 80049e2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80049e4:	e079      	b.n	8004ada <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049e6:	4b42      	ldr	r3, [pc, #264]	; (8004af0 <HAL_RCC_GetSysClockFreq+0x144>)
 80049e8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80049ea:	e076      	b.n	8004ada <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80049ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ee:	0c9a      	lsrs	r2, r3, #18
 80049f0:	230f      	movs	r3, #15
 80049f2:	401a      	ands	r2, r3
 80049f4:	4b3f      	ldr	r3, [pc, #252]	; (8004af4 <HAL_RCC_GetSysClockFreq+0x148>)
 80049f6:	5c9b      	ldrb	r3, [r3, r2]
 80049f8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80049fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049fc:	0d9a      	lsrs	r2, r3, #22
 80049fe:	2303      	movs	r3, #3
 8004a00:	4013      	ands	r3, r2
 8004a02:	3301      	adds	r3, #1
 8004a04:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a06:	4b37      	ldr	r3, [pc, #220]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x138>)
 8004a08:	68da      	ldr	r2, [r3, #12]
 8004a0a:	2380      	movs	r3, #128	; 0x80
 8004a0c:	025b      	lsls	r3, r3, #9
 8004a0e:	4013      	ands	r3, r2
 8004a10:	d01a      	beq.n	8004a48 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a14:	61bb      	str	r3, [r7, #24]
 8004a16:	2300      	movs	r3, #0
 8004a18:	61fb      	str	r3, [r7, #28]
 8004a1a:	4a35      	ldr	r2, [pc, #212]	; (8004af0 <HAL_RCC_GetSysClockFreq+0x144>)
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	69b8      	ldr	r0, [r7, #24]
 8004a20:	69f9      	ldr	r1, [r7, #28]
 8004a22:	f7fb fd61 	bl	80004e8 <__aeabi_lmul>
 8004a26:	0002      	movs	r2, r0
 8004a28:	000b      	movs	r3, r1
 8004a2a:	0010      	movs	r0, r2
 8004a2c:	0019      	movs	r1, r3
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a30:	613b      	str	r3, [r7, #16]
 8004a32:	2300      	movs	r3, #0
 8004a34:	617b      	str	r3, [r7, #20]
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	f7fb fd35 	bl	80004a8 <__aeabi_uldivmod>
 8004a3e:	0002      	movs	r2, r0
 8004a40:	000b      	movs	r3, r1
 8004a42:	0013      	movs	r3, r2
 8004a44:	637b      	str	r3, [r7, #52]	; 0x34
 8004a46:	e037      	b.n	8004ab8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004a48:	4b26      	ldr	r3, [pc, #152]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x138>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2210      	movs	r2, #16
 8004a4e:	4013      	ands	r3, r2
 8004a50:	d01a      	beq.n	8004a88 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8004a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a54:	60bb      	str	r3, [r7, #8]
 8004a56:	2300      	movs	r3, #0
 8004a58:	60fb      	str	r3, [r7, #12]
 8004a5a:	4a23      	ldr	r2, [pc, #140]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	68b8      	ldr	r0, [r7, #8]
 8004a60:	68f9      	ldr	r1, [r7, #12]
 8004a62:	f7fb fd41 	bl	80004e8 <__aeabi_lmul>
 8004a66:	0002      	movs	r2, r0
 8004a68:	000b      	movs	r3, r1
 8004a6a:	0010      	movs	r0, r2
 8004a6c:	0019      	movs	r1, r3
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	603b      	str	r3, [r7, #0]
 8004a72:	2300      	movs	r3, #0
 8004a74:	607b      	str	r3, [r7, #4]
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f7fb fd15 	bl	80004a8 <__aeabi_uldivmod>
 8004a7e:	0002      	movs	r2, r0
 8004a80:	000b      	movs	r3, r1
 8004a82:	0013      	movs	r3, r2
 8004a84:	637b      	str	r3, [r7, #52]	; 0x34
 8004a86:	e017      	b.n	8004ab8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8a:	0018      	movs	r0, r3
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	0019      	movs	r1, r3
 8004a90:	4a16      	ldr	r2, [pc, #88]	; (8004aec <HAL_RCC_GetSysClockFreq+0x140>)
 8004a92:	2300      	movs	r3, #0
 8004a94:	f7fb fd28 	bl	80004e8 <__aeabi_lmul>
 8004a98:	0002      	movs	r2, r0
 8004a9a:	000b      	movs	r3, r1
 8004a9c:	0010      	movs	r0, r2
 8004a9e:	0019      	movs	r1, r3
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	001c      	movs	r4, r3
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	001d      	movs	r5, r3
 8004aa8:	0022      	movs	r2, r4
 8004aaa:	002b      	movs	r3, r5
 8004aac:	f7fb fcfc 	bl	80004a8 <__aeabi_uldivmod>
 8004ab0:	0002      	movs	r2, r0
 8004ab2:	000b      	movs	r3, r1
 8004ab4:	0013      	movs	r3, r2
 8004ab6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8004ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004abc:	e00d      	b.n	8004ada <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004abe:	4b09      	ldr	r3, [pc, #36]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x138>)
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	0b5b      	lsrs	r3, r3, #13
 8004ac4:	2207      	movs	r2, #7
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004aca:	6a3b      	ldr	r3, [r7, #32]
 8004acc:	3301      	adds	r3, #1
 8004ace:	2280      	movs	r2, #128	; 0x80
 8004ad0:	0212      	lsls	r2, r2, #8
 8004ad2:	409a      	lsls	r2, r3
 8004ad4:	0013      	movs	r3, r2
 8004ad6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004ad8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004adc:	0018      	movs	r0, r3
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	b00e      	add	sp, #56	; 0x38
 8004ae2:	bdb0      	pop	{r4, r5, r7, pc}
 8004ae4:	40021000 	.word	0x40021000
 8004ae8:	003d0900 	.word	0x003d0900
 8004aec:	00f42400 	.word	0x00f42400
 8004af0:	007a1200 	.word	0x007a1200
 8004af4:	0800bc10 	.word	0x0800bc10

08004af8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004afc:	4b02      	ldr	r3, [pc, #8]	; (8004b08 <HAL_RCC_GetHCLKFreq+0x10>)
 8004afe:	681b      	ldr	r3, [r3, #0]
}
 8004b00:	0018      	movs	r0, r3
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	46c0      	nop			; (mov r8, r8)
 8004b08:	20000000 	.word	0x20000000

08004b0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b10:	f7ff fff2 	bl	8004af8 <HAL_RCC_GetHCLKFreq>
 8004b14:	0001      	movs	r1, r0
 8004b16:	4b06      	ldr	r3, [pc, #24]	; (8004b30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	0a1b      	lsrs	r3, r3, #8
 8004b1c:	2207      	movs	r2, #7
 8004b1e:	4013      	ands	r3, r2
 8004b20:	4a04      	ldr	r2, [pc, #16]	; (8004b34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b22:	5cd3      	ldrb	r3, [r2, r3]
 8004b24:	40d9      	lsrs	r1, r3
 8004b26:	000b      	movs	r3, r1
}
 8004b28:	0018      	movs	r0, r3
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	46c0      	nop			; (mov r8, r8)
 8004b30:	40021000 	.word	0x40021000
 8004b34:	0800bc08 	.word	0x0800bc08

08004b38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b3c:	f7ff ffdc 	bl	8004af8 <HAL_RCC_GetHCLKFreq>
 8004b40:	0001      	movs	r1, r0
 8004b42:	4b06      	ldr	r3, [pc, #24]	; (8004b5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	0adb      	lsrs	r3, r3, #11
 8004b48:	2207      	movs	r2, #7
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	4a04      	ldr	r2, [pc, #16]	; (8004b60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b4e:	5cd3      	ldrb	r3, [r2, r3]
 8004b50:	40d9      	lsrs	r1, r3
 8004b52:	000b      	movs	r3, r1
}
 8004b54:	0018      	movs	r0, r3
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	46c0      	nop			; (mov r8, r8)
 8004b5c:	40021000 	.word	0x40021000
 8004b60:	0800bc08 	.word	0x0800bc08

08004b64 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004b6c:	2317      	movs	r3, #23
 8004b6e:	18fb      	adds	r3, r7, r3
 8004b70:	2200      	movs	r2, #0
 8004b72:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	d106      	bne.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	2380      	movs	r3, #128	; 0x80
 8004b84:	011b      	lsls	r3, r3, #4
 8004b86:	4013      	ands	r3, r2
 8004b88:	d100      	bne.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x28>
 8004b8a:	e104      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b8c:	4bb9      	ldr	r3, [pc, #740]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004b8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b90:	2380      	movs	r3, #128	; 0x80
 8004b92:	055b      	lsls	r3, r3, #21
 8004b94:	4013      	ands	r3, r2
 8004b96:	d10a      	bne.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b98:	4bb6      	ldr	r3, [pc, #728]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004b9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b9c:	4bb5      	ldr	r3, [pc, #724]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004b9e:	2180      	movs	r1, #128	; 0x80
 8004ba0:	0549      	lsls	r1, r1, #21
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004ba6:	2317      	movs	r3, #23
 8004ba8:	18fb      	adds	r3, r7, r3
 8004baa:	2201      	movs	r2, #1
 8004bac:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bae:	4bb2      	ldr	r3, [pc, #712]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	2380      	movs	r3, #128	; 0x80
 8004bb4:	005b      	lsls	r3, r3, #1
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	d11a      	bne.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bba:	4baf      	ldr	r3, [pc, #700]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	4bae      	ldr	r3, [pc, #696]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004bc0:	2180      	movs	r1, #128	; 0x80
 8004bc2:	0049      	lsls	r1, r1, #1
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bc8:	f7fe fee6 	bl	8003998 <HAL_GetTick>
 8004bcc:	0003      	movs	r3, r0
 8004bce:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bd0:	e008      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bd2:	f7fe fee1 	bl	8003998 <HAL_GetTick>
 8004bd6:	0002      	movs	r2, r0
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b64      	cmp	r3, #100	; 0x64
 8004bde:	d901      	bls.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e143      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be4:	4ba4      	ldr	r3, [pc, #656]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	2380      	movs	r3, #128	; 0x80
 8004bea:	005b      	lsls	r3, r3, #1
 8004bec:	4013      	ands	r3, r2
 8004bee:	d0f0      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004bf0:	4ba0      	ldr	r3, [pc, #640]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	23c0      	movs	r3, #192	; 0xc0
 8004bf6:	039b      	lsls	r3, r3, #14
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	23c0      	movs	r3, #192	; 0xc0
 8004c02:	039b      	lsls	r3, r3, #14
 8004c04:	4013      	ands	r3, r2
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d107      	bne.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	23c0      	movs	r3, #192	; 0xc0
 8004c12:	039b      	lsls	r3, r3, #14
 8004c14:	4013      	ands	r3, r2
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d013      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685a      	ldr	r2, [r3, #4]
 8004c20:	23c0      	movs	r3, #192	; 0xc0
 8004c22:	029b      	lsls	r3, r3, #10
 8004c24:	401a      	ands	r2, r3
 8004c26:	23c0      	movs	r3, #192	; 0xc0
 8004c28:	029b      	lsls	r3, r3, #10
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d10a      	bne.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004c2e:	4b91      	ldr	r3, [pc, #580]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	2380      	movs	r3, #128	; 0x80
 8004c34:	029b      	lsls	r3, r3, #10
 8004c36:	401a      	ands	r2, r3
 8004c38:	2380      	movs	r3, #128	; 0x80
 8004c3a:	029b      	lsls	r3, r3, #10
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d101      	bne.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e113      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004c44:	4b8b      	ldr	r3, [pc, #556]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004c46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c48:	23c0      	movs	r3, #192	; 0xc0
 8004c4a:	029b      	lsls	r3, r3, #10
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d049      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	23c0      	movs	r3, #192	; 0xc0
 8004c5c:	029b      	lsls	r3, r3, #10
 8004c5e:	4013      	ands	r3, r2
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d004      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2220      	movs	r2, #32
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	d10d      	bne.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689a      	ldr	r2, [r3, #8]
 8004c74:	23c0      	movs	r3, #192	; 0xc0
 8004c76:	029b      	lsls	r3, r3, #10
 8004c78:	4013      	ands	r3, r2
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d034      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	2380      	movs	r3, #128	; 0x80
 8004c86:	011b      	lsls	r3, r3, #4
 8004c88:	4013      	ands	r3, r2
 8004c8a:	d02e      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004c8c:	4b79      	ldr	r3, [pc, #484]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c90:	4a7a      	ldr	r2, [pc, #488]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004c92:	4013      	ands	r3, r2
 8004c94:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c96:	4b77      	ldr	r3, [pc, #476]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004c98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c9a:	4b76      	ldr	r3, [pc, #472]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004c9c:	2180      	movs	r1, #128	; 0x80
 8004c9e:	0309      	lsls	r1, r1, #12
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ca4:	4b73      	ldr	r3, [pc, #460]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004ca6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ca8:	4b72      	ldr	r3, [pc, #456]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004caa:	4975      	ldr	r1, [pc, #468]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004cac:	400a      	ands	r2, r1
 8004cae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004cb0:	4b70      	ldr	r3, [pc, #448]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	2380      	movs	r3, #128	; 0x80
 8004cba:	005b      	lsls	r3, r3, #1
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	d014      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc0:	f7fe fe6a 	bl	8003998 <HAL_GetTick>
 8004cc4:	0003      	movs	r3, r0
 8004cc6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cc8:	e009      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cca:	f7fe fe65 	bl	8003998 <HAL_GetTick>
 8004cce:	0002      	movs	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	4a6b      	ldr	r2, [pc, #428]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e0c6      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cde:	4b65      	ldr	r3, [pc, #404]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004ce0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ce2:	2380      	movs	r3, #128	; 0x80
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	d0ef      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	2380      	movs	r3, #128	; 0x80
 8004cf0:	011b      	lsls	r3, r3, #4
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	d01f      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689a      	ldr	r2, [r3, #8]
 8004cfa:	23c0      	movs	r3, #192	; 0xc0
 8004cfc:	029b      	lsls	r3, r3, #10
 8004cfe:	401a      	ands	r2, r3
 8004d00:	23c0      	movs	r3, #192	; 0xc0
 8004d02:	029b      	lsls	r3, r3, #10
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d10c      	bne.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8004d08:	4b5a      	ldr	r3, [pc, #360]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a5e      	ldr	r2, [pc, #376]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004d0e:	4013      	ands	r3, r2
 8004d10:	0019      	movs	r1, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	689a      	ldr	r2, [r3, #8]
 8004d16:	23c0      	movs	r3, #192	; 0xc0
 8004d18:	039b      	lsls	r3, r3, #14
 8004d1a:	401a      	ands	r2, r3
 8004d1c:	4b55      	ldr	r3, [pc, #340]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	601a      	str	r2, [r3, #0]
 8004d22:	4b54      	ldr	r3, [pc, #336]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004d24:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	689a      	ldr	r2, [r3, #8]
 8004d2a:	23c0      	movs	r3, #192	; 0xc0
 8004d2c:	029b      	lsls	r3, r3, #10
 8004d2e:	401a      	ands	r2, r3
 8004d30:	4b50      	ldr	r3, [pc, #320]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004d32:	430a      	orrs	r2, r1
 8004d34:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	d01f      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685a      	ldr	r2, [r3, #4]
 8004d44:	23c0      	movs	r3, #192	; 0xc0
 8004d46:	029b      	lsls	r3, r3, #10
 8004d48:	401a      	ands	r2, r3
 8004d4a:	23c0      	movs	r3, #192	; 0xc0
 8004d4c:	029b      	lsls	r3, r3, #10
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d10c      	bne.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8004d52:	4b48      	ldr	r3, [pc, #288]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a4c      	ldr	r2, [pc, #304]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004d58:	4013      	ands	r3, r2
 8004d5a:	0019      	movs	r1, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685a      	ldr	r2, [r3, #4]
 8004d60:	23c0      	movs	r3, #192	; 0xc0
 8004d62:	039b      	lsls	r3, r3, #14
 8004d64:	401a      	ands	r2, r3
 8004d66:	4b43      	ldr	r3, [pc, #268]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	4b41      	ldr	r3, [pc, #260]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004d6e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	23c0      	movs	r3, #192	; 0xc0
 8004d76:	029b      	lsls	r3, r3, #10
 8004d78:	401a      	ands	r2, r3
 8004d7a:	4b3e      	ldr	r3, [pc, #248]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004d80:	2317      	movs	r3, #23
 8004d82:	18fb      	adds	r3, r7, r3
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d105      	bne.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d8a:	4b3a      	ldr	r3, [pc, #232]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004d8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d8e:	4b39      	ldr	r3, [pc, #228]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004d90:	493e      	ldr	r1, [pc, #248]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004d92:	400a      	ands	r2, r1
 8004d94:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	d009      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004da0:	4b34      	ldr	r3, [pc, #208]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004da4:	2203      	movs	r2, #3
 8004da6:	4393      	bics	r3, r2
 8004da8:	0019      	movs	r1, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68da      	ldr	r2, [r3, #12]
 8004dae:	4b31      	ldr	r3, [pc, #196]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004db0:	430a      	orrs	r2, r1
 8004db2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2202      	movs	r2, #2
 8004dba:	4013      	ands	r3, r2
 8004dbc:	d009      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004dbe:	4b2d      	ldr	r3, [pc, #180]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dc2:	220c      	movs	r2, #12
 8004dc4:	4393      	bics	r3, r2
 8004dc6:	0019      	movs	r1, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	691a      	ldr	r2, [r3, #16]
 8004dcc:	4b29      	ldr	r3, [pc, #164]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2204      	movs	r2, #4
 8004dd8:	4013      	ands	r3, r2
 8004dda:	d009      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ddc:	4b25      	ldr	r3, [pc, #148]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004de0:	4a2b      	ldr	r2, [pc, #172]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8004de2:	4013      	ands	r3, r2
 8004de4:	0019      	movs	r1, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	695a      	ldr	r2, [r3, #20]
 8004dea:	4b22      	ldr	r3, [pc, #136]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004dec:	430a      	orrs	r2, r1
 8004dee:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2208      	movs	r2, #8
 8004df6:	4013      	ands	r3, r2
 8004df8:	d009      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dfa:	4b1e      	ldr	r3, [pc, #120]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dfe:	4a25      	ldr	r2, [pc, #148]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e00:	4013      	ands	r3, r2
 8004e02:	0019      	movs	r1, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	699a      	ldr	r2, [r3, #24]
 8004e08:	4b1a      	ldr	r3, [pc, #104]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	2380      	movs	r3, #128	; 0x80
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	4013      	ands	r3, r2
 8004e18:	d009      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e1a:	4b16      	ldr	r3, [pc, #88]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e1e:	4a17      	ldr	r2, [pc, #92]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004e20:	4013      	ands	r3, r2
 8004e22:	0019      	movs	r1, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	69da      	ldr	r2, [r3, #28]
 8004e28:	4b12      	ldr	r3, [pc, #72]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2240      	movs	r2, #64	; 0x40
 8004e34:	4013      	ands	r3, r2
 8004e36:	d009      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e38:	4b0e      	ldr	r3, [pc, #56]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e3c:	4a16      	ldr	r2, [pc, #88]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004e3e:	4013      	ands	r3, r2
 8004e40:	0019      	movs	r1, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e46:	4b0b      	ldr	r3, [pc, #44]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2280      	movs	r2, #128	; 0x80
 8004e52:	4013      	ands	r3, r2
 8004e54:	d009      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004e56:	4b07      	ldr	r3, [pc, #28]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e5a:	4a10      	ldr	r2, [pc, #64]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	0019      	movs	r1, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a1a      	ldr	r2, [r3, #32]
 8004e64:	4b03      	ldr	r3, [pc, #12]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e66:	430a      	orrs	r2, r1
 8004e68:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	b006      	add	sp, #24
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	40021000 	.word	0x40021000
 8004e78:	40007000 	.word	0x40007000
 8004e7c:	fffcffff 	.word	0xfffcffff
 8004e80:	fff7ffff 	.word	0xfff7ffff
 8004e84:	00001388 	.word	0x00001388
 8004e88:	ffcfffff 	.word	0xffcfffff
 8004e8c:	efffffff 	.word	0xefffffff
 8004e90:	fffff3ff 	.word	0xfffff3ff
 8004e94:	ffffcfff 	.word	0xffffcfff
 8004e98:	fbffffff 	.word	0xfbffffff
 8004e9c:	fff3ffff 	.word	0xfff3ffff

08004ea0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e044      	b.n	8004f3c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d107      	bne.n	8004eca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2278      	movs	r2, #120	; 0x78
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	0018      	movs	r0, r3
 8004ec6:	f7fe fb71 	bl	80035ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2224      	movs	r2, #36	; 0x24
 8004ece:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2101      	movs	r1, #1
 8004edc:	438a      	bics	r2, r1
 8004ede:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	0018      	movs	r0, r3
 8004ee4:	f000 fc2c 	bl	8005740 <UART_SetConfig>
 8004ee8:	0003      	movs	r3, r0
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d101      	bne.n	8004ef2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e024      	b.n	8004f3c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d003      	beq.n	8004f02 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	0018      	movs	r0, r3
 8004efe:	f000 febd 	bl	8005c7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	490d      	ldr	r1, [pc, #52]	; (8004f44 <HAL_UART_Init+0xa4>)
 8004f0e:	400a      	ands	r2, r1
 8004f10:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	212a      	movs	r1, #42	; 0x2a
 8004f1e:	438a      	bics	r2, r1
 8004f20:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2101      	movs	r1, #1
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	0018      	movs	r0, r3
 8004f36:	f000 ff55 	bl	8005de4 <UART_CheckIdleState>
 8004f3a:	0003      	movs	r3, r0
}
 8004f3c:	0018      	movs	r0, r3
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	b002      	add	sp, #8
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	ffffb7ff 	.word	0xffffb7ff

08004f48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b08a      	sub	sp, #40	; 0x28
 8004f4c:	af02      	add	r7, sp, #8
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	603b      	str	r3, [r7, #0]
 8004f54:	1dbb      	adds	r3, r7, #6
 8004f56:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f5c:	2b20      	cmp	r3, #32
 8004f5e:	d000      	beq.n	8004f62 <HAL_UART_Transmit+0x1a>
 8004f60:	e08c      	b.n	800507c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d003      	beq.n	8004f70 <HAL_UART_Transmit+0x28>
 8004f68:	1dbb      	adds	r3, r7, #6
 8004f6a:	881b      	ldrh	r3, [r3, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e084      	b.n	800507e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	689a      	ldr	r2, [r3, #8]
 8004f78:	2380      	movs	r3, #128	; 0x80
 8004f7a:	015b      	lsls	r3, r3, #5
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d109      	bne.n	8004f94 <HAL_UART_Transmit+0x4c>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d105      	bne.n	8004f94 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	d001      	beq.n	8004f94 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e074      	b.n	800507e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2284      	movs	r2, #132	; 0x84
 8004f98:	2100      	movs	r1, #0
 8004f9a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2221      	movs	r2, #33	; 0x21
 8004fa0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004fa2:	f7fe fcf9 	bl	8003998 <HAL_GetTick>
 8004fa6:	0003      	movs	r3, r0
 8004fa8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	1dba      	adds	r2, r7, #6
 8004fae:	2150      	movs	r1, #80	; 0x50
 8004fb0:	8812      	ldrh	r2, [r2, #0]
 8004fb2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	1dba      	adds	r2, r7, #6
 8004fb8:	2152      	movs	r1, #82	; 0x52
 8004fba:	8812      	ldrh	r2, [r2, #0]
 8004fbc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	689a      	ldr	r2, [r3, #8]
 8004fc2:	2380      	movs	r3, #128	; 0x80
 8004fc4:	015b      	lsls	r3, r3, #5
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d108      	bne.n	8004fdc <HAL_UART_Transmit+0x94>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d104      	bne.n	8004fdc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	61bb      	str	r3, [r7, #24]
 8004fda:	e003      	b.n	8004fe4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004fe4:	e02f      	b.n	8005046 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	0013      	movs	r3, r2
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	2180      	movs	r1, #128	; 0x80
 8004ff4:	f000 ff9e 	bl	8005f34 <UART_WaitOnFlagUntilTimeout>
 8004ff8:	1e03      	subs	r3, r0, #0
 8004ffa:	d004      	beq.n	8005006 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2220      	movs	r2, #32
 8005000:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e03b      	b.n	800507e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10b      	bne.n	8005024 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	881b      	ldrh	r3, [r3, #0]
 8005010:	001a      	movs	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	05d2      	lsls	r2, r2, #23
 8005018:	0dd2      	lsrs	r2, r2, #23
 800501a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	3302      	adds	r3, #2
 8005020:	61bb      	str	r3, [r7, #24]
 8005022:	e007      	b.n	8005034 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	781a      	ldrb	r2, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	3301      	adds	r3, #1
 8005032:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2252      	movs	r2, #82	; 0x52
 8005038:	5a9b      	ldrh	r3, [r3, r2]
 800503a:	b29b      	uxth	r3, r3
 800503c:	3b01      	subs	r3, #1
 800503e:	b299      	uxth	r1, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2252      	movs	r2, #82	; 0x52
 8005044:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2252      	movs	r2, #82	; 0x52
 800504a:	5a9b      	ldrh	r3, [r3, r2]
 800504c:	b29b      	uxth	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1c9      	bne.n	8004fe6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	9300      	str	r3, [sp, #0]
 800505a:	0013      	movs	r3, r2
 800505c:	2200      	movs	r2, #0
 800505e:	2140      	movs	r1, #64	; 0x40
 8005060:	f000 ff68 	bl	8005f34 <UART_WaitOnFlagUntilTimeout>
 8005064:	1e03      	subs	r3, r0, #0
 8005066:	d004      	beq.n	8005072 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2220      	movs	r2, #32
 800506c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e005      	b.n	800507e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2220      	movs	r2, #32
 8005076:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005078:	2300      	movs	r3, #0
 800507a:	e000      	b.n	800507e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800507c:	2302      	movs	r3, #2
  }
}
 800507e:	0018      	movs	r0, r3
 8005080:	46bd      	mov	sp, r7
 8005082:	b008      	add	sp, #32
 8005084:	bd80      	pop	{r7, pc}
	...

08005088 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b088      	sub	sp, #32
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	1dbb      	adds	r3, r7, #6
 8005094:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2280      	movs	r2, #128	; 0x80
 800509a:	589b      	ldr	r3, [r3, r2]
 800509c:	2b20      	cmp	r3, #32
 800509e:	d14a      	bne.n	8005136 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <HAL_UART_Receive_IT+0x26>
 80050a6:	1dbb      	adds	r3, r7, #6
 80050a8:	881b      	ldrh	r3, [r3, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e042      	b.n	8005138 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	689a      	ldr	r2, [r3, #8]
 80050b6:	2380      	movs	r3, #128	; 0x80
 80050b8:	015b      	lsls	r3, r3, #5
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d109      	bne.n	80050d2 <HAL_UART_Receive_IT+0x4a>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d105      	bne.n	80050d2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	2201      	movs	r2, #1
 80050ca:	4013      	ands	r3, r2
 80050cc:	d001      	beq.n	80050d2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e032      	b.n	8005138 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a18      	ldr	r2, [pc, #96]	; (8005140 <HAL_UART_Receive_IT+0xb8>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d020      	beq.n	8005124 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	2380      	movs	r3, #128	; 0x80
 80050ea:	041b      	lsls	r3, r3, #16
 80050ec:	4013      	ands	r3, r2
 80050ee:	d019      	beq.n	8005124 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050f0:	f3ef 8310 	mrs	r3, PRIMASK
 80050f4:	613b      	str	r3, [r7, #16]
  return(result);
 80050f6:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80050f8:	61fb      	str	r3, [r7, #28]
 80050fa:	2301      	movs	r3, #1
 80050fc:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f383 8810 	msr	PRIMASK, r3
}
 8005104:	46c0      	nop			; (mov r8, r8)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2180      	movs	r1, #128	; 0x80
 8005112:	04c9      	lsls	r1, r1, #19
 8005114:	430a      	orrs	r2, r1
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	f383 8810 	msr	PRIMASK, r3
}
 8005122:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005124:	1dbb      	adds	r3, r7, #6
 8005126:	881a      	ldrh	r2, [r3, #0]
 8005128:	68b9      	ldr	r1, [r7, #8]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	0018      	movs	r0, r3
 800512e:	f000 ff6b 	bl	8006008 <UART_Start_Receive_IT>
 8005132:	0003      	movs	r3, r0
 8005134:	e000      	b.n	8005138 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8005136:	2302      	movs	r3, #2
  }
}
 8005138:	0018      	movs	r0, r3
 800513a:	46bd      	mov	sp, r7
 800513c:	b008      	add	sp, #32
 800513e:	bd80      	pop	{r7, pc}
 8005140:	40004800 	.word	0x40004800

08005144 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005144:	b590      	push	{r4, r7, lr}
 8005146:	b0ab      	sub	sp, #172	; 0xac
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	22a4      	movs	r2, #164	; 0xa4
 8005154:	18b9      	adds	r1, r7, r2
 8005156:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	20a0      	movs	r0, #160	; 0xa0
 8005160:	1839      	adds	r1, r7, r0
 8005162:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	219c      	movs	r1, #156	; 0x9c
 800516c:	1879      	adds	r1, r7, r1
 800516e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005170:	0011      	movs	r1, r2
 8005172:	18bb      	adds	r3, r7, r2
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a99      	ldr	r2, [pc, #612]	; (80053dc <HAL_UART_IRQHandler+0x298>)
 8005178:	4013      	ands	r3, r2
 800517a:	2298      	movs	r2, #152	; 0x98
 800517c:	18bc      	adds	r4, r7, r2
 800517e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8005180:	18bb      	adds	r3, r7, r2
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d114      	bne.n	80051b2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005188:	187b      	adds	r3, r7, r1
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2220      	movs	r2, #32
 800518e:	4013      	ands	r3, r2
 8005190:	d00f      	beq.n	80051b2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005192:	183b      	adds	r3, r7, r0
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2220      	movs	r2, #32
 8005198:	4013      	ands	r3, r2
 800519a:	d00a      	beq.n	80051b2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d100      	bne.n	80051a6 <HAL_UART_IRQHandler+0x62>
 80051a4:	e2a0      	b.n	80056e8 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	0010      	movs	r0, r2
 80051ae:	4798      	blx	r3
      }
      return;
 80051b0:	e29a      	b.n	80056e8 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80051b2:	2398      	movs	r3, #152	; 0x98
 80051b4:	18fb      	adds	r3, r7, r3
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d100      	bne.n	80051be <HAL_UART_IRQHandler+0x7a>
 80051bc:	e114      	b.n	80053e8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80051be:	239c      	movs	r3, #156	; 0x9c
 80051c0:	18fb      	adds	r3, r7, r3
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2201      	movs	r2, #1
 80051c6:	4013      	ands	r3, r2
 80051c8:	d106      	bne.n	80051d8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80051ca:	23a0      	movs	r3, #160	; 0xa0
 80051cc:	18fb      	adds	r3, r7, r3
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a83      	ldr	r2, [pc, #524]	; (80053e0 <HAL_UART_IRQHandler+0x29c>)
 80051d2:	4013      	ands	r3, r2
 80051d4:	d100      	bne.n	80051d8 <HAL_UART_IRQHandler+0x94>
 80051d6:	e107      	b.n	80053e8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80051d8:	23a4      	movs	r3, #164	; 0xa4
 80051da:	18fb      	adds	r3, r7, r3
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2201      	movs	r2, #1
 80051e0:	4013      	ands	r3, r2
 80051e2:	d012      	beq.n	800520a <HAL_UART_IRQHandler+0xc6>
 80051e4:	23a0      	movs	r3, #160	; 0xa0
 80051e6:	18fb      	adds	r3, r7, r3
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	2380      	movs	r3, #128	; 0x80
 80051ec:	005b      	lsls	r3, r3, #1
 80051ee:	4013      	ands	r3, r2
 80051f0:	d00b      	beq.n	800520a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2201      	movs	r2, #1
 80051f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2284      	movs	r2, #132	; 0x84
 80051fe:	589b      	ldr	r3, [r3, r2]
 8005200:	2201      	movs	r2, #1
 8005202:	431a      	orrs	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2184      	movs	r1, #132	; 0x84
 8005208:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800520a:	23a4      	movs	r3, #164	; 0xa4
 800520c:	18fb      	adds	r3, r7, r3
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2202      	movs	r2, #2
 8005212:	4013      	ands	r3, r2
 8005214:	d011      	beq.n	800523a <HAL_UART_IRQHandler+0xf6>
 8005216:	239c      	movs	r3, #156	; 0x9c
 8005218:	18fb      	adds	r3, r7, r3
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2201      	movs	r2, #1
 800521e:	4013      	ands	r3, r2
 8005220:	d00b      	beq.n	800523a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2202      	movs	r2, #2
 8005228:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2284      	movs	r2, #132	; 0x84
 800522e:	589b      	ldr	r3, [r3, r2]
 8005230:	2204      	movs	r2, #4
 8005232:	431a      	orrs	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2184      	movs	r1, #132	; 0x84
 8005238:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800523a:	23a4      	movs	r3, #164	; 0xa4
 800523c:	18fb      	adds	r3, r7, r3
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2204      	movs	r2, #4
 8005242:	4013      	ands	r3, r2
 8005244:	d011      	beq.n	800526a <HAL_UART_IRQHandler+0x126>
 8005246:	239c      	movs	r3, #156	; 0x9c
 8005248:	18fb      	adds	r3, r7, r3
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2201      	movs	r2, #1
 800524e:	4013      	ands	r3, r2
 8005250:	d00b      	beq.n	800526a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2204      	movs	r2, #4
 8005258:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2284      	movs	r2, #132	; 0x84
 800525e:	589b      	ldr	r3, [r3, r2]
 8005260:	2202      	movs	r2, #2
 8005262:	431a      	orrs	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2184      	movs	r1, #132	; 0x84
 8005268:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800526a:	23a4      	movs	r3, #164	; 0xa4
 800526c:	18fb      	adds	r3, r7, r3
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2208      	movs	r2, #8
 8005272:	4013      	ands	r3, r2
 8005274:	d017      	beq.n	80052a6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005276:	23a0      	movs	r3, #160	; 0xa0
 8005278:	18fb      	adds	r3, r7, r3
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2220      	movs	r2, #32
 800527e:	4013      	ands	r3, r2
 8005280:	d105      	bne.n	800528e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005282:	239c      	movs	r3, #156	; 0x9c
 8005284:	18fb      	adds	r3, r7, r3
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2201      	movs	r2, #1
 800528a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800528c:	d00b      	beq.n	80052a6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2208      	movs	r2, #8
 8005294:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2284      	movs	r2, #132	; 0x84
 800529a:	589b      	ldr	r3, [r3, r2]
 800529c:	2208      	movs	r2, #8
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2184      	movs	r1, #132	; 0x84
 80052a4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80052a6:	23a4      	movs	r3, #164	; 0xa4
 80052a8:	18fb      	adds	r3, r7, r3
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	2380      	movs	r3, #128	; 0x80
 80052ae:	011b      	lsls	r3, r3, #4
 80052b0:	4013      	ands	r3, r2
 80052b2:	d013      	beq.n	80052dc <HAL_UART_IRQHandler+0x198>
 80052b4:	23a0      	movs	r3, #160	; 0xa0
 80052b6:	18fb      	adds	r3, r7, r3
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	2380      	movs	r3, #128	; 0x80
 80052bc:	04db      	lsls	r3, r3, #19
 80052be:	4013      	ands	r3, r2
 80052c0:	d00c      	beq.n	80052dc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2280      	movs	r2, #128	; 0x80
 80052c8:	0112      	lsls	r2, r2, #4
 80052ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2284      	movs	r2, #132	; 0x84
 80052d0:	589b      	ldr	r3, [r3, r2]
 80052d2:	2220      	movs	r2, #32
 80052d4:	431a      	orrs	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2184      	movs	r1, #132	; 0x84
 80052da:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2284      	movs	r2, #132	; 0x84
 80052e0:	589b      	ldr	r3, [r3, r2]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d100      	bne.n	80052e8 <HAL_UART_IRQHandler+0x1a4>
 80052e6:	e201      	b.n	80056ec <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80052e8:	23a4      	movs	r3, #164	; 0xa4
 80052ea:	18fb      	adds	r3, r7, r3
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2220      	movs	r2, #32
 80052f0:	4013      	ands	r3, r2
 80052f2:	d00e      	beq.n	8005312 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80052f4:	23a0      	movs	r3, #160	; 0xa0
 80052f6:	18fb      	adds	r3, r7, r3
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2220      	movs	r2, #32
 80052fc:	4013      	ands	r3, r2
 80052fe:	d008      	beq.n	8005312 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005304:	2b00      	cmp	r3, #0
 8005306:	d004      	beq.n	8005312 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	0010      	movs	r0, r2
 8005310:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2284      	movs	r2, #132	; 0x84
 8005316:	589b      	ldr	r3, [r3, r2]
 8005318:	2194      	movs	r1, #148	; 0x94
 800531a:	187a      	adds	r2, r7, r1
 800531c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	2240      	movs	r2, #64	; 0x40
 8005326:	4013      	ands	r3, r2
 8005328:	2b40      	cmp	r3, #64	; 0x40
 800532a:	d004      	beq.n	8005336 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800532c:	187b      	adds	r3, r7, r1
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2228      	movs	r2, #40	; 0x28
 8005332:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005334:	d047      	beq.n	80053c6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	0018      	movs	r0, r3
 800533a:	f000 ff2f 	bl	800619c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	2240      	movs	r2, #64	; 0x40
 8005346:	4013      	ands	r3, r2
 8005348:	2b40      	cmp	r3, #64	; 0x40
 800534a:	d137      	bne.n	80053bc <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800534c:	f3ef 8310 	mrs	r3, PRIMASK
 8005350:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005352:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005354:	2090      	movs	r0, #144	; 0x90
 8005356:	183a      	adds	r2, r7, r0
 8005358:	6013      	str	r3, [r2, #0]
 800535a:	2301      	movs	r3, #1
 800535c:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800535e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005360:	f383 8810 	msr	PRIMASK, r3
}
 8005364:	46c0      	nop			; (mov r8, r8)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	689a      	ldr	r2, [r3, #8]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2140      	movs	r1, #64	; 0x40
 8005372:	438a      	bics	r2, r1
 8005374:	609a      	str	r2, [r3, #8]
 8005376:	183b      	adds	r3, r7, r0
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800537c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800537e:	f383 8810 	msr	PRIMASK, r3
}
 8005382:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005388:	2b00      	cmp	r3, #0
 800538a:	d012      	beq.n	80053b2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005390:	4a14      	ldr	r2, [pc, #80]	; (80053e4 <HAL_UART_IRQHandler+0x2a0>)
 8005392:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005398:	0018      	movs	r0, r3
 800539a:	f7fe fc25 	bl	8003be8 <HAL_DMA_Abort_IT>
 800539e:	1e03      	subs	r3, r0, #0
 80053a0:	d01a      	beq.n	80053d8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053ac:	0018      	movs	r0, r3
 80053ae:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053b0:	e012      	b.n	80053d8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	0018      	movs	r0, r3
 80053b6:	f000 f9af 	bl	8005718 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053ba:	e00d      	b.n	80053d8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	0018      	movs	r0, r3
 80053c0:	f000 f9aa 	bl	8005718 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053c4:	e008      	b.n	80053d8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	0018      	movs	r0, r3
 80053ca:	f000 f9a5 	bl	8005718 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2284      	movs	r2, #132	; 0x84
 80053d2:	2100      	movs	r1, #0
 80053d4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80053d6:	e189      	b.n	80056ec <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053d8:	46c0      	nop			; (mov r8, r8)
    return;
 80053da:	e187      	b.n	80056ec <HAL_UART_IRQHandler+0x5a8>
 80053dc:	0000080f 	.word	0x0000080f
 80053e0:	04000120 	.word	0x04000120
 80053e4:	08006265 	.word	0x08006265

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d000      	beq.n	80053f2 <HAL_UART_IRQHandler+0x2ae>
 80053f0:	e13b      	b.n	800566a <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80053f2:	23a4      	movs	r3, #164	; 0xa4
 80053f4:	18fb      	adds	r3, r7, r3
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2210      	movs	r2, #16
 80053fa:	4013      	ands	r3, r2
 80053fc:	d100      	bne.n	8005400 <HAL_UART_IRQHandler+0x2bc>
 80053fe:	e134      	b.n	800566a <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005400:	23a0      	movs	r3, #160	; 0xa0
 8005402:	18fb      	adds	r3, r7, r3
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2210      	movs	r2, #16
 8005408:	4013      	ands	r3, r2
 800540a:	d100      	bne.n	800540e <HAL_UART_IRQHandler+0x2ca>
 800540c:	e12d      	b.n	800566a <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2210      	movs	r2, #16
 8005414:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	2240      	movs	r2, #64	; 0x40
 800541e:	4013      	ands	r3, r2
 8005420:	2b40      	cmp	r3, #64	; 0x40
 8005422:	d000      	beq.n	8005426 <HAL_UART_IRQHandler+0x2e2>
 8005424:	e0a1      	b.n	800556a <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	217e      	movs	r1, #126	; 0x7e
 8005430:	187b      	adds	r3, r7, r1
 8005432:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005434:	187b      	adds	r3, r7, r1
 8005436:	881b      	ldrh	r3, [r3, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d100      	bne.n	800543e <HAL_UART_IRQHandler+0x2fa>
 800543c:	e158      	b.n	80056f0 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2258      	movs	r2, #88	; 0x58
 8005442:	5a9b      	ldrh	r3, [r3, r2]
 8005444:	187a      	adds	r2, r7, r1
 8005446:	8812      	ldrh	r2, [r2, #0]
 8005448:	429a      	cmp	r2, r3
 800544a:	d300      	bcc.n	800544e <HAL_UART_IRQHandler+0x30a>
 800544c:	e150      	b.n	80056f0 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	187a      	adds	r2, r7, r1
 8005452:	215a      	movs	r1, #90	; 0x5a
 8005454:	8812      	ldrh	r2, [r2, #0]
 8005456:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2220      	movs	r2, #32
 8005462:	4013      	ands	r3, r2
 8005464:	d16f      	bne.n	8005546 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005466:	f3ef 8310 	mrs	r3, PRIMASK
 800546a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800546c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800546e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005470:	2301      	movs	r3, #1
 8005472:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005476:	f383 8810 	msr	PRIMASK, r3
}
 800547a:	46c0      	nop			; (mov r8, r8)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	499e      	ldr	r1, [pc, #632]	; (8005700 <HAL_UART_IRQHandler+0x5bc>)
 8005488:	400a      	ands	r2, r1
 800548a:	601a      	str	r2, [r3, #0]
 800548c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800548e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005492:	f383 8810 	msr	PRIMASK, r3
}
 8005496:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005498:	f3ef 8310 	mrs	r3, PRIMASK
 800549c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800549e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054a0:	677b      	str	r3, [r7, #116]	; 0x74
 80054a2:	2301      	movs	r3, #1
 80054a4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054a8:	f383 8810 	msr	PRIMASK, r3
}
 80054ac:	46c0      	nop			; (mov r8, r8)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689a      	ldr	r2, [r3, #8]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2101      	movs	r1, #1
 80054ba:	438a      	bics	r2, r1
 80054bc:	609a      	str	r2, [r3, #8]
 80054be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054c0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054c4:	f383 8810 	msr	PRIMASK, r3
}
 80054c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054ca:	f3ef 8310 	mrs	r3, PRIMASK
 80054ce:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80054d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054d2:	673b      	str	r3, [r7, #112]	; 0x70
 80054d4:	2301      	movs	r3, #1
 80054d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054da:	f383 8810 	msr	PRIMASK, r3
}
 80054de:	46c0      	nop			; (mov r8, r8)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	689a      	ldr	r2, [r3, #8]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2140      	movs	r1, #64	; 0x40
 80054ec:	438a      	bics	r2, r1
 80054ee:	609a      	str	r2, [r3, #8]
 80054f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054f2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054f6:	f383 8810 	msr	PRIMASK, r3
}
 80054fa:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2280      	movs	r2, #128	; 0x80
 8005500:	2120      	movs	r1, #32
 8005502:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800550a:	f3ef 8310 	mrs	r3, PRIMASK
 800550e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005510:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005512:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005514:	2301      	movs	r3, #1
 8005516:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005518:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800551a:	f383 8810 	msr	PRIMASK, r3
}
 800551e:	46c0      	nop			; (mov r8, r8)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2110      	movs	r1, #16
 800552c:	438a      	bics	r2, r1
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005532:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005534:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005536:	f383 8810 	msr	PRIMASK, r3
}
 800553a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005540:	0018      	movs	r0, r3
 8005542:	f7fe fb11 	bl	8003b68 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2202      	movs	r2, #2
 800554a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2258      	movs	r2, #88	; 0x58
 8005550:	5a9a      	ldrh	r2, [r3, r2]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	215a      	movs	r1, #90	; 0x5a
 8005556:	5a5b      	ldrh	r3, [r3, r1]
 8005558:	b29b      	uxth	r3, r3
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	b29a      	uxth	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	0011      	movs	r1, r2
 8005562:	0018      	movs	r0, r3
 8005564:	f000 f8e0 	bl	8005728 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005568:	e0c2      	b.n	80056f0 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2258      	movs	r2, #88	; 0x58
 800556e:	5a99      	ldrh	r1, [r3, r2]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	225a      	movs	r2, #90	; 0x5a
 8005574:	5a9b      	ldrh	r3, [r3, r2]
 8005576:	b29a      	uxth	r2, r3
 8005578:	208e      	movs	r0, #142	; 0x8e
 800557a:	183b      	adds	r3, r7, r0
 800557c:	1a8a      	subs	r2, r1, r2
 800557e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	225a      	movs	r2, #90	; 0x5a
 8005584:	5a9b      	ldrh	r3, [r3, r2]
 8005586:	b29b      	uxth	r3, r3
 8005588:	2b00      	cmp	r3, #0
 800558a:	d100      	bne.n	800558e <HAL_UART_IRQHandler+0x44a>
 800558c:	e0b2      	b.n	80056f4 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800558e:	183b      	adds	r3, r7, r0
 8005590:	881b      	ldrh	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d100      	bne.n	8005598 <HAL_UART_IRQHandler+0x454>
 8005596:	e0ad      	b.n	80056f4 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005598:	f3ef 8310 	mrs	r3, PRIMASK
 800559c:	60fb      	str	r3, [r7, #12]
  return(result);
 800559e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055a0:	2488      	movs	r4, #136	; 0x88
 80055a2:	193a      	adds	r2, r7, r4
 80055a4:	6013      	str	r3, [r2, #0]
 80055a6:	2301      	movs	r3, #1
 80055a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	f383 8810 	msr	PRIMASK, r3
}
 80055b0:	46c0      	nop			; (mov r8, r8)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4951      	ldr	r1, [pc, #324]	; (8005704 <HAL_UART_IRQHandler+0x5c0>)
 80055be:	400a      	ands	r2, r1
 80055c0:	601a      	str	r2, [r3, #0]
 80055c2:	193b      	adds	r3, r7, r4
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	f383 8810 	msr	PRIMASK, r3
}
 80055ce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055d0:	f3ef 8310 	mrs	r3, PRIMASK
 80055d4:	61bb      	str	r3, [r7, #24]
  return(result);
 80055d6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d8:	2484      	movs	r4, #132	; 0x84
 80055da:	193a      	adds	r2, r7, r4
 80055dc:	6013      	str	r3, [r2, #0]
 80055de:	2301      	movs	r3, #1
 80055e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	f383 8810 	msr	PRIMASK, r3
}
 80055e8:	46c0      	nop			; (mov r8, r8)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	689a      	ldr	r2, [r3, #8]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2101      	movs	r1, #1
 80055f6:	438a      	bics	r2, r1
 80055f8:	609a      	str	r2, [r3, #8]
 80055fa:	193b      	adds	r3, r7, r4
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005600:	6a3b      	ldr	r3, [r7, #32]
 8005602:	f383 8810 	msr	PRIMASK, r3
}
 8005606:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2280      	movs	r2, #128	; 0x80
 800560c:	2120      	movs	r1, #32
 800560e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800561c:	f3ef 8310 	mrs	r3, PRIMASK
 8005620:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005624:	2480      	movs	r4, #128	; 0x80
 8005626:	193a      	adds	r2, r7, r4
 8005628:	6013      	str	r3, [r2, #0]
 800562a:	2301      	movs	r3, #1
 800562c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800562e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005630:	f383 8810 	msr	PRIMASK, r3
}
 8005634:	46c0      	nop			; (mov r8, r8)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2110      	movs	r1, #16
 8005642:	438a      	bics	r2, r1
 8005644:	601a      	str	r2, [r3, #0]
 8005646:	193b      	adds	r3, r7, r4
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800564c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800564e:	f383 8810 	msr	PRIMASK, r3
}
 8005652:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2202      	movs	r2, #2
 8005658:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800565a:	183b      	adds	r3, r7, r0
 800565c:	881a      	ldrh	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	0011      	movs	r1, r2
 8005662:	0018      	movs	r0, r3
 8005664:	f000 f860 	bl	8005728 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005668:	e044      	b.n	80056f4 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800566a:	23a4      	movs	r3, #164	; 0xa4
 800566c:	18fb      	adds	r3, r7, r3
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	2380      	movs	r3, #128	; 0x80
 8005672:	035b      	lsls	r3, r3, #13
 8005674:	4013      	ands	r3, r2
 8005676:	d010      	beq.n	800569a <HAL_UART_IRQHandler+0x556>
 8005678:	239c      	movs	r3, #156	; 0x9c
 800567a:	18fb      	adds	r3, r7, r3
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	2380      	movs	r3, #128	; 0x80
 8005680:	03db      	lsls	r3, r3, #15
 8005682:	4013      	ands	r3, r2
 8005684:	d009      	beq.n	800569a <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2280      	movs	r2, #128	; 0x80
 800568c:	0352      	lsls	r2, r2, #13
 800568e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	0018      	movs	r0, r3
 8005694:	f000 ffec 	bl	8006670 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005698:	e02f      	b.n	80056fa <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800569a:	23a4      	movs	r3, #164	; 0xa4
 800569c:	18fb      	adds	r3, r7, r3
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2280      	movs	r2, #128	; 0x80
 80056a2:	4013      	ands	r3, r2
 80056a4:	d00f      	beq.n	80056c6 <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80056a6:	23a0      	movs	r3, #160	; 0xa0
 80056a8:	18fb      	adds	r3, r7, r3
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2280      	movs	r2, #128	; 0x80
 80056ae:	4013      	ands	r3, r2
 80056b0:	d009      	beq.n	80056c6 <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d01e      	beq.n	80056f8 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	0010      	movs	r0, r2
 80056c2:	4798      	blx	r3
    }
    return;
 80056c4:	e018      	b.n	80056f8 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80056c6:	23a4      	movs	r3, #164	; 0xa4
 80056c8:	18fb      	adds	r3, r7, r3
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2240      	movs	r2, #64	; 0x40
 80056ce:	4013      	ands	r3, r2
 80056d0:	d013      	beq.n	80056fa <HAL_UART_IRQHandler+0x5b6>
 80056d2:	23a0      	movs	r3, #160	; 0xa0
 80056d4:	18fb      	adds	r3, r7, r3
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2240      	movs	r2, #64	; 0x40
 80056da:	4013      	ands	r3, r2
 80056dc:	d00d      	beq.n	80056fa <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	0018      	movs	r0, r3
 80056e2:	f000 fdd6 	bl	8006292 <UART_EndTransmit_IT>
    return;
 80056e6:	e008      	b.n	80056fa <HAL_UART_IRQHandler+0x5b6>
      return;
 80056e8:	46c0      	nop			; (mov r8, r8)
 80056ea:	e006      	b.n	80056fa <HAL_UART_IRQHandler+0x5b6>
    return;
 80056ec:	46c0      	nop			; (mov r8, r8)
 80056ee:	e004      	b.n	80056fa <HAL_UART_IRQHandler+0x5b6>
      return;
 80056f0:	46c0      	nop			; (mov r8, r8)
 80056f2:	e002      	b.n	80056fa <HAL_UART_IRQHandler+0x5b6>
      return;
 80056f4:	46c0      	nop			; (mov r8, r8)
 80056f6:	e000      	b.n	80056fa <HAL_UART_IRQHandler+0x5b6>
    return;
 80056f8:	46c0      	nop			; (mov r8, r8)
  }

}
 80056fa:	46bd      	mov	sp, r7
 80056fc:	b02b      	add	sp, #172	; 0xac
 80056fe:	bd90      	pop	{r4, r7, pc}
 8005700:	fffffeff 	.word	0xfffffeff
 8005704:	fffffedf 	.word	0xfffffedf

08005708 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005710:	46c0      	nop			; (mov r8, r8)
 8005712:	46bd      	mov	sp, r7
 8005714:	b002      	add	sp, #8
 8005716:	bd80      	pop	{r7, pc}

08005718 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005720:	46c0      	nop			; (mov r8, r8)
 8005722:	46bd      	mov	sp, r7
 8005724:	b002      	add	sp, #8
 8005726:	bd80      	pop	{r7, pc}

08005728 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	000a      	movs	r2, r1
 8005732:	1cbb      	adds	r3, r7, #2
 8005734:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005736:	46c0      	nop			; (mov r8, r8)
 8005738:	46bd      	mov	sp, r7
 800573a:	b002      	add	sp, #8
 800573c:	bd80      	pop	{r7, pc}
	...

08005740 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005740:	b5b0      	push	{r4, r5, r7, lr}
 8005742:	b08e      	sub	sp, #56	; 0x38
 8005744:	af00      	add	r7, sp, #0
 8005746:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005748:	231a      	movs	r3, #26
 800574a:	2218      	movs	r2, #24
 800574c:	189b      	adds	r3, r3, r2
 800574e:	19db      	adds	r3, r3, r7
 8005750:	2200      	movs	r2, #0
 8005752:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	431a      	orrs	r2, r3
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	431a      	orrs	r2, r3
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	69db      	ldr	r3, [r3, #28]
 8005768:	4313      	orrs	r3, r2
 800576a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4ac3      	ldr	r2, [pc, #780]	; (8005a80 <UART_SetConfig+0x340>)
 8005774:	4013      	ands	r3, r2
 8005776:	0019      	movs	r1, r3
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800577e:	430a      	orrs	r2, r1
 8005780:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	4abe      	ldr	r2, [pc, #760]	; (8005a84 <UART_SetConfig+0x344>)
 800578a:	4013      	ands	r3, r2
 800578c:	0019      	movs	r1, r3
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	68da      	ldr	r2, [r3, #12]
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	430a      	orrs	r2, r1
 8005798:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4ab8      	ldr	r2, [pc, #736]	; (8005a88 <UART_SetConfig+0x348>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d004      	beq.n	80057b4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057b0:	4313      	orrs	r3, r2
 80057b2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	4ab4      	ldr	r2, [pc, #720]	; (8005a8c <UART_SetConfig+0x34c>)
 80057bc:	4013      	ands	r3, r2
 80057be:	0019      	movs	r1, r3
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057c6:	430a      	orrs	r2, r1
 80057c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4ab0      	ldr	r2, [pc, #704]	; (8005a90 <UART_SetConfig+0x350>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d131      	bne.n	8005838 <UART_SetConfig+0xf8>
 80057d4:	4baf      	ldr	r3, [pc, #700]	; (8005a94 <UART_SetConfig+0x354>)
 80057d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057d8:	2203      	movs	r2, #3
 80057da:	4013      	ands	r3, r2
 80057dc:	2b03      	cmp	r3, #3
 80057de:	d01d      	beq.n	800581c <UART_SetConfig+0xdc>
 80057e0:	d823      	bhi.n	800582a <UART_SetConfig+0xea>
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d00c      	beq.n	8005800 <UART_SetConfig+0xc0>
 80057e6:	d820      	bhi.n	800582a <UART_SetConfig+0xea>
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d002      	beq.n	80057f2 <UART_SetConfig+0xb2>
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d00e      	beq.n	800580e <UART_SetConfig+0xce>
 80057f0:	e01b      	b.n	800582a <UART_SetConfig+0xea>
 80057f2:	231b      	movs	r3, #27
 80057f4:	2218      	movs	r2, #24
 80057f6:	189b      	adds	r3, r3, r2
 80057f8:	19db      	adds	r3, r3, r7
 80057fa:	2201      	movs	r2, #1
 80057fc:	701a      	strb	r2, [r3, #0]
 80057fe:	e0b4      	b.n	800596a <UART_SetConfig+0x22a>
 8005800:	231b      	movs	r3, #27
 8005802:	2218      	movs	r2, #24
 8005804:	189b      	adds	r3, r3, r2
 8005806:	19db      	adds	r3, r3, r7
 8005808:	2202      	movs	r2, #2
 800580a:	701a      	strb	r2, [r3, #0]
 800580c:	e0ad      	b.n	800596a <UART_SetConfig+0x22a>
 800580e:	231b      	movs	r3, #27
 8005810:	2218      	movs	r2, #24
 8005812:	189b      	adds	r3, r3, r2
 8005814:	19db      	adds	r3, r3, r7
 8005816:	2204      	movs	r2, #4
 8005818:	701a      	strb	r2, [r3, #0]
 800581a:	e0a6      	b.n	800596a <UART_SetConfig+0x22a>
 800581c:	231b      	movs	r3, #27
 800581e:	2218      	movs	r2, #24
 8005820:	189b      	adds	r3, r3, r2
 8005822:	19db      	adds	r3, r3, r7
 8005824:	2208      	movs	r2, #8
 8005826:	701a      	strb	r2, [r3, #0]
 8005828:	e09f      	b.n	800596a <UART_SetConfig+0x22a>
 800582a:	231b      	movs	r3, #27
 800582c:	2218      	movs	r2, #24
 800582e:	189b      	adds	r3, r3, r2
 8005830:	19db      	adds	r3, r3, r7
 8005832:	2210      	movs	r2, #16
 8005834:	701a      	strb	r2, [r3, #0]
 8005836:	e098      	b.n	800596a <UART_SetConfig+0x22a>
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a96      	ldr	r2, [pc, #600]	; (8005a98 <UART_SetConfig+0x358>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d131      	bne.n	80058a6 <UART_SetConfig+0x166>
 8005842:	4b94      	ldr	r3, [pc, #592]	; (8005a94 <UART_SetConfig+0x354>)
 8005844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005846:	220c      	movs	r2, #12
 8005848:	4013      	ands	r3, r2
 800584a:	2b0c      	cmp	r3, #12
 800584c:	d01d      	beq.n	800588a <UART_SetConfig+0x14a>
 800584e:	d823      	bhi.n	8005898 <UART_SetConfig+0x158>
 8005850:	2b08      	cmp	r3, #8
 8005852:	d00c      	beq.n	800586e <UART_SetConfig+0x12e>
 8005854:	d820      	bhi.n	8005898 <UART_SetConfig+0x158>
 8005856:	2b00      	cmp	r3, #0
 8005858:	d002      	beq.n	8005860 <UART_SetConfig+0x120>
 800585a:	2b04      	cmp	r3, #4
 800585c:	d00e      	beq.n	800587c <UART_SetConfig+0x13c>
 800585e:	e01b      	b.n	8005898 <UART_SetConfig+0x158>
 8005860:	231b      	movs	r3, #27
 8005862:	2218      	movs	r2, #24
 8005864:	189b      	adds	r3, r3, r2
 8005866:	19db      	adds	r3, r3, r7
 8005868:	2200      	movs	r2, #0
 800586a:	701a      	strb	r2, [r3, #0]
 800586c:	e07d      	b.n	800596a <UART_SetConfig+0x22a>
 800586e:	231b      	movs	r3, #27
 8005870:	2218      	movs	r2, #24
 8005872:	189b      	adds	r3, r3, r2
 8005874:	19db      	adds	r3, r3, r7
 8005876:	2202      	movs	r2, #2
 8005878:	701a      	strb	r2, [r3, #0]
 800587a:	e076      	b.n	800596a <UART_SetConfig+0x22a>
 800587c:	231b      	movs	r3, #27
 800587e:	2218      	movs	r2, #24
 8005880:	189b      	adds	r3, r3, r2
 8005882:	19db      	adds	r3, r3, r7
 8005884:	2204      	movs	r2, #4
 8005886:	701a      	strb	r2, [r3, #0]
 8005888:	e06f      	b.n	800596a <UART_SetConfig+0x22a>
 800588a:	231b      	movs	r3, #27
 800588c:	2218      	movs	r2, #24
 800588e:	189b      	adds	r3, r3, r2
 8005890:	19db      	adds	r3, r3, r7
 8005892:	2208      	movs	r2, #8
 8005894:	701a      	strb	r2, [r3, #0]
 8005896:	e068      	b.n	800596a <UART_SetConfig+0x22a>
 8005898:	231b      	movs	r3, #27
 800589a:	2218      	movs	r2, #24
 800589c:	189b      	adds	r3, r3, r2
 800589e:	19db      	adds	r3, r3, r7
 80058a0:	2210      	movs	r2, #16
 80058a2:	701a      	strb	r2, [r3, #0]
 80058a4:	e061      	b.n	800596a <UART_SetConfig+0x22a>
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a7c      	ldr	r2, [pc, #496]	; (8005a9c <UART_SetConfig+0x35c>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d106      	bne.n	80058be <UART_SetConfig+0x17e>
 80058b0:	231b      	movs	r3, #27
 80058b2:	2218      	movs	r2, #24
 80058b4:	189b      	adds	r3, r3, r2
 80058b6:	19db      	adds	r3, r3, r7
 80058b8:	2200      	movs	r2, #0
 80058ba:	701a      	strb	r2, [r3, #0]
 80058bc:	e055      	b.n	800596a <UART_SetConfig+0x22a>
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a77      	ldr	r2, [pc, #476]	; (8005aa0 <UART_SetConfig+0x360>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d106      	bne.n	80058d6 <UART_SetConfig+0x196>
 80058c8:	231b      	movs	r3, #27
 80058ca:	2218      	movs	r2, #24
 80058cc:	189b      	adds	r3, r3, r2
 80058ce:	19db      	adds	r3, r3, r7
 80058d0:	2200      	movs	r2, #0
 80058d2:	701a      	strb	r2, [r3, #0]
 80058d4:	e049      	b.n	800596a <UART_SetConfig+0x22a>
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a6b      	ldr	r2, [pc, #428]	; (8005a88 <UART_SetConfig+0x348>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d13e      	bne.n	800595e <UART_SetConfig+0x21e>
 80058e0:	4b6c      	ldr	r3, [pc, #432]	; (8005a94 <UART_SetConfig+0x354>)
 80058e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058e4:	23c0      	movs	r3, #192	; 0xc0
 80058e6:	011b      	lsls	r3, r3, #4
 80058e8:	4013      	ands	r3, r2
 80058ea:	22c0      	movs	r2, #192	; 0xc0
 80058ec:	0112      	lsls	r2, r2, #4
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d027      	beq.n	8005942 <UART_SetConfig+0x202>
 80058f2:	22c0      	movs	r2, #192	; 0xc0
 80058f4:	0112      	lsls	r2, r2, #4
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d82a      	bhi.n	8005950 <UART_SetConfig+0x210>
 80058fa:	2280      	movs	r2, #128	; 0x80
 80058fc:	0112      	lsls	r2, r2, #4
 80058fe:	4293      	cmp	r3, r2
 8005900:	d011      	beq.n	8005926 <UART_SetConfig+0x1e6>
 8005902:	2280      	movs	r2, #128	; 0x80
 8005904:	0112      	lsls	r2, r2, #4
 8005906:	4293      	cmp	r3, r2
 8005908:	d822      	bhi.n	8005950 <UART_SetConfig+0x210>
 800590a:	2b00      	cmp	r3, #0
 800590c:	d004      	beq.n	8005918 <UART_SetConfig+0x1d8>
 800590e:	2280      	movs	r2, #128	; 0x80
 8005910:	00d2      	lsls	r2, r2, #3
 8005912:	4293      	cmp	r3, r2
 8005914:	d00e      	beq.n	8005934 <UART_SetConfig+0x1f4>
 8005916:	e01b      	b.n	8005950 <UART_SetConfig+0x210>
 8005918:	231b      	movs	r3, #27
 800591a:	2218      	movs	r2, #24
 800591c:	189b      	adds	r3, r3, r2
 800591e:	19db      	adds	r3, r3, r7
 8005920:	2200      	movs	r2, #0
 8005922:	701a      	strb	r2, [r3, #0]
 8005924:	e021      	b.n	800596a <UART_SetConfig+0x22a>
 8005926:	231b      	movs	r3, #27
 8005928:	2218      	movs	r2, #24
 800592a:	189b      	adds	r3, r3, r2
 800592c:	19db      	adds	r3, r3, r7
 800592e:	2202      	movs	r2, #2
 8005930:	701a      	strb	r2, [r3, #0]
 8005932:	e01a      	b.n	800596a <UART_SetConfig+0x22a>
 8005934:	231b      	movs	r3, #27
 8005936:	2218      	movs	r2, #24
 8005938:	189b      	adds	r3, r3, r2
 800593a:	19db      	adds	r3, r3, r7
 800593c:	2204      	movs	r2, #4
 800593e:	701a      	strb	r2, [r3, #0]
 8005940:	e013      	b.n	800596a <UART_SetConfig+0x22a>
 8005942:	231b      	movs	r3, #27
 8005944:	2218      	movs	r2, #24
 8005946:	189b      	adds	r3, r3, r2
 8005948:	19db      	adds	r3, r3, r7
 800594a:	2208      	movs	r2, #8
 800594c:	701a      	strb	r2, [r3, #0]
 800594e:	e00c      	b.n	800596a <UART_SetConfig+0x22a>
 8005950:	231b      	movs	r3, #27
 8005952:	2218      	movs	r2, #24
 8005954:	189b      	adds	r3, r3, r2
 8005956:	19db      	adds	r3, r3, r7
 8005958:	2210      	movs	r2, #16
 800595a:	701a      	strb	r2, [r3, #0]
 800595c:	e005      	b.n	800596a <UART_SetConfig+0x22a>
 800595e:	231b      	movs	r3, #27
 8005960:	2218      	movs	r2, #24
 8005962:	189b      	adds	r3, r3, r2
 8005964:	19db      	adds	r3, r3, r7
 8005966:	2210      	movs	r2, #16
 8005968:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a46      	ldr	r2, [pc, #280]	; (8005a88 <UART_SetConfig+0x348>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d000      	beq.n	8005976 <UART_SetConfig+0x236>
 8005974:	e09a      	b.n	8005aac <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005976:	231b      	movs	r3, #27
 8005978:	2218      	movs	r2, #24
 800597a:	189b      	adds	r3, r3, r2
 800597c:	19db      	adds	r3, r3, r7
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	2b08      	cmp	r3, #8
 8005982:	d01d      	beq.n	80059c0 <UART_SetConfig+0x280>
 8005984:	dc20      	bgt.n	80059c8 <UART_SetConfig+0x288>
 8005986:	2b04      	cmp	r3, #4
 8005988:	d015      	beq.n	80059b6 <UART_SetConfig+0x276>
 800598a:	dc1d      	bgt.n	80059c8 <UART_SetConfig+0x288>
 800598c:	2b00      	cmp	r3, #0
 800598e:	d002      	beq.n	8005996 <UART_SetConfig+0x256>
 8005990:	2b02      	cmp	r3, #2
 8005992:	d005      	beq.n	80059a0 <UART_SetConfig+0x260>
 8005994:	e018      	b.n	80059c8 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005996:	f7ff f8b9 	bl	8004b0c <HAL_RCC_GetPCLK1Freq>
 800599a:	0003      	movs	r3, r0
 800599c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800599e:	e01c      	b.n	80059da <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059a0:	4b3c      	ldr	r3, [pc, #240]	; (8005a94 <UART_SetConfig+0x354>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2210      	movs	r2, #16
 80059a6:	4013      	ands	r3, r2
 80059a8:	d002      	beq.n	80059b0 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80059aa:	4b3e      	ldr	r3, [pc, #248]	; (8005aa4 <UART_SetConfig+0x364>)
 80059ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80059ae:	e014      	b.n	80059da <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80059b0:	4b3d      	ldr	r3, [pc, #244]	; (8005aa8 <UART_SetConfig+0x368>)
 80059b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059b4:	e011      	b.n	80059da <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059b6:	f7fe fff9 	bl	80049ac <HAL_RCC_GetSysClockFreq>
 80059ba:	0003      	movs	r3, r0
 80059bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059be:	e00c      	b.n	80059da <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059c0:	2380      	movs	r3, #128	; 0x80
 80059c2:	021b      	lsls	r3, r3, #8
 80059c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059c6:	e008      	b.n	80059da <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80059c8:	2300      	movs	r3, #0
 80059ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80059cc:	231a      	movs	r3, #26
 80059ce:	2218      	movs	r2, #24
 80059d0:	189b      	adds	r3, r3, r2
 80059d2:	19db      	adds	r3, r3, r7
 80059d4:	2201      	movs	r2, #1
 80059d6:	701a      	strb	r2, [r3, #0]
        break;
 80059d8:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80059da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d100      	bne.n	80059e2 <UART_SetConfig+0x2a2>
 80059e0:	e133      	b.n	8005c4a <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	0013      	movs	r3, r2
 80059e8:	005b      	lsls	r3, r3, #1
 80059ea:	189b      	adds	r3, r3, r2
 80059ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d305      	bcc.n	80059fe <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80059f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d906      	bls.n	8005a0c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80059fe:	231a      	movs	r3, #26
 8005a00:	2218      	movs	r2, #24
 8005a02:	189b      	adds	r3, r3, r2
 8005a04:	19db      	adds	r3, r3, r7
 8005a06:	2201      	movs	r2, #1
 8005a08:	701a      	strb	r2, [r3, #0]
 8005a0a:	e11e      	b.n	8005c4a <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0e:	613b      	str	r3, [r7, #16]
 8005a10:	2300      	movs	r3, #0
 8005a12:	617b      	str	r3, [r7, #20]
 8005a14:	6939      	ldr	r1, [r7, #16]
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	000b      	movs	r3, r1
 8005a1a:	0e1b      	lsrs	r3, r3, #24
 8005a1c:	0010      	movs	r0, r2
 8005a1e:	0205      	lsls	r5, r0, #8
 8005a20:	431d      	orrs	r5, r3
 8005a22:	000b      	movs	r3, r1
 8005a24:	021c      	lsls	r4, r3, #8
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	085b      	lsrs	r3, r3, #1
 8005a2c:	60bb      	str	r3, [r7, #8]
 8005a2e:	2300      	movs	r3, #0
 8005a30:	60fb      	str	r3, [r7, #12]
 8005a32:	68b8      	ldr	r0, [r7, #8]
 8005a34:	68f9      	ldr	r1, [r7, #12]
 8005a36:	1900      	adds	r0, r0, r4
 8005a38:	4169      	adcs	r1, r5
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	603b      	str	r3, [r7, #0]
 8005a40:	2300      	movs	r3, #0
 8005a42:	607b      	str	r3, [r7, #4]
 8005a44:	683a      	ldr	r2, [r7, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f7fa fd2e 	bl	80004a8 <__aeabi_uldivmod>
 8005a4c:	0002      	movs	r2, r0
 8005a4e:	000b      	movs	r3, r1
 8005a50:	0013      	movs	r3, r2
 8005a52:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a56:	23c0      	movs	r3, #192	; 0xc0
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d309      	bcc.n	8005a72 <UART_SetConfig+0x332>
 8005a5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a60:	2380      	movs	r3, #128	; 0x80
 8005a62:	035b      	lsls	r3, r3, #13
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d204      	bcs.n	8005a72 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a6e:	60da      	str	r2, [r3, #12]
 8005a70:	e0eb      	b.n	8005c4a <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8005a72:	231a      	movs	r3, #26
 8005a74:	2218      	movs	r2, #24
 8005a76:	189b      	adds	r3, r3, r2
 8005a78:	19db      	adds	r3, r3, r7
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	701a      	strb	r2, [r3, #0]
 8005a7e:	e0e4      	b.n	8005c4a <UART_SetConfig+0x50a>
 8005a80:	efff69f3 	.word	0xefff69f3
 8005a84:	ffffcfff 	.word	0xffffcfff
 8005a88:	40004800 	.word	0x40004800
 8005a8c:	fffff4ff 	.word	0xfffff4ff
 8005a90:	40013800 	.word	0x40013800
 8005a94:	40021000 	.word	0x40021000
 8005a98:	40004400 	.word	0x40004400
 8005a9c:	40004c00 	.word	0x40004c00
 8005aa0:	40005000 	.word	0x40005000
 8005aa4:	003d0900 	.word	0x003d0900
 8005aa8:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	69da      	ldr	r2, [r3, #28]
 8005ab0:	2380      	movs	r3, #128	; 0x80
 8005ab2:	021b      	lsls	r3, r3, #8
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d000      	beq.n	8005aba <UART_SetConfig+0x37a>
 8005ab8:	e070      	b.n	8005b9c <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8005aba:	231b      	movs	r3, #27
 8005abc:	2218      	movs	r2, #24
 8005abe:	189b      	adds	r3, r3, r2
 8005ac0:	19db      	adds	r3, r3, r7
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	2b08      	cmp	r3, #8
 8005ac6:	d822      	bhi.n	8005b0e <UART_SetConfig+0x3ce>
 8005ac8:	009a      	lsls	r2, r3, #2
 8005aca:	4b67      	ldr	r3, [pc, #412]	; (8005c68 <UART_SetConfig+0x528>)
 8005acc:	18d3      	adds	r3, r2, r3
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ad2:	f7ff f81b 	bl	8004b0c <HAL_RCC_GetPCLK1Freq>
 8005ad6:	0003      	movs	r3, r0
 8005ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ada:	e021      	b.n	8005b20 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005adc:	f7ff f82c 	bl	8004b38 <HAL_RCC_GetPCLK2Freq>
 8005ae0:	0003      	movs	r3, r0
 8005ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ae4:	e01c      	b.n	8005b20 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ae6:	4b61      	ldr	r3, [pc, #388]	; (8005c6c <UART_SetConfig+0x52c>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2210      	movs	r2, #16
 8005aec:	4013      	ands	r3, r2
 8005aee:	d002      	beq.n	8005af6 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005af0:	4b5f      	ldr	r3, [pc, #380]	; (8005c70 <UART_SetConfig+0x530>)
 8005af2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005af4:	e014      	b.n	8005b20 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8005af6:	4b5f      	ldr	r3, [pc, #380]	; (8005c74 <UART_SetConfig+0x534>)
 8005af8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005afa:	e011      	b.n	8005b20 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005afc:	f7fe ff56 	bl	80049ac <HAL_RCC_GetSysClockFreq>
 8005b00:	0003      	movs	r3, r0
 8005b02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b04:	e00c      	b.n	8005b20 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b06:	2380      	movs	r3, #128	; 0x80
 8005b08:	021b      	lsls	r3, r3, #8
 8005b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b0c:	e008      	b.n	8005b20 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005b12:	231a      	movs	r3, #26
 8005b14:	2218      	movs	r2, #24
 8005b16:	189b      	adds	r3, r3, r2
 8005b18:	19db      	adds	r3, r3, r7
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	701a      	strb	r2, [r3, #0]
        break;
 8005b1e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d100      	bne.n	8005b28 <UART_SetConfig+0x3e8>
 8005b26:	e090      	b.n	8005c4a <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b2a:	005a      	lsls	r2, r3, #1
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	085b      	lsrs	r3, r3, #1
 8005b32:	18d2      	adds	r2, r2, r3
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	0019      	movs	r1, r3
 8005b3a:	0010      	movs	r0, r2
 8005b3c:	f7fa fb00 	bl	8000140 <__udivsi3>
 8005b40:	0003      	movs	r3, r0
 8005b42:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b46:	2b0f      	cmp	r3, #15
 8005b48:	d921      	bls.n	8005b8e <UART_SetConfig+0x44e>
 8005b4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b4c:	2380      	movs	r3, #128	; 0x80
 8005b4e:	025b      	lsls	r3, r3, #9
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d21c      	bcs.n	8005b8e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	200e      	movs	r0, #14
 8005b5a:	2418      	movs	r4, #24
 8005b5c:	1903      	adds	r3, r0, r4
 8005b5e:	19db      	adds	r3, r3, r7
 8005b60:	210f      	movs	r1, #15
 8005b62:	438a      	bics	r2, r1
 8005b64:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b68:	085b      	lsrs	r3, r3, #1
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	2207      	movs	r2, #7
 8005b6e:	4013      	ands	r3, r2
 8005b70:	b299      	uxth	r1, r3
 8005b72:	1903      	adds	r3, r0, r4
 8005b74:	19db      	adds	r3, r3, r7
 8005b76:	1902      	adds	r2, r0, r4
 8005b78:	19d2      	adds	r2, r2, r7
 8005b7a:	8812      	ldrh	r2, [r2, #0]
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	1902      	adds	r2, r0, r4
 8005b86:	19d2      	adds	r2, r2, r7
 8005b88:	8812      	ldrh	r2, [r2, #0]
 8005b8a:	60da      	str	r2, [r3, #12]
 8005b8c:	e05d      	b.n	8005c4a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8005b8e:	231a      	movs	r3, #26
 8005b90:	2218      	movs	r2, #24
 8005b92:	189b      	adds	r3, r3, r2
 8005b94:	19db      	adds	r3, r3, r7
 8005b96:	2201      	movs	r2, #1
 8005b98:	701a      	strb	r2, [r3, #0]
 8005b9a:	e056      	b.n	8005c4a <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b9c:	231b      	movs	r3, #27
 8005b9e:	2218      	movs	r2, #24
 8005ba0:	189b      	adds	r3, r3, r2
 8005ba2:	19db      	adds	r3, r3, r7
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	2b08      	cmp	r3, #8
 8005ba8:	d822      	bhi.n	8005bf0 <UART_SetConfig+0x4b0>
 8005baa:	009a      	lsls	r2, r3, #2
 8005bac:	4b32      	ldr	r3, [pc, #200]	; (8005c78 <UART_SetConfig+0x538>)
 8005bae:	18d3      	adds	r3, r2, r3
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bb4:	f7fe ffaa 	bl	8004b0c <HAL_RCC_GetPCLK1Freq>
 8005bb8:	0003      	movs	r3, r0
 8005bba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005bbc:	e021      	b.n	8005c02 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bbe:	f7fe ffbb 	bl	8004b38 <HAL_RCC_GetPCLK2Freq>
 8005bc2:	0003      	movs	r3, r0
 8005bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005bc6:	e01c      	b.n	8005c02 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bc8:	4b28      	ldr	r3, [pc, #160]	; (8005c6c <UART_SetConfig+0x52c>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2210      	movs	r2, #16
 8005bce:	4013      	ands	r3, r2
 8005bd0:	d002      	beq.n	8005bd8 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005bd2:	4b27      	ldr	r3, [pc, #156]	; (8005c70 <UART_SetConfig+0x530>)
 8005bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005bd6:	e014      	b.n	8005c02 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8005bd8:	4b26      	ldr	r3, [pc, #152]	; (8005c74 <UART_SetConfig+0x534>)
 8005bda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005bdc:	e011      	b.n	8005c02 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bde:	f7fe fee5 	bl	80049ac <HAL_RCC_GetSysClockFreq>
 8005be2:	0003      	movs	r3, r0
 8005be4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005be6:	e00c      	b.n	8005c02 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005be8:	2380      	movs	r3, #128	; 0x80
 8005bea:	021b      	lsls	r3, r3, #8
 8005bec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005bee:	e008      	b.n	8005c02 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005bf4:	231a      	movs	r3, #26
 8005bf6:	2218      	movs	r2, #24
 8005bf8:	189b      	adds	r3, r3, r2
 8005bfa:	19db      	adds	r3, r3, r7
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	701a      	strb	r2, [r3, #0]
        break;
 8005c00:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d020      	beq.n	8005c4a <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	085a      	lsrs	r2, r3, #1
 8005c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c10:	18d2      	adds	r2, r2, r3
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	0019      	movs	r1, r3
 8005c18:	0010      	movs	r0, r2
 8005c1a:	f7fa fa91 	bl	8000140 <__udivsi3>
 8005c1e:	0003      	movs	r3, r0
 8005c20:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c24:	2b0f      	cmp	r3, #15
 8005c26:	d90a      	bls.n	8005c3e <UART_SetConfig+0x4fe>
 8005c28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c2a:	2380      	movs	r3, #128	; 0x80
 8005c2c:	025b      	lsls	r3, r3, #9
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d205      	bcs.n	8005c3e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	60da      	str	r2, [r3, #12]
 8005c3c:	e005      	b.n	8005c4a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8005c3e:	231a      	movs	r3, #26
 8005c40:	2218      	movs	r2, #24
 8005c42:	189b      	adds	r3, r3, r2
 8005c44:	19db      	adds	r3, r3, r7
 8005c46:	2201      	movs	r2, #1
 8005c48:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	2200      	movs	r2, #0
 8005c54:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005c56:	231a      	movs	r3, #26
 8005c58:	2218      	movs	r2, #24
 8005c5a:	189b      	adds	r3, r3, r2
 8005c5c:	19db      	adds	r3, r3, r7
 8005c5e:	781b      	ldrb	r3, [r3, #0]
}
 8005c60:	0018      	movs	r0, r3
 8005c62:	46bd      	mov	sp, r7
 8005c64:	b00e      	add	sp, #56	; 0x38
 8005c66:	bdb0      	pop	{r4, r5, r7, pc}
 8005c68:	0800bc1c 	.word	0x0800bc1c
 8005c6c:	40021000 	.word	0x40021000
 8005c70:	003d0900 	.word	0x003d0900
 8005c74:	00f42400 	.word	0x00f42400
 8005c78:	0800bc40 	.word	0x0800bc40

08005c7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	2201      	movs	r2, #1
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	d00b      	beq.n	8005ca6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	4a4a      	ldr	r2, [pc, #296]	; (8005dc0 <UART_AdvFeatureConfig+0x144>)
 8005c96:	4013      	ands	r3, r2
 8005c98:	0019      	movs	r1, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005caa:	2202      	movs	r2, #2
 8005cac:	4013      	ands	r3, r2
 8005cae:	d00b      	beq.n	8005cc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	4a43      	ldr	r2, [pc, #268]	; (8005dc4 <UART_AdvFeatureConfig+0x148>)
 8005cb8:	4013      	ands	r3, r2
 8005cba:	0019      	movs	r1, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ccc:	2204      	movs	r2, #4
 8005cce:	4013      	ands	r3, r2
 8005cd0:	d00b      	beq.n	8005cea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	4a3b      	ldr	r2, [pc, #236]	; (8005dc8 <UART_AdvFeatureConfig+0x14c>)
 8005cda:	4013      	ands	r3, r2
 8005cdc:	0019      	movs	r1, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	2208      	movs	r2, #8
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	d00b      	beq.n	8005d0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	4a34      	ldr	r2, [pc, #208]	; (8005dcc <UART_AdvFeatureConfig+0x150>)
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	0019      	movs	r1, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d10:	2210      	movs	r2, #16
 8005d12:	4013      	ands	r3, r2
 8005d14:	d00b      	beq.n	8005d2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	4a2c      	ldr	r2, [pc, #176]	; (8005dd0 <UART_AdvFeatureConfig+0x154>)
 8005d1e:	4013      	ands	r3, r2
 8005d20:	0019      	movs	r1, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d32:	2220      	movs	r2, #32
 8005d34:	4013      	ands	r3, r2
 8005d36:	d00b      	beq.n	8005d50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	4a25      	ldr	r2, [pc, #148]	; (8005dd4 <UART_AdvFeatureConfig+0x158>)
 8005d40:	4013      	ands	r3, r2
 8005d42:	0019      	movs	r1, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d54:	2240      	movs	r2, #64	; 0x40
 8005d56:	4013      	ands	r3, r2
 8005d58:	d01d      	beq.n	8005d96 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	4a1d      	ldr	r2, [pc, #116]	; (8005dd8 <UART_AdvFeatureConfig+0x15c>)
 8005d62:	4013      	ands	r3, r2
 8005d64:	0019      	movs	r1, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d76:	2380      	movs	r3, #128	; 0x80
 8005d78:	035b      	lsls	r3, r3, #13
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d10b      	bne.n	8005d96 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	4a15      	ldr	r2, [pc, #84]	; (8005ddc <UART_AdvFeatureConfig+0x160>)
 8005d86:	4013      	ands	r3, r2
 8005d88:	0019      	movs	r1, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	430a      	orrs	r2, r1
 8005d94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9a:	2280      	movs	r2, #128	; 0x80
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	d00b      	beq.n	8005db8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	4a0e      	ldr	r2, [pc, #56]	; (8005de0 <UART_AdvFeatureConfig+0x164>)
 8005da8:	4013      	ands	r3, r2
 8005daa:	0019      	movs	r1, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	430a      	orrs	r2, r1
 8005db6:	605a      	str	r2, [r3, #4]
  }
}
 8005db8:	46c0      	nop			; (mov r8, r8)
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	b002      	add	sp, #8
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	fffdffff 	.word	0xfffdffff
 8005dc4:	fffeffff 	.word	0xfffeffff
 8005dc8:	fffbffff 	.word	0xfffbffff
 8005dcc:	ffff7fff 	.word	0xffff7fff
 8005dd0:	ffffefff 	.word	0xffffefff
 8005dd4:	ffffdfff 	.word	0xffffdfff
 8005dd8:	ffefffff 	.word	0xffefffff
 8005ddc:	ff9fffff 	.word	0xff9fffff
 8005de0:	fff7ffff 	.word	0xfff7ffff

08005de4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b092      	sub	sp, #72	; 0x48
 8005de8:	af02      	add	r7, sp, #8
 8005dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2284      	movs	r2, #132	; 0x84
 8005df0:	2100      	movs	r1, #0
 8005df2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005df4:	f7fd fdd0 	bl	8003998 <HAL_GetTick>
 8005df8:	0003      	movs	r3, r0
 8005dfa:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2208      	movs	r2, #8
 8005e04:	4013      	ands	r3, r2
 8005e06:	2b08      	cmp	r3, #8
 8005e08:	d12c      	bne.n	8005e64 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e0c:	2280      	movs	r2, #128	; 0x80
 8005e0e:	0391      	lsls	r1, r2, #14
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	4a46      	ldr	r2, [pc, #280]	; (8005f2c <UART_CheckIdleState+0x148>)
 8005e14:	9200      	str	r2, [sp, #0]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f000 f88c 	bl	8005f34 <UART_WaitOnFlagUntilTimeout>
 8005e1c:	1e03      	subs	r3, r0, #0
 8005e1e:	d021      	beq.n	8005e64 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e20:	f3ef 8310 	mrs	r3, PRIMASK
 8005e24:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005e28:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e30:	f383 8810 	msr	PRIMASK, r3
}
 8005e34:	46c0      	nop			; (mov r8, r8)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2180      	movs	r1, #128	; 0x80
 8005e42:	438a      	bics	r2, r1
 8005e44:	601a      	str	r2, [r3, #0]
 8005e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e48:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e4c:	f383 8810 	msr	PRIMASK, r3
}
 8005e50:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2220      	movs	r2, #32
 8005e56:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2278      	movs	r2, #120	; 0x78
 8005e5c:	2100      	movs	r1, #0
 8005e5e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e05f      	b.n	8005f24 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2204      	movs	r2, #4
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	2b04      	cmp	r3, #4
 8005e70:	d146      	bne.n	8005f00 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e74:	2280      	movs	r2, #128	; 0x80
 8005e76:	03d1      	lsls	r1, r2, #15
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	4a2c      	ldr	r2, [pc, #176]	; (8005f2c <UART_CheckIdleState+0x148>)
 8005e7c:	9200      	str	r2, [sp, #0]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f000 f858 	bl	8005f34 <UART_WaitOnFlagUntilTimeout>
 8005e84:	1e03      	subs	r3, r0, #0
 8005e86:	d03b      	beq.n	8005f00 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e88:	f3ef 8310 	mrs	r3, PRIMASK
 8005e8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e90:	637b      	str	r3, [r7, #52]	; 0x34
 8005e92:	2301      	movs	r3, #1
 8005e94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	f383 8810 	msr	PRIMASK, r3
}
 8005e9c:	46c0      	nop			; (mov r8, r8)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4921      	ldr	r1, [pc, #132]	; (8005f30 <UART_CheckIdleState+0x14c>)
 8005eaa:	400a      	ands	r2, r1
 8005eac:	601a      	str	r2, [r3, #0]
 8005eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	f383 8810 	msr	PRIMASK, r3
}
 8005eb8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eba:	f3ef 8310 	mrs	r3, PRIMASK
 8005ebe:	61bb      	str	r3, [r7, #24]
  return(result);
 8005ec0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ec2:	633b      	str	r3, [r7, #48]	; 0x30
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	f383 8810 	msr	PRIMASK, r3
}
 8005ece:	46c0      	nop			; (mov r8, r8)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689a      	ldr	r2, [r3, #8]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2101      	movs	r1, #1
 8005edc:	438a      	bics	r2, r1
 8005ede:	609a      	str	r2, [r3, #8]
 8005ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ee4:	6a3b      	ldr	r3, [r7, #32]
 8005ee6:	f383 8810 	msr	PRIMASK, r3
}
 8005eea:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2280      	movs	r2, #128	; 0x80
 8005ef0:	2120      	movs	r1, #32
 8005ef2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2278      	movs	r2, #120	; 0x78
 8005ef8:	2100      	movs	r1, #0
 8005efa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e011      	b.n	8005f24 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2220      	movs	r2, #32
 8005f04:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2280      	movs	r2, #128	; 0x80
 8005f0a:	2120      	movs	r1, #32
 8005f0c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2278      	movs	r2, #120	; 0x78
 8005f1e:	2100      	movs	r1, #0
 8005f20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	0018      	movs	r0, r3
 8005f26:	46bd      	mov	sp, r7
 8005f28:	b010      	add	sp, #64	; 0x40
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	01ffffff 	.word	0x01ffffff
 8005f30:	fffffedf 	.word	0xfffffedf

08005f34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	603b      	str	r3, [r7, #0]
 8005f40:	1dfb      	adds	r3, r7, #7
 8005f42:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f44:	e04b      	b.n	8005fde <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	d048      	beq.n	8005fde <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f4c:	f7fd fd24 	bl	8003998 <HAL_GetTick>
 8005f50:	0002      	movs	r2, r0
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d302      	bcc.n	8005f62 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d101      	bne.n	8005f66 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e04b      	b.n	8005ffe <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2204      	movs	r2, #4
 8005f6e:	4013      	ands	r3, r2
 8005f70:	d035      	beq.n	8005fde <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	69db      	ldr	r3, [r3, #28]
 8005f78:	2208      	movs	r2, #8
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	2b08      	cmp	r3, #8
 8005f7e:	d111      	bne.n	8005fa4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2208      	movs	r2, #8
 8005f86:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	0018      	movs	r0, r3
 8005f8c:	f000 f906 	bl	800619c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2284      	movs	r2, #132	; 0x84
 8005f94:	2108      	movs	r1, #8
 8005f96:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2278      	movs	r2, #120	; 0x78
 8005f9c:	2100      	movs	r1, #0
 8005f9e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e02c      	b.n	8005ffe <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	69da      	ldr	r2, [r3, #28]
 8005faa:	2380      	movs	r3, #128	; 0x80
 8005fac:	011b      	lsls	r3, r3, #4
 8005fae:	401a      	ands	r2, r3
 8005fb0:	2380      	movs	r3, #128	; 0x80
 8005fb2:	011b      	lsls	r3, r3, #4
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d112      	bne.n	8005fde <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2280      	movs	r2, #128	; 0x80
 8005fbe:	0112      	lsls	r2, r2, #4
 8005fc0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	0018      	movs	r0, r3
 8005fc6:	f000 f8e9 	bl	800619c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2284      	movs	r2, #132	; 0x84
 8005fce:	2120      	movs	r1, #32
 8005fd0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2278      	movs	r2, #120	; 0x78
 8005fd6:	2100      	movs	r1, #0
 8005fd8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e00f      	b.n	8005ffe <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	69db      	ldr	r3, [r3, #28]
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	425a      	negs	r2, r3
 8005fee:	4153      	adcs	r3, r2
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	001a      	movs	r2, r3
 8005ff4:	1dfb      	adds	r3, r7, #7
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d0a4      	beq.n	8005f46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	0018      	movs	r0, r3
 8006000:	46bd      	mov	sp, r7
 8006002:	b004      	add	sp, #16
 8006004:	bd80      	pop	{r7, pc}
	...

08006008 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b090      	sub	sp, #64	; 0x40
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	1dbb      	adds	r3, r7, #6
 8006014:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	68ba      	ldr	r2, [r7, #8]
 800601a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	1dba      	adds	r2, r7, #6
 8006020:	2158      	movs	r1, #88	; 0x58
 8006022:	8812      	ldrh	r2, [r2, #0]
 8006024:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	1dba      	adds	r2, r7, #6
 800602a:	215a      	movs	r1, #90	; 0x5a
 800602c:	8812      	ldrh	r2, [r2, #0]
 800602e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	689a      	ldr	r2, [r3, #8]
 800603a:	2380      	movs	r3, #128	; 0x80
 800603c:	015b      	lsls	r3, r3, #5
 800603e:	429a      	cmp	r2, r3
 8006040:	d10d      	bne.n	800605e <UART_Start_Receive_IT+0x56>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d104      	bne.n	8006054 <UART_Start_Receive_IT+0x4c>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	225c      	movs	r2, #92	; 0x5c
 800604e:	4950      	ldr	r1, [pc, #320]	; (8006190 <UART_Start_Receive_IT+0x188>)
 8006050:	5299      	strh	r1, [r3, r2]
 8006052:	e02e      	b.n	80060b2 <UART_Start_Receive_IT+0xaa>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	225c      	movs	r2, #92	; 0x5c
 8006058:	21ff      	movs	r1, #255	; 0xff
 800605a:	5299      	strh	r1, [r3, r2]
 800605c:	e029      	b.n	80060b2 <UART_Start_Receive_IT+0xaa>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10d      	bne.n	8006082 <UART_Start_Receive_IT+0x7a>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d104      	bne.n	8006078 <UART_Start_Receive_IT+0x70>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	225c      	movs	r2, #92	; 0x5c
 8006072:	21ff      	movs	r1, #255	; 0xff
 8006074:	5299      	strh	r1, [r3, r2]
 8006076:	e01c      	b.n	80060b2 <UART_Start_Receive_IT+0xaa>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	225c      	movs	r2, #92	; 0x5c
 800607c:	217f      	movs	r1, #127	; 0x7f
 800607e:	5299      	strh	r1, [r3, r2]
 8006080:	e017      	b.n	80060b2 <UART_Start_Receive_IT+0xaa>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	689a      	ldr	r2, [r3, #8]
 8006086:	2380      	movs	r3, #128	; 0x80
 8006088:	055b      	lsls	r3, r3, #21
 800608a:	429a      	cmp	r2, r3
 800608c:	d10d      	bne.n	80060aa <UART_Start_Receive_IT+0xa2>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d104      	bne.n	80060a0 <UART_Start_Receive_IT+0x98>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	225c      	movs	r2, #92	; 0x5c
 800609a:	217f      	movs	r1, #127	; 0x7f
 800609c:	5299      	strh	r1, [r3, r2]
 800609e:	e008      	b.n	80060b2 <UART_Start_Receive_IT+0xaa>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	225c      	movs	r2, #92	; 0x5c
 80060a4:	213f      	movs	r1, #63	; 0x3f
 80060a6:	5299      	strh	r1, [r3, r2]
 80060a8:	e003      	b.n	80060b2 <UART_Start_Receive_IT+0xaa>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	225c      	movs	r2, #92	; 0x5c
 80060ae:	2100      	movs	r1, #0
 80060b0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2284      	movs	r2, #132	; 0x84
 80060b6:	2100      	movs	r1, #0
 80060b8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2280      	movs	r2, #128	; 0x80
 80060be:	2122      	movs	r1, #34	; 0x22
 80060c0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060c2:	f3ef 8310 	mrs	r3, PRIMASK
 80060c6:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80060c8:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060cc:	2301      	movs	r3, #1
 80060ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d2:	f383 8810 	msr	PRIMASK, r3
}
 80060d6:	46c0      	nop			; (mov r8, r8)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	689a      	ldr	r2, [r3, #8]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2101      	movs	r1, #1
 80060e4:	430a      	orrs	r2, r1
 80060e6:	609a      	str	r2, [r3, #8]
 80060e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ea:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ee:	f383 8810 	msr	PRIMASK, r3
}
 80060f2:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	689a      	ldr	r2, [r3, #8]
 80060f8:	2380      	movs	r3, #128	; 0x80
 80060fa:	015b      	lsls	r3, r3, #5
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d107      	bne.n	8006110 <UART_Start_Receive_IT+0x108>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d103      	bne.n	8006110 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	4a22      	ldr	r2, [pc, #136]	; (8006194 <UART_Start_Receive_IT+0x18c>)
 800610c:	669a      	str	r2, [r3, #104]	; 0x68
 800610e:	e002      	b.n	8006116 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	4a21      	ldr	r2, [pc, #132]	; (8006198 <UART_Start_Receive_IT+0x190>)
 8006114:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d019      	beq.n	8006152 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800611e:	f3ef 8310 	mrs	r3, PRIMASK
 8006122:	61fb      	str	r3, [r7, #28]
  return(result);
 8006124:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006126:	637b      	str	r3, [r7, #52]	; 0x34
 8006128:	2301      	movs	r3, #1
 800612a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800612c:	6a3b      	ldr	r3, [r7, #32]
 800612e:	f383 8810 	msr	PRIMASK, r3
}
 8006132:	46c0      	nop			; (mov r8, r8)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2190      	movs	r1, #144	; 0x90
 8006140:	0049      	lsls	r1, r1, #1
 8006142:	430a      	orrs	r2, r1
 8006144:	601a      	str	r2, [r3, #0]
 8006146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006148:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800614a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614c:	f383 8810 	msr	PRIMASK, r3
}
 8006150:	e018      	b.n	8006184 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006152:	f3ef 8310 	mrs	r3, PRIMASK
 8006156:	613b      	str	r3, [r7, #16]
  return(result);
 8006158:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800615a:	63bb      	str	r3, [r7, #56]	; 0x38
 800615c:	2301      	movs	r3, #1
 800615e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f383 8810 	msr	PRIMASK, r3
}
 8006166:	46c0      	nop			; (mov r8, r8)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2120      	movs	r1, #32
 8006174:	430a      	orrs	r2, r1
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	f383 8810 	msr	PRIMASK, r3
}
 8006182:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	0018      	movs	r0, r3
 8006188:	46bd      	mov	sp, r7
 800618a:	b010      	add	sp, #64	; 0x40
 800618c:	bd80      	pop	{r7, pc}
 800618e:	46c0      	nop			; (mov r8, r8)
 8006190:	000001ff 	.word	0x000001ff
 8006194:	080064ad 	.word	0x080064ad
 8006198:	080062e9 	.word	0x080062e9

0800619c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b08e      	sub	sp, #56	; 0x38
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061a4:	f3ef 8310 	mrs	r3, PRIMASK
 80061a8:	617b      	str	r3, [r7, #20]
  return(result);
 80061aa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061ac:	637b      	str	r3, [r7, #52]	; 0x34
 80061ae:	2301      	movs	r3, #1
 80061b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	f383 8810 	msr	PRIMASK, r3
}
 80061b8:	46c0      	nop			; (mov r8, r8)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4926      	ldr	r1, [pc, #152]	; (8006260 <UART_EndRxTransfer+0xc4>)
 80061c6:	400a      	ands	r2, r1
 80061c8:	601a      	str	r2, [r3, #0]
 80061ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	f383 8810 	msr	PRIMASK, r3
}
 80061d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061d6:	f3ef 8310 	mrs	r3, PRIMASK
 80061da:	623b      	str	r3, [r7, #32]
  return(result);
 80061dc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061de:	633b      	str	r3, [r7, #48]	; 0x30
 80061e0:	2301      	movs	r3, #1
 80061e2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e6:	f383 8810 	msr	PRIMASK, r3
}
 80061ea:	46c0      	nop			; (mov r8, r8)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	689a      	ldr	r2, [r3, #8]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2101      	movs	r1, #1
 80061f8:	438a      	bics	r2, r1
 80061fa:	609a      	str	r2, [r3, #8]
 80061fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006202:	f383 8810 	msr	PRIMASK, r3
}
 8006206:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800620c:	2b01      	cmp	r3, #1
 800620e:	d118      	bne.n	8006242 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006210:	f3ef 8310 	mrs	r3, PRIMASK
 8006214:	60bb      	str	r3, [r7, #8]
  return(result);
 8006216:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006218:	62fb      	str	r3, [r7, #44]	; 0x2c
 800621a:	2301      	movs	r3, #1
 800621c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f383 8810 	msr	PRIMASK, r3
}
 8006224:	46c0      	nop			; (mov r8, r8)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2110      	movs	r1, #16
 8006232:	438a      	bics	r2, r1
 8006234:	601a      	str	r2, [r3, #0]
 8006236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006238:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	f383 8810 	msr	PRIMASK, r3
}
 8006240:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2280      	movs	r2, #128	; 0x80
 8006246:	2120      	movs	r1, #32
 8006248:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006256:	46c0      	nop			; (mov r8, r8)
 8006258:	46bd      	mov	sp, r7
 800625a:	b00e      	add	sp, #56	; 0x38
 800625c:	bd80      	pop	{r7, pc}
 800625e:	46c0      	nop			; (mov r8, r8)
 8006260:	fffffedf 	.word	0xfffffedf

08006264 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006270:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	225a      	movs	r2, #90	; 0x5a
 8006276:	2100      	movs	r1, #0
 8006278:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2252      	movs	r2, #82	; 0x52
 800627e:	2100      	movs	r1, #0
 8006280:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	0018      	movs	r0, r3
 8006286:	f7ff fa47 	bl	8005718 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800628a:	46c0      	nop			; (mov r8, r8)
 800628c:	46bd      	mov	sp, r7
 800628e:	b004      	add	sp, #16
 8006290:	bd80      	pop	{r7, pc}

08006292 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b086      	sub	sp, #24
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800629a:	f3ef 8310 	mrs	r3, PRIMASK
 800629e:	60bb      	str	r3, [r7, #8]
  return(result);
 80062a0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80062a2:	617b      	str	r3, [r7, #20]
 80062a4:	2301      	movs	r3, #1
 80062a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f383 8810 	msr	PRIMASK, r3
}
 80062ae:	46c0      	nop			; (mov r8, r8)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2140      	movs	r1, #64	; 0x40
 80062bc:	438a      	bics	r2, r1
 80062be:	601a      	str	r2, [r3, #0]
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	f383 8810 	msr	PRIMASK, r3
}
 80062ca:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2220      	movs	r2, #32
 80062d0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	0018      	movs	r0, r3
 80062dc:	f7ff fa14 	bl	8005708 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062e0:	46c0      	nop			; (mov r8, r8)
 80062e2:	46bd      	mov	sp, r7
 80062e4:	b006      	add	sp, #24
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b094      	sub	sp, #80	; 0x50
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80062f0:	204e      	movs	r0, #78	; 0x4e
 80062f2:	183b      	adds	r3, r7, r0
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	215c      	movs	r1, #92	; 0x5c
 80062f8:	5a52      	ldrh	r2, [r2, r1]
 80062fa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2280      	movs	r2, #128	; 0x80
 8006300:	589b      	ldr	r3, [r3, r2]
 8006302:	2b22      	cmp	r3, #34	; 0x22
 8006304:	d000      	beq.n	8006308 <UART_RxISR_8BIT+0x20>
 8006306:	e0bf      	b.n	8006488 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800630e:	214c      	movs	r1, #76	; 0x4c
 8006310:	187b      	adds	r3, r7, r1
 8006312:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006314:	187b      	adds	r3, r7, r1
 8006316:	881b      	ldrh	r3, [r3, #0]
 8006318:	b2da      	uxtb	r2, r3
 800631a:	183b      	adds	r3, r7, r0
 800631c:	881b      	ldrh	r3, [r3, #0]
 800631e:	b2d9      	uxtb	r1, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006324:	400a      	ands	r2, r1
 8006326:	b2d2      	uxtb	r2, r2
 8006328:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800632e:	1c5a      	adds	r2, r3, #1
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	225a      	movs	r2, #90	; 0x5a
 8006338:	5a9b      	ldrh	r3, [r3, r2]
 800633a:	b29b      	uxth	r3, r3
 800633c:	3b01      	subs	r3, #1
 800633e:	b299      	uxth	r1, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	225a      	movs	r2, #90	; 0x5a
 8006344:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	225a      	movs	r2, #90	; 0x5a
 800634a:	5a9b      	ldrh	r3, [r3, r2]
 800634c:	b29b      	uxth	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d000      	beq.n	8006354 <UART_RxISR_8BIT+0x6c>
 8006352:	e0a1      	b.n	8006498 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006354:	f3ef 8310 	mrs	r3, PRIMASK
 8006358:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800635a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800635c:	64bb      	str	r3, [r7, #72]	; 0x48
 800635e:	2301      	movs	r3, #1
 8006360:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006364:	f383 8810 	msr	PRIMASK, r3
}
 8006368:	46c0      	nop			; (mov r8, r8)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	494a      	ldr	r1, [pc, #296]	; (80064a0 <UART_RxISR_8BIT+0x1b8>)
 8006376:	400a      	ands	r2, r1
 8006378:	601a      	str	r2, [r3, #0]
 800637a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800637c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800637e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006380:	f383 8810 	msr	PRIMASK, r3
}
 8006384:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006386:	f3ef 8310 	mrs	r3, PRIMASK
 800638a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800638c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800638e:	647b      	str	r3, [r7, #68]	; 0x44
 8006390:	2301      	movs	r3, #1
 8006392:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006396:	f383 8810 	msr	PRIMASK, r3
}
 800639a:	46c0      	nop			; (mov r8, r8)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	689a      	ldr	r2, [r3, #8]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2101      	movs	r1, #1
 80063a8:	438a      	bics	r2, r1
 80063aa:	609a      	str	r2, [r3, #8]
 80063ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063ae:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b2:	f383 8810 	msr	PRIMASK, r3
}
 80063b6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2280      	movs	r2, #128	; 0x80
 80063bc:	2120      	movs	r1, #32
 80063be:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a34      	ldr	r2, [pc, #208]	; (80064a4 <UART_RxISR_8BIT+0x1bc>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d01f      	beq.n	8006416 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	685a      	ldr	r2, [r3, #4]
 80063dc:	2380      	movs	r3, #128	; 0x80
 80063de:	041b      	lsls	r3, r3, #16
 80063e0:	4013      	ands	r3, r2
 80063e2:	d018      	beq.n	8006416 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063e4:	f3ef 8310 	mrs	r3, PRIMASK
 80063e8:	61bb      	str	r3, [r7, #24]
  return(result);
 80063ea:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80063ec:	643b      	str	r3, [r7, #64]	; 0x40
 80063ee:	2301      	movs	r3, #1
 80063f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	f383 8810 	msr	PRIMASK, r3
}
 80063f8:	46c0      	nop			; (mov r8, r8)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4928      	ldr	r1, [pc, #160]	; (80064a8 <UART_RxISR_8BIT+0x1c0>)
 8006406:	400a      	ands	r2, r1
 8006408:	601a      	str	r2, [r3, #0]
 800640a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800640c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800640e:	6a3b      	ldr	r3, [r7, #32]
 8006410:	f383 8810 	msr	PRIMASK, r3
}
 8006414:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800641a:	2b01      	cmp	r3, #1
 800641c:	d12f      	bne.n	800647e <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006424:	f3ef 8310 	mrs	r3, PRIMASK
 8006428:	60fb      	str	r3, [r7, #12]
  return(result);
 800642a:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800642c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800642e:	2301      	movs	r3, #1
 8006430:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	f383 8810 	msr	PRIMASK, r3
}
 8006438:	46c0      	nop			; (mov r8, r8)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2110      	movs	r1, #16
 8006446:	438a      	bics	r2, r1
 8006448:	601a      	str	r2, [r3, #0]
 800644a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800644c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	f383 8810 	msr	PRIMASK, r3
}
 8006454:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	69db      	ldr	r3, [r3, #28]
 800645c:	2210      	movs	r2, #16
 800645e:	4013      	ands	r3, r2
 8006460:	2b10      	cmp	r3, #16
 8006462:	d103      	bne.n	800646c <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2210      	movs	r2, #16
 800646a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2258      	movs	r2, #88	; 0x58
 8006470:	5a9a      	ldrh	r2, [r3, r2]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	0011      	movs	r1, r2
 8006476:	0018      	movs	r0, r3
 8006478:	f7ff f956 	bl	8005728 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800647c:	e00c      	b.n	8006498 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	0018      	movs	r0, r3
 8006482:	f7fd f867 	bl	8003554 <HAL_UART_RxCpltCallback>
}
 8006486:	e007      	b.n	8006498 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	699a      	ldr	r2, [r3, #24]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2108      	movs	r1, #8
 8006494:	430a      	orrs	r2, r1
 8006496:	619a      	str	r2, [r3, #24]
}
 8006498:	46c0      	nop			; (mov r8, r8)
 800649a:	46bd      	mov	sp, r7
 800649c:	b014      	add	sp, #80	; 0x50
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	fffffedf 	.word	0xfffffedf
 80064a4:	40004800 	.word	0x40004800
 80064a8:	fbffffff 	.word	0xfbffffff

080064ac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b094      	sub	sp, #80	; 0x50
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80064b4:	204e      	movs	r0, #78	; 0x4e
 80064b6:	183b      	adds	r3, r7, r0
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	215c      	movs	r1, #92	; 0x5c
 80064bc:	5a52      	ldrh	r2, [r2, r1]
 80064be:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2280      	movs	r2, #128	; 0x80
 80064c4:	589b      	ldr	r3, [r3, r2]
 80064c6:	2b22      	cmp	r3, #34	; 0x22
 80064c8:	d000      	beq.n	80064cc <UART_RxISR_16BIT+0x20>
 80064ca:	e0bf      	b.n	800664c <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064d2:	214c      	movs	r1, #76	; 0x4c
 80064d4:	187b      	adds	r3, r7, r1
 80064d6:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064dc:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80064de:	187b      	adds	r3, r7, r1
 80064e0:	183a      	adds	r2, r7, r0
 80064e2:	881b      	ldrh	r3, [r3, #0]
 80064e4:	8812      	ldrh	r2, [r2, #0]
 80064e6:	4013      	ands	r3, r2
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064ec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f2:	1c9a      	adds	r2, r3, #2
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	225a      	movs	r2, #90	; 0x5a
 80064fc:	5a9b      	ldrh	r3, [r3, r2]
 80064fe:	b29b      	uxth	r3, r3
 8006500:	3b01      	subs	r3, #1
 8006502:	b299      	uxth	r1, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	225a      	movs	r2, #90	; 0x5a
 8006508:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	225a      	movs	r2, #90	; 0x5a
 800650e:	5a9b      	ldrh	r3, [r3, r2]
 8006510:	b29b      	uxth	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d000      	beq.n	8006518 <UART_RxISR_16BIT+0x6c>
 8006516:	e0a1      	b.n	800665c <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006518:	f3ef 8310 	mrs	r3, PRIMASK
 800651c:	623b      	str	r3, [r7, #32]
  return(result);
 800651e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006520:	647b      	str	r3, [r7, #68]	; 0x44
 8006522:	2301      	movs	r3, #1
 8006524:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006528:	f383 8810 	msr	PRIMASK, r3
}
 800652c:	46c0      	nop			; (mov r8, r8)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	494a      	ldr	r1, [pc, #296]	; (8006664 <UART_RxISR_16BIT+0x1b8>)
 800653a:	400a      	ands	r2, r1
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006540:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006544:	f383 8810 	msr	PRIMASK, r3
}
 8006548:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800654a:	f3ef 8310 	mrs	r3, PRIMASK
 800654e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8006550:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006552:	643b      	str	r3, [r7, #64]	; 0x40
 8006554:	2301      	movs	r3, #1
 8006556:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655a:	f383 8810 	msr	PRIMASK, r3
}
 800655e:	46c0      	nop			; (mov r8, r8)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	689a      	ldr	r2, [r3, #8]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2101      	movs	r1, #1
 800656c:	438a      	bics	r2, r1
 800656e:	609a      	str	r2, [r3, #8]
 8006570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006572:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006576:	f383 8810 	msr	PRIMASK, r3
}
 800657a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2280      	movs	r2, #128	; 0x80
 8006580:	2120      	movs	r1, #32
 8006582:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a34      	ldr	r2, [pc, #208]	; (8006668 <UART_RxISR_16BIT+0x1bc>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d01f      	beq.n	80065da <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	2380      	movs	r3, #128	; 0x80
 80065a2:	041b      	lsls	r3, r3, #16
 80065a4:	4013      	ands	r3, r2
 80065a6:	d018      	beq.n	80065da <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065a8:	f3ef 8310 	mrs	r3, PRIMASK
 80065ac:	617b      	str	r3, [r7, #20]
  return(result);
 80065ae:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80065b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065b2:	2301      	movs	r3, #1
 80065b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	f383 8810 	msr	PRIMASK, r3
}
 80065bc:	46c0      	nop			; (mov r8, r8)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4928      	ldr	r1, [pc, #160]	; (800666c <UART_RxISR_16BIT+0x1c0>)
 80065ca:	400a      	ands	r2, r1
 80065cc:	601a      	str	r2, [r3, #0]
 80065ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	f383 8810 	msr	PRIMASK, r3
}
 80065d8:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d12f      	bne.n	8006642 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065e8:	f3ef 8310 	mrs	r3, PRIMASK
 80065ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80065ee:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80065f2:	2301      	movs	r3, #1
 80065f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f383 8810 	msr	PRIMASK, r3
}
 80065fc:	46c0      	nop			; (mov r8, r8)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2110      	movs	r1, #16
 800660a:	438a      	bics	r2, r1
 800660c:	601a      	str	r2, [r3, #0]
 800660e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006610:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	f383 8810 	msr	PRIMASK, r3
}
 8006618:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	69db      	ldr	r3, [r3, #28]
 8006620:	2210      	movs	r2, #16
 8006622:	4013      	ands	r3, r2
 8006624:	2b10      	cmp	r3, #16
 8006626:	d103      	bne.n	8006630 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2210      	movs	r2, #16
 800662e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2258      	movs	r2, #88	; 0x58
 8006634:	5a9a      	ldrh	r2, [r3, r2]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	0011      	movs	r1, r2
 800663a:	0018      	movs	r0, r3
 800663c:	f7ff f874 	bl	8005728 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006640:	e00c      	b.n	800665c <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	0018      	movs	r0, r3
 8006646:	f7fc ff85 	bl	8003554 <HAL_UART_RxCpltCallback>
}
 800664a:	e007      	b.n	800665c <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	699a      	ldr	r2, [r3, #24]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2108      	movs	r1, #8
 8006658:	430a      	orrs	r2, r1
 800665a:	619a      	str	r2, [r3, #24]
}
 800665c:	46c0      	nop			; (mov r8, r8)
 800665e:	46bd      	mov	sp, r7
 8006660:	b014      	add	sp, #80	; 0x50
 8006662:	bd80      	pop	{r7, pc}
 8006664:	fffffedf 	.word	0xfffffedf
 8006668:	40004800 	.word	0x40004800
 800666c:	fbffffff 	.word	0xfbffffff

08006670 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b082      	sub	sp, #8
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006678:	46c0      	nop			; (mov r8, r8)
 800667a:	46bd      	mov	sp, r7
 800667c:	b002      	add	sp, #8
 800667e:	bd80      	pop	{r7, pc}

08006680 <__errno>:
 8006680:	4b01      	ldr	r3, [pc, #4]	; (8006688 <__errno+0x8>)
 8006682:	6818      	ldr	r0, [r3, #0]
 8006684:	4770      	bx	lr
 8006686:	46c0      	nop			; (mov r8, r8)
 8006688:	2000000c 	.word	0x2000000c

0800668c <__libc_init_array>:
 800668c:	b570      	push	{r4, r5, r6, lr}
 800668e:	2600      	movs	r6, #0
 8006690:	4d0c      	ldr	r5, [pc, #48]	; (80066c4 <__libc_init_array+0x38>)
 8006692:	4c0d      	ldr	r4, [pc, #52]	; (80066c8 <__libc_init_array+0x3c>)
 8006694:	1b64      	subs	r4, r4, r5
 8006696:	10a4      	asrs	r4, r4, #2
 8006698:	42a6      	cmp	r6, r4
 800669a:	d109      	bne.n	80066b0 <__libc_init_array+0x24>
 800669c:	2600      	movs	r6, #0
 800669e:	f005 f9b3 	bl	800ba08 <_init>
 80066a2:	4d0a      	ldr	r5, [pc, #40]	; (80066cc <__libc_init_array+0x40>)
 80066a4:	4c0a      	ldr	r4, [pc, #40]	; (80066d0 <__libc_init_array+0x44>)
 80066a6:	1b64      	subs	r4, r4, r5
 80066a8:	10a4      	asrs	r4, r4, #2
 80066aa:	42a6      	cmp	r6, r4
 80066ac:	d105      	bne.n	80066ba <__libc_init_array+0x2e>
 80066ae:	bd70      	pop	{r4, r5, r6, pc}
 80066b0:	00b3      	lsls	r3, r6, #2
 80066b2:	58eb      	ldr	r3, [r5, r3]
 80066b4:	4798      	blx	r3
 80066b6:	3601      	adds	r6, #1
 80066b8:	e7ee      	b.n	8006698 <__libc_init_array+0xc>
 80066ba:	00b3      	lsls	r3, r6, #2
 80066bc:	58eb      	ldr	r3, [r5, r3]
 80066be:	4798      	blx	r3
 80066c0:	3601      	adds	r6, #1
 80066c2:	e7f2      	b.n	80066aa <__libc_init_array+0x1e>
 80066c4:	0800c124 	.word	0x0800c124
 80066c8:	0800c124 	.word	0x0800c124
 80066cc:	0800c124 	.word	0x0800c124
 80066d0:	0800c128 	.word	0x0800c128

080066d4 <memset>:
 80066d4:	0003      	movs	r3, r0
 80066d6:	1882      	adds	r2, r0, r2
 80066d8:	4293      	cmp	r3, r2
 80066da:	d100      	bne.n	80066de <memset+0xa>
 80066dc:	4770      	bx	lr
 80066de:	7019      	strb	r1, [r3, #0]
 80066e0:	3301      	adds	r3, #1
 80066e2:	e7f9      	b.n	80066d8 <memset+0x4>

080066e4 <__cvt>:
 80066e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066e6:	001e      	movs	r6, r3
 80066e8:	2300      	movs	r3, #0
 80066ea:	0014      	movs	r4, r2
 80066ec:	b08b      	sub	sp, #44	; 0x2c
 80066ee:	429e      	cmp	r6, r3
 80066f0:	da04      	bge.n	80066fc <__cvt+0x18>
 80066f2:	2180      	movs	r1, #128	; 0x80
 80066f4:	0609      	lsls	r1, r1, #24
 80066f6:	1873      	adds	r3, r6, r1
 80066f8:	001e      	movs	r6, r3
 80066fa:	232d      	movs	r3, #45	; 0x2d
 80066fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80066fe:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006700:	7013      	strb	r3, [r2, #0]
 8006702:	2320      	movs	r3, #32
 8006704:	2203      	movs	r2, #3
 8006706:	439f      	bics	r7, r3
 8006708:	2f46      	cmp	r7, #70	; 0x46
 800670a:	d007      	beq.n	800671c <__cvt+0x38>
 800670c:	003b      	movs	r3, r7
 800670e:	3b45      	subs	r3, #69	; 0x45
 8006710:	4259      	negs	r1, r3
 8006712:	414b      	adcs	r3, r1
 8006714:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006716:	3a01      	subs	r2, #1
 8006718:	18cb      	adds	r3, r1, r3
 800671a:	9310      	str	r3, [sp, #64]	; 0x40
 800671c:	ab09      	add	r3, sp, #36	; 0x24
 800671e:	9304      	str	r3, [sp, #16]
 8006720:	ab08      	add	r3, sp, #32
 8006722:	9303      	str	r3, [sp, #12]
 8006724:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006726:	9200      	str	r2, [sp, #0]
 8006728:	9302      	str	r3, [sp, #8]
 800672a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800672c:	0022      	movs	r2, r4
 800672e:	9301      	str	r3, [sp, #4]
 8006730:	0033      	movs	r3, r6
 8006732:	f001 fe71 	bl	8008418 <_dtoa_r>
 8006736:	0005      	movs	r5, r0
 8006738:	2f47      	cmp	r7, #71	; 0x47
 800673a:	d102      	bne.n	8006742 <__cvt+0x5e>
 800673c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800673e:	07db      	lsls	r3, r3, #31
 8006740:	d528      	bpl.n	8006794 <__cvt+0xb0>
 8006742:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006744:	18eb      	adds	r3, r5, r3
 8006746:	9307      	str	r3, [sp, #28]
 8006748:	2f46      	cmp	r7, #70	; 0x46
 800674a:	d114      	bne.n	8006776 <__cvt+0x92>
 800674c:	782b      	ldrb	r3, [r5, #0]
 800674e:	2b30      	cmp	r3, #48	; 0x30
 8006750:	d10c      	bne.n	800676c <__cvt+0x88>
 8006752:	2200      	movs	r2, #0
 8006754:	2300      	movs	r3, #0
 8006756:	0020      	movs	r0, r4
 8006758:	0031      	movs	r1, r6
 800675a:	f7f9 fe77 	bl	800044c <__aeabi_dcmpeq>
 800675e:	2800      	cmp	r0, #0
 8006760:	d104      	bne.n	800676c <__cvt+0x88>
 8006762:	2301      	movs	r3, #1
 8006764:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006766:	1a9b      	subs	r3, r3, r2
 8006768:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800676a:	6013      	str	r3, [r2, #0]
 800676c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800676e:	9a07      	ldr	r2, [sp, #28]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	18d3      	adds	r3, r2, r3
 8006774:	9307      	str	r3, [sp, #28]
 8006776:	2200      	movs	r2, #0
 8006778:	2300      	movs	r3, #0
 800677a:	0020      	movs	r0, r4
 800677c:	0031      	movs	r1, r6
 800677e:	f7f9 fe65 	bl	800044c <__aeabi_dcmpeq>
 8006782:	2800      	cmp	r0, #0
 8006784:	d001      	beq.n	800678a <__cvt+0xa6>
 8006786:	9b07      	ldr	r3, [sp, #28]
 8006788:	9309      	str	r3, [sp, #36]	; 0x24
 800678a:	2230      	movs	r2, #48	; 0x30
 800678c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800678e:	9907      	ldr	r1, [sp, #28]
 8006790:	428b      	cmp	r3, r1
 8006792:	d306      	bcc.n	80067a2 <__cvt+0xbe>
 8006794:	0028      	movs	r0, r5
 8006796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006798:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800679a:	1b5b      	subs	r3, r3, r5
 800679c:	6013      	str	r3, [r2, #0]
 800679e:	b00b      	add	sp, #44	; 0x2c
 80067a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067a2:	1c59      	adds	r1, r3, #1
 80067a4:	9109      	str	r1, [sp, #36]	; 0x24
 80067a6:	701a      	strb	r2, [r3, #0]
 80067a8:	e7f0      	b.n	800678c <__cvt+0xa8>

080067aa <__exponent>:
 80067aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067ac:	1c83      	adds	r3, r0, #2
 80067ae:	b087      	sub	sp, #28
 80067b0:	9303      	str	r3, [sp, #12]
 80067b2:	0005      	movs	r5, r0
 80067b4:	000c      	movs	r4, r1
 80067b6:	232b      	movs	r3, #43	; 0x2b
 80067b8:	7002      	strb	r2, [r0, #0]
 80067ba:	2900      	cmp	r1, #0
 80067bc:	da01      	bge.n	80067c2 <__exponent+0x18>
 80067be:	424c      	negs	r4, r1
 80067c0:	3302      	adds	r3, #2
 80067c2:	706b      	strb	r3, [r5, #1]
 80067c4:	2c09      	cmp	r4, #9
 80067c6:	dd31      	ble.n	800682c <__exponent+0x82>
 80067c8:	270a      	movs	r7, #10
 80067ca:	ab04      	add	r3, sp, #16
 80067cc:	1dde      	adds	r6, r3, #7
 80067ce:	0020      	movs	r0, r4
 80067d0:	0039      	movs	r1, r7
 80067d2:	9601      	str	r6, [sp, #4]
 80067d4:	f7f9 fe24 	bl	8000420 <__aeabi_idivmod>
 80067d8:	3e01      	subs	r6, #1
 80067da:	3130      	adds	r1, #48	; 0x30
 80067dc:	0020      	movs	r0, r4
 80067de:	7031      	strb	r1, [r6, #0]
 80067e0:	0039      	movs	r1, r7
 80067e2:	9402      	str	r4, [sp, #8]
 80067e4:	f7f9 fd36 	bl	8000254 <__divsi3>
 80067e8:	9b02      	ldr	r3, [sp, #8]
 80067ea:	0004      	movs	r4, r0
 80067ec:	2b63      	cmp	r3, #99	; 0x63
 80067ee:	dcee      	bgt.n	80067ce <__exponent+0x24>
 80067f0:	9b01      	ldr	r3, [sp, #4]
 80067f2:	3430      	adds	r4, #48	; 0x30
 80067f4:	1e9a      	subs	r2, r3, #2
 80067f6:	0013      	movs	r3, r2
 80067f8:	9903      	ldr	r1, [sp, #12]
 80067fa:	7014      	strb	r4, [r2, #0]
 80067fc:	a804      	add	r0, sp, #16
 80067fe:	3007      	adds	r0, #7
 8006800:	4298      	cmp	r0, r3
 8006802:	d80e      	bhi.n	8006822 <__exponent+0x78>
 8006804:	ab04      	add	r3, sp, #16
 8006806:	3307      	adds	r3, #7
 8006808:	2000      	movs	r0, #0
 800680a:	429a      	cmp	r2, r3
 800680c:	d804      	bhi.n	8006818 <__exponent+0x6e>
 800680e:	ab04      	add	r3, sp, #16
 8006810:	3009      	adds	r0, #9
 8006812:	18c0      	adds	r0, r0, r3
 8006814:	9b01      	ldr	r3, [sp, #4]
 8006816:	1ac0      	subs	r0, r0, r3
 8006818:	9b03      	ldr	r3, [sp, #12]
 800681a:	1818      	adds	r0, r3, r0
 800681c:	1b40      	subs	r0, r0, r5
 800681e:	b007      	add	sp, #28
 8006820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006822:	7818      	ldrb	r0, [r3, #0]
 8006824:	3301      	adds	r3, #1
 8006826:	7008      	strb	r0, [r1, #0]
 8006828:	3101      	adds	r1, #1
 800682a:	e7e7      	b.n	80067fc <__exponent+0x52>
 800682c:	2330      	movs	r3, #48	; 0x30
 800682e:	18e4      	adds	r4, r4, r3
 8006830:	70ab      	strb	r3, [r5, #2]
 8006832:	1d28      	adds	r0, r5, #4
 8006834:	70ec      	strb	r4, [r5, #3]
 8006836:	e7f1      	b.n	800681c <__exponent+0x72>

08006838 <_printf_float>:
 8006838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800683a:	b095      	sub	sp, #84	; 0x54
 800683c:	000c      	movs	r4, r1
 800683e:	9209      	str	r2, [sp, #36]	; 0x24
 8006840:	001e      	movs	r6, r3
 8006842:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006844:	0007      	movs	r7, r0
 8006846:	f002 ff75 	bl	8009734 <_localeconv_r>
 800684a:	6803      	ldr	r3, [r0, #0]
 800684c:	0018      	movs	r0, r3
 800684e:	930c      	str	r3, [sp, #48]	; 0x30
 8006850:	f7f9 fc5a 	bl	8000108 <strlen>
 8006854:	2300      	movs	r3, #0
 8006856:	9312      	str	r3, [sp, #72]	; 0x48
 8006858:	7e23      	ldrb	r3, [r4, #24]
 800685a:	2207      	movs	r2, #7
 800685c:	930a      	str	r3, [sp, #40]	; 0x28
 800685e:	6823      	ldr	r3, [r4, #0]
 8006860:	900e      	str	r0, [sp, #56]	; 0x38
 8006862:	930d      	str	r3, [sp, #52]	; 0x34
 8006864:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006866:	682b      	ldr	r3, [r5, #0]
 8006868:	05c9      	lsls	r1, r1, #23
 800686a:	d547      	bpl.n	80068fc <_printf_float+0xc4>
 800686c:	189b      	adds	r3, r3, r2
 800686e:	4393      	bics	r3, r2
 8006870:	001a      	movs	r2, r3
 8006872:	3208      	adds	r2, #8
 8006874:	602a      	str	r2, [r5, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	64a2      	str	r2, [r4, #72]	; 0x48
 800687c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800687e:	2201      	movs	r2, #1
 8006880:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006882:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006884:	930b      	str	r3, [sp, #44]	; 0x2c
 8006886:	006b      	lsls	r3, r5, #1
 8006888:	085b      	lsrs	r3, r3, #1
 800688a:	930f      	str	r3, [sp, #60]	; 0x3c
 800688c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800688e:	4ba7      	ldr	r3, [pc, #668]	; (8006b2c <_printf_float+0x2f4>)
 8006890:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006892:	4252      	negs	r2, r2
 8006894:	f7fc f9a0 	bl	8002bd8 <__aeabi_dcmpun>
 8006898:	2800      	cmp	r0, #0
 800689a:	d131      	bne.n	8006900 <_printf_float+0xc8>
 800689c:	2201      	movs	r2, #1
 800689e:	4ba3      	ldr	r3, [pc, #652]	; (8006b2c <_printf_float+0x2f4>)
 80068a0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80068a2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80068a4:	4252      	negs	r2, r2
 80068a6:	f7f9 fde1 	bl	800046c <__aeabi_dcmple>
 80068aa:	2800      	cmp	r0, #0
 80068ac:	d128      	bne.n	8006900 <_printf_float+0xc8>
 80068ae:	2200      	movs	r2, #0
 80068b0:	2300      	movs	r3, #0
 80068b2:	0029      	movs	r1, r5
 80068b4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80068b6:	f7f9 fdcf 	bl	8000458 <__aeabi_dcmplt>
 80068ba:	2800      	cmp	r0, #0
 80068bc:	d003      	beq.n	80068c6 <_printf_float+0x8e>
 80068be:	0023      	movs	r3, r4
 80068c0:	222d      	movs	r2, #45	; 0x2d
 80068c2:	3343      	adds	r3, #67	; 0x43
 80068c4:	701a      	strb	r2, [r3, #0]
 80068c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068c8:	4d99      	ldr	r5, [pc, #612]	; (8006b30 <_printf_float+0x2f8>)
 80068ca:	2b47      	cmp	r3, #71	; 0x47
 80068cc:	d900      	bls.n	80068d0 <_printf_float+0x98>
 80068ce:	4d99      	ldr	r5, [pc, #612]	; (8006b34 <_printf_float+0x2fc>)
 80068d0:	2303      	movs	r3, #3
 80068d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80068d4:	6123      	str	r3, [r4, #16]
 80068d6:	3301      	adds	r3, #1
 80068d8:	439a      	bics	r2, r3
 80068da:	2300      	movs	r3, #0
 80068dc:	6022      	str	r2, [r4, #0]
 80068de:	930b      	str	r3, [sp, #44]	; 0x2c
 80068e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068e2:	0021      	movs	r1, r4
 80068e4:	0038      	movs	r0, r7
 80068e6:	9600      	str	r6, [sp, #0]
 80068e8:	aa13      	add	r2, sp, #76	; 0x4c
 80068ea:	f000 f9e7 	bl	8006cbc <_printf_common>
 80068ee:	1c43      	adds	r3, r0, #1
 80068f0:	d000      	beq.n	80068f4 <_printf_float+0xbc>
 80068f2:	e0a2      	b.n	8006a3a <_printf_float+0x202>
 80068f4:	2001      	movs	r0, #1
 80068f6:	4240      	negs	r0, r0
 80068f8:	b015      	add	sp, #84	; 0x54
 80068fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068fc:	3307      	adds	r3, #7
 80068fe:	e7b6      	b.n	800686e <_printf_float+0x36>
 8006900:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006902:	002b      	movs	r3, r5
 8006904:	0010      	movs	r0, r2
 8006906:	0029      	movs	r1, r5
 8006908:	f7fc f966 	bl	8002bd8 <__aeabi_dcmpun>
 800690c:	2800      	cmp	r0, #0
 800690e:	d00b      	beq.n	8006928 <_printf_float+0xf0>
 8006910:	2d00      	cmp	r5, #0
 8006912:	da03      	bge.n	800691c <_printf_float+0xe4>
 8006914:	0023      	movs	r3, r4
 8006916:	222d      	movs	r2, #45	; 0x2d
 8006918:	3343      	adds	r3, #67	; 0x43
 800691a:	701a      	strb	r2, [r3, #0]
 800691c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800691e:	4d86      	ldr	r5, [pc, #536]	; (8006b38 <_printf_float+0x300>)
 8006920:	2b47      	cmp	r3, #71	; 0x47
 8006922:	d9d5      	bls.n	80068d0 <_printf_float+0x98>
 8006924:	4d85      	ldr	r5, [pc, #532]	; (8006b3c <_printf_float+0x304>)
 8006926:	e7d3      	b.n	80068d0 <_printf_float+0x98>
 8006928:	2220      	movs	r2, #32
 800692a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800692c:	6863      	ldr	r3, [r4, #4]
 800692e:	4391      	bics	r1, r2
 8006930:	910f      	str	r1, [sp, #60]	; 0x3c
 8006932:	1c5a      	adds	r2, r3, #1
 8006934:	d149      	bne.n	80069ca <_printf_float+0x192>
 8006936:	3307      	adds	r3, #7
 8006938:	6063      	str	r3, [r4, #4]
 800693a:	2380      	movs	r3, #128	; 0x80
 800693c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800693e:	00db      	lsls	r3, r3, #3
 8006940:	4313      	orrs	r3, r2
 8006942:	2200      	movs	r2, #0
 8006944:	9206      	str	r2, [sp, #24]
 8006946:	aa12      	add	r2, sp, #72	; 0x48
 8006948:	9205      	str	r2, [sp, #20]
 800694a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800694c:	a908      	add	r1, sp, #32
 800694e:	9204      	str	r2, [sp, #16]
 8006950:	aa11      	add	r2, sp, #68	; 0x44
 8006952:	9203      	str	r2, [sp, #12]
 8006954:	2223      	movs	r2, #35	; 0x23
 8006956:	6023      	str	r3, [r4, #0]
 8006958:	9301      	str	r3, [sp, #4]
 800695a:	6863      	ldr	r3, [r4, #4]
 800695c:	1852      	adds	r2, r2, r1
 800695e:	9202      	str	r2, [sp, #8]
 8006960:	9300      	str	r3, [sp, #0]
 8006962:	0038      	movs	r0, r7
 8006964:	002b      	movs	r3, r5
 8006966:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006968:	f7ff febc 	bl	80066e4 <__cvt>
 800696c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800696e:	0005      	movs	r5, r0
 8006970:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006972:	2b47      	cmp	r3, #71	; 0x47
 8006974:	d108      	bne.n	8006988 <_printf_float+0x150>
 8006976:	1ccb      	adds	r3, r1, #3
 8006978:	db02      	blt.n	8006980 <_printf_float+0x148>
 800697a:	6863      	ldr	r3, [r4, #4]
 800697c:	4299      	cmp	r1, r3
 800697e:	dd48      	ble.n	8006a12 <_printf_float+0x1da>
 8006980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006982:	3b02      	subs	r3, #2
 8006984:	b2db      	uxtb	r3, r3
 8006986:	930a      	str	r3, [sp, #40]	; 0x28
 8006988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800698a:	2b65      	cmp	r3, #101	; 0x65
 800698c:	d824      	bhi.n	80069d8 <_printf_float+0x1a0>
 800698e:	0020      	movs	r0, r4
 8006990:	001a      	movs	r2, r3
 8006992:	3901      	subs	r1, #1
 8006994:	3050      	adds	r0, #80	; 0x50
 8006996:	9111      	str	r1, [sp, #68]	; 0x44
 8006998:	f7ff ff07 	bl	80067aa <__exponent>
 800699c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800699e:	900b      	str	r0, [sp, #44]	; 0x2c
 80069a0:	1813      	adds	r3, r2, r0
 80069a2:	6123      	str	r3, [r4, #16]
 80069a4:	2a01      	cmp	r2, #1
 80069a6:	dc02      	bgt.n	80069ae <_printf_float+0x176>
 80069a8:	6822      	ldr	r2, [r4, #0]
 80069aa:	07d2      	lsls	r2, r2, #31
 80069ac:	d501      	bpl.n	80069b2 <_printf_float+0x17a>
 80069ae:	3301      	adds	r3, #1
 80069b0:	6123      	str	r3, [r4, #16]
 80069b2:	2323      	movs	r3, #35	; 0x23
 80069b4:	aa08      	add	r2, sp, #32
 80069b6:	189b      	adds	r3, r3, r2
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d100      	bne.n	80069c0 <_printf_float+0x188>
 80069be:	e78f      	b.n	80068e0 <_printf_float+0xa8>
 80069c0:	0023      	movs	r3, r4
 80069c2:	222d      	movs	r2, #45	; 0x2d
 80069c4:	3343      	adds	r3, #67	; 0x43
 80069c6:	701a      	strb	r2, [r3, #0]
 80069c8:	e78a      	b.n	80068e0 <_printf_float+0xa8>
 80069ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80069cc:	2a47      	cmp	r2, #71	; 0x47
 80069ce:	d1b4      	bne.n	800693a <_printf_float+0x102>
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1b2      	bne.n	800693a <_printf_float+0x102>
 80069d4:	3301      	adds	r3, #1
 80069d6:	e7af      	b.n	8006938 <_printf_float+0x100>
 80069d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069da:	2b66      	cmp	r3, #102	; 0x66
 80069dc:	d11b      	bne.n	8006a16 <_printf_float+0x1de>
 80069de:	6863      	ldr	r3, [r4, #4]
 80069e0:	2900      	cmp	r1, #0
 80069e2:	dd0d      	ble.n	8006a00 <_printf_float+0x1c8>
 80069e4:	6121      	str	r1, [r4, #16]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d102      	bne.n	80069f0 <_printf_float+0x1b8>
 80069ea:	6822      	ldr	r2, [r4, #0]
 80069ec:	07d2      	lsls	r2, r2, #31
 80069ee:	d502      	bpl.n	80069f6 <_printf_float+0x1be>
 80069f0:	3301      	adds	r3, #1
 80069f2:	1859      	adds	r1, r3, r1
 80069f4:	6121      	str	r1, [r4, #16]
 80069f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80069f8:	65a3      	str	r3, [r4, #88]	; 0x58
 80069fa:	2300      	movs	r3, #0
 80069fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80069fe:	e7d8      	b.n	80069b2 <_printf_float+0x17a>
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d103      	bne.n	8006a0c <_printf_float+0x1d4>
 8006a04:	2201      	movs	r2, #1
 8006a06:	6821      	ldr	r1, [r4, #0]
 8006a08:	4211      	tst	r1, r2
 8006a0a:	d000      	beq.n	8006a0e <_printf_float+0x1d6>
 8006a0c:	1c9a      	adds	r2, r3, #2
 8006a0e:	6122      	str	r2, [r4, #16]
 8006a10:	e7f1      	b.n	80069f6 <_printf_float+0x1be>
 8006a12:	2367      	movs	r3, #103	; 0x67
 8006a14:	930a      	str	r3, [sp, #40]	; 0x28
 8006a16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a18:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	db06      	blt.n	8006a2c <_printf_float+0x1f4>
 8006a1e:	6822      	ldr	r2, [r4, #0]
 8006a20:	6123      	str	r3, [r4, #16]
 8006a22:	07d2      	lsls	r2, r2, #31
 8006a24:	d5e7      	bpl.n	80069f6 <_printf_float+0x1be>
 8006a26:	3301      	adds	r3, #1
 8006a28:	6123      	str	r3, [r4, #16]
 8006a2a:	e7e4      	b.n	80069f6 <_printf_float+0x1be>
 8006a2c:	2101      	movs	r1, #1
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	dc01      	bgt.n	8006a36 <_printf_float+0x1fe>
 8006a32:	1849      	adds	r1, r1, r1
 8006a34:	1ac9      	subs	r1, r1, r3
 8006a36:	1852      	adds	r2, r2, r1
 8006a38:	e7e9      	b.n	8006a0e <_printf_float+0x1d6>
 8006a3a:	6822      	ldr	r2, [r4, #0]
 8006a3c:	0553      	lsls	r3, r2, #21
 8006a3e:	d407      	bmi.n	8006a50 <_printf_float+0x218>
 8006a40:	6923      	ldr	r3, [r4, #16]
 8006a42:	002a      	movs	r2, r5
 8006a44:	0038      	movs	r0, r7
 8006a46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a48:	47b0      	blx	r6
 8006a4a:	1c43      	adds	r3, r0, #1
 8006a4c:	d128      	bne.n	8006aa0 <_printf_float+0x268>
 8006a4e:	e751      	b.n	80068f4 <_printf_float+0xbc>
 8006a50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a52:	2b65      	cmp	r3, #101	; 0x65
 8006a54:	d800      	bhi.n	8006a58 <_printf_float+0x220>
 8006a56:	e0e1      	b.n	8006c1c <_printf_float+0x3e4>
 8006a58:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006a5a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	2300      	movs	r3, #0
 8006a60:	f7f9 fcf4 	bl	800044c <__aeabi_dcmpeq>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	d031      	beq.n	8006acc <_printf_float+0x294>
 8006a68:	2301      	movs	r3, #1
 8006a6a:	0038      	movs	r0, r7
 8006a6c:	4a34      	ldr	r2, [pc, #208]	; (8006b40 <_printf_float+0x308>)
 8006a6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a70:	47b0      	blx	r6
 8006a72:	1c43      	adds	r3, r0, #1
 8006a74:	d100      	bne.n	8006a78 <_printf_float+0x240>
 8006a76:	e73d      	b.n	80068f4 <_printf_float+0xbc>
 8006a78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	db02      	blt.n	8006a86 <_printf_float+0x24e>
 8006a80:	6823      	ldr	r3, [r4, #0]
 8006a82:	07db      	lsls	r3, r3, #31
 8006a84:	d50c      	bpl.n	8006aa0 <_printf_float+0x268>
 8006a86:	0038      	movs	r0, r7
 8006a88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a8e:	47b0      	blx	r6
 8006a90:	2500      	movs	r5, #0
 8006a92:	1c43      	adds	r3, r0, #1
 8006a94:	d100      	bne.n	8006a98 <_printf_float+0x260>
 8006a96:	e72d      	b.n	80068f4 <_printf_float+0xbc>
 8006a98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	42ab      	cmp	r3, r5
 8006a9e:	dc0a      	bgt.n	8006ab6 <_printf_float+0x27e>
 8006aa0:	6823      	ldr	r3, [r4, #0]
 8006aa2:	079b      	lsls	r3, r3, #30
 8006aa4:	d500      	bpl.n	8006aa8 <_printf_float+0x270>
 8006aa6:	e106      	b.n	8006cb6 <_printf_float+0x47e>
 8006aa8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006aaa:	68e0      	ldr	r0, [r4, #12]
 8006aac:	4298      	cmp	r0, r3
 8006aae:	db00      	blt.n	8006ab2 <_printf_float+0x27a>
 8006ab0:	e722      	b.n	80068f8 <_printf_float+0xc0>
 8006ab2:	0018      	movs	r0, r3
 8006ab4:	e720      	b.n	80068f8 <_printf_float+0xc0>
 8006ab6:	0022      	movs	r2, r4
 8006ab8:	2301      	movs	r3, #1
 8006aba:	0038      	movs	r0, r7
 8006abc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006abe:	321a      	adds	r2, #26
 8006ac0:	47b0      	blx	r6
 8006ac2:	1c43      	adds	r3, r0, #1
 8006ac4:	d100      	bne.n	8006ac8 <_printf_float+0x290>
 8006ac6:	e715      	b.n	80068f4 <_printf_float+0xbc>
 8006ac8:	3501      	adds	r5, #1
 8006aca:	e7e5      	b.n	8006a98 <_printf_float+0x260>
 8006acc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	dc38      	bgt.n	8006b44 <_printf_float+0x30c>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	0038      	movs	r0, r7
 8006ad6:	4a1a      	ldr	r2, [pc, #104]	; (8006b40 <_printf_float+0x308>)
 8006ad8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ada:	47b0      	blx	r6
 8006adc:	1c43      	adds	r3, r0, #1
 8006ade:	d100      	bne.n	8006ae2 <_printf_float+0x2aa>
 8006ae0:	e708      	b.n	80068f4 <_printf_float+0xbc>
 8006ae2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ae4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	d102      	bne.n	8006af0 <_printf_float+0x2b8>
 8006aea:	6823      	ldr	r3, [r4, #0]
 8006aec:	07db      	lsls	r3, r3, #31
 8006aee:	d5d7      	bpl.n	8006aa0 <_printf_float+0x268>
 8006af0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006af2:	0038      	movs	r0, r7
 8006af4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006af6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006af8:	47b0      	blx	r6
 8006afa:	1c43      	adds	r3, r0, #1
 8006afc:	d100      	bne.n	8006b00 <_printf_float+0x2c8>
 8006afe:	e6f9      	b.n	80068f4 <_printf_float+0xbc>
 8006b00:	2300      	movs	r3, #0
 8006b02:	930a      	str	r3, [sp, #40]	; 0x28
 8006b04:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b08:	425b      	negs	r3, r3
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	dc01      	bgt.n	8006b12 <_printf_float+0x2da>
 8006b0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b10:	e797      	b.n	8006a42 <_printf_float+0x20a>
 8006b12:	0022      	movs	r2, r4
 8006b14:	2301      	movs	r3, #1
 8006b16:	0038      	movs	r0, r7
 8006b18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b1a:	321a      	adds	r2, #26
 8006b1c:	47b0      	blx	r6
 8006b1e:	1c43      	adds	r3, r0, #1
 8006b20:	d100      	bne.n	8006b24 <_printf_float+0x2ec>
 8006b22:	e6e7      	b.n	80068f4 <_printf_float+0xbc>
 8006b24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b26:	3301      	adds	r3, #1
 8006b28:	e7eb      	b.n	8006b02 <_printf_float+0x2ca>
 8006b2a:	46c0      	nop			; (mov r8, r8)
 8006b2c:	7fefffff 	.word	0x7fefffff
 8006b30:	0800bc68 	.word	0x0800bc68
 8006b34:	0800bc6c 	.word	0x0800bc6c
 8006b38:	0800bc70 	.word	0x0800bc70
 8006b3c:	0800bc74 	.word	0x0800bc74
 8006b40:	0800c069 	.word	0x0800c069
 8006b44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006b46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b48:	920a      	str	r2, [sp, #40]	; 0x28
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	dd00      	ble.n	8006b50 <_printf_float+0x318>
 8006b4e:	930a      	str	r3, [sp, #40]	; 0x28
 8006b50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	dc3c      	bgt.n	8006bd0 <_printf_float+0x398>
 8006b56:	2300      	movs	r3, #0
 8006b58:	930d      	str	r3, [sp, #52]	; 0x34
 8006b5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b5c:	43db      	mvns	r3, r3
 8006b5e:	17db      	asrs	r3, r3, #31
 8006b60:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006b66:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006b72:	4293      	cmp	r3, r2
 8006b74:	dc34      	bgt.n	8006be0 <_printf_float+0x3a8>
 8006b76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b78:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	db3d      	blt.n	8006bfa <_printf_float+0x3c2>
 8006b7e:	6823      	ldr	r3, [r4, #0]
 8006b80:	07db      	lsls	r3, r3, #31
 8006b82:	d43a      	bmi.n	8006bfa <_printf_float+0x3c2>
 8006b84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006b86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b88:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	1a52      	subs	r2, r2, r1
 8006b8e:	920a      	str	r2, [sp, #40]	; 0x28
 8006b90:	429a      	cmp	r2, r3
 8006b92:	dd00      	ble.n	8006b96 <_printf_float+0x35e>
 8006b94:	930a      	str	r3, [sp, #40]	; 0x28
 8006b96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	dc36      	bgt.n	8006c0a <_printf_float+0x3d2>
 8006b9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b9e:	2500      	movs	r5, #0
 8006ba0:	43db      	mvns	r3, r3
 8006ba2:	17db      	asrs	r3, r3, #31
 8006ba4:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ba6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006ba8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006baa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006bac:	1a9b      	subs	r3, r3, r2
 8006bae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bb0:	400a      	ands	r2, r1
 8006bb2:	1a9b      	subs	r3, r3, r2
 8006bb4:	42ab      	cmp	r3, r5
 8006bb6:	dc00      	bgt.n	8006bba <_printf_float+0x382>
 8006bb8:	e772      	b.n	8006aa0 <_printf_float+0x268>
 8006bba:	0022      	movs	r2, r4
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	0038      	movs	r0, r7
 8006bc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006bc2:	321a      	adds	r2, #26
 8006bc4:	47b0      	blx	r6
 8006bc6:	1c43      	adds	r3, r0, #1
 8006bc8:	d100      	bne.n	8006bcc <_printf_float+0x394>
 8006bca:	e693      	b.n	80068f4 <_printf_float+0xbc>
 8006bcc:	3501      	adds	r5, #1
 8006bce:	e7ea      	b.n	8006ba6 <_printf_float+0x36e>
 8006bd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bd2:	002a      	movs	r2, r5
 8006bd4:	0038      	movs	r0, r7
 8006bd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006bd8:	47b0      	blx	r6
 8006bda:	1c43      	adds	r3, r0, #1
 8006bdc:	d1bb      	bne.n	8006b56 <_printf_float+0x31e>
 8006bde:	e689      	b.n	80068f4 <_printf_float+0xbc>
 8006be0:	0022      	movs	r2, r4
 8006be2:	2301      	movs	r3, #1
 8006be4:	0038      	movs	r0, r7
 8006be6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006be8:	321a      	adds	r2, #26
 8006bea:	47b0      	blx	r6
 8006bec:	1c43      	adds	r3, r0, #1
 8006bee:	d100      	bne.n	8006bf2 <_printf_float+0x3ba>
 8006bf0:	e680      	b.n	80068f4 <_printf_float+0xbc>
 8006bf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	930d      	str	r3, [sp, #52]	; 0x34
 8006bf8:	e7b3      	b.n	8006b62 <_printf_float+0x32a>
 8006bfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bfc:	0038      	movs	r0, r7
 8006bfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c02:	47b0      	blx	r6
 8006c04:	1c43      	adds	r3, r0, #1
 8006c06:	d1bd      	bne.n	8006b84 <_printf_float+0x34c>
 8006c08:	e674      	b.n	80068f4 <_printf_float+0xbc>
 8006c0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c0c:	0038      	movs	r0, r7
 8006c0e:	18ea      	adds	r2, r5, r3
 8006c10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c14:	47b0      	blx	r6
 8006c16:	1c43      	adds	r3, r0, #1
 8006c18:	d1c0      	bne.n	8006b9c <_printf_float+0x364>
 8006c1a:	e66b      	b.n	80068f4 <_printf_float+0xbc>
 8006c1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	dc02      	bgt.n	8006c28 <_printf_float+0x3f0>
 8006c22:	2301      	movs	r3, #1
 8006c24:	421a      	tst	r2, r3
 8006c26:	d034      	beq.n	8006c92 <_printf_float+0x45a>
 8006c28:	2301      	movs	r3, #1
 8006c2a:	002a      	movs	r2, r5
 8006c2c:	0038      	movs	r0, r7
 8006c2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c30:	47b0      	blx	r6
 8006c32:	1c43      	adds	r3, r0, #1
 8006c34:	d100      	bne.n	8006c38 <_printf_float+0x400>
 8006c36:	e65d      	b.n	80068f4 <_printf_float+0xbc>
 8006c38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c3a:	0038      	movs	r0, r7
 8006c3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c40:	47b0      	blx	r6
 8006c42:	1c43      	adds	r3, r0, #1
 8006c44:	d100      	bne.n	8006c48 <_printf_float+0x410>
 8006c46:	e655      	b.n	80068f4 <_printf_float+0xbc>
 8006c48:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006c4a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	2300      	movs	r3, #0
 8006c50:	f7f9 fbfc 	bl	800044c <__aeabi_dcmpeq>
 8006c54:	2800      	cmp	r0, #0
 8006c56:	d11a      	bne.n	8006c8e <_printf_float+0x456>
 8006c58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c5a:	1c6a      	adds	r2, r5, #1
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	0038      	movs	r0, r7
 8006c60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c62:	47b0      	blx	r6
 8006c64:	1c43      	adds	r3, r0, #1
 8006c66:	d10e      	bne.n	8006c86 <_printf_float+0x44e>
 8006c68:	e644      	b.n	80068f4 <_printf_float+0xbc>
 8006c6a:	0022      	movs	r2, r4
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	0038      	movs	r0, r7
 8006c70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c72:	321a      	adds	r2, #26
 8006c74:	47b0      	blx	r6
 8006c76:	1c43      	adds	r3, r0, #1
 8006c78:	d100      	bne.n	8006c7c <_printf_float+0x444>
 8006c7a:	e63b      	b.n	80068f4 <_printf_float+0xbc>
 8006c7c:	3501      	adds	r5, #1
 8006c7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c80:	3b01      	subs	r3, #1
 8006c82:	42ab      	cmp	r3, r5
 8006c84:	dcf1      	bgt.n	8006c6a <_printf_float+0x432>
 8006c86:	0022      	movs	r2, r4
 8006c88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c8a:	3250      	adds	r2, #80	; 0x50
 8006c8c:	e6da      	b.n	8006a44 <_printf_float+0x20c>
 8006c8e:	2500      	movs	r5, #0
 8006c90:	e7f5      	b.n	8006c7e <_printf_float+0x446>
 8006c92:	002a      	movs	r2, r5
 8006c94:	e7e3      	b.n	8006c5e <_printf_float+0x426>
 8006c96:	0022      	movs	r2, r4
 8006c98:	2301      	movs	r3, #1
 8006c9a:	0038      	movs	r0, r7
 8006c9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c9e:	3219      	adds	r2, #25
 8006ca0:	47b0      	blx	r6
 8006ca2:	1c43      	adds	r3, r0, #1
 8006ca4:	d100      	bne.n	8006ca8 <_printf_float+0x470>
 8006ca6:	e625      	b.n	80068f4 <_printf_float+0xbc>
 8006ca8:	3501      	adds	r5, #1
 8006caa:	68e3      	ldr	r3, [r4, #12]
 8006cac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006cae:	1a9b      	subs	r3, r3, r2
 8006cb0:	42ab      	cmp	r3, r5
 8006cb2:	dcf0      	bgt.n	8006c96 <_printf_float+0x45e>
 8006cb4:	e6f8      	b.n	8006aa8 <_printf_float+0x270>
 8006cb6:	2500      	movs	r5, #0
 8006cb8:	e7f7      	b.n	8006caa <_printf_float+0x472>
 8006cba:	46c0      	nop			; (mov r8, r8)

08006cbc <_printf_common>:
 8006cbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cbe:	0015      	movs	r5, r2
 8006cc0:	9301      	str	r3, [sp, #4]
 8006cc2:	688a      	ldr	r2, [r1, #8]
 8006cc4:	690b      	ldr	r3, [r1, #16]
 8006cc6:	000c      	movs	r4, r1
 8006cc8:	9000      	str	r0, [sp, #0]
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	da00      	bge.n	8006cd0 <_printf_common+0x14>
 8006cce:	0013      	movs	r3, r2
 8006cd0:	0022      	movs	r2, r4
 8006cd2:	602b      	str	r3, [r5, #0]
 8006cd4:	3243      	adds	r2, #67	; 0x43
 8006cd6:	7812      	ldrb	r2, [r2, #0]
 8006cd8:	2a00      	cmp	r2, #0
 8006cda:	d001      	beq.n	8006ce0 <_printf_common+0x24>
 8006cdc:	3301      	adds	r3, #1
 8006cde:	602b      	str	r3, [r5, #0]
 8006ce0:	6823      	ldr	r3, [r4, #0]
 8006ce2:	069b      	lsls	r3, r3, #26
 8006ce4:	d502      	bpl.n	8006cec <_printf_common+0x30>
 8006ce6:	682b      	ldr	r3, [r5, #0]
 8006ce8:	3302      	adds	r3, #2
 8006cea:	602b      	str	r3, [r5, #0]
 8006cec:	6822      	ldr	r2, [r4, #0]
 8006cee:	2306      	movs	r3, #6
 8006cf0:	0017      	movs	r7, r2
 8006cf2:	401f      	ands	r7, r3
 8006cf4:	421a      	tst	r2, r3
 8006cf6:	d027      	beq.n	8006d48 <_printf_common+0x8c>
 8006cf8:	0023      	movs	r3, r4
 8006cfa:	3343      	adds	r3, #67	; 0x43
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	1e5a      	subs	r2, r3, #1
 8006d00:	4193      	sbcs	r3, r2
 8006d02:	6822      	ldr	r2, [r4, #0]
 8006d04:	0692      	lsls	r2, r2, #26
 8006d06:	d430      	bmi.n	8006d6a <_printf_common+0xae>
 8006d08:	0022      	movs	r2, r4
 8006d0a:	9901      	ldr	r1, [sp, #4]
 8006d0c:	9800      	ldr	r0, [sp, #0]
 8006d0e:	9e08      	ldr	r6, [sp, #32]
 8006d10:	3243      	adds	r2, #67	; 0x43
 8006d12:	47b0      	blx	r6
 8006d14:	1c43      	adds	r3, r0, #1
 8006d16:	d025      	beq.n	8006d64 <_printf_common+0xa8>
 8006d18:	2306      	movs	r3, #6
 8006d1a:	6820      	ldr	r0, [r4, #0]
 8006d1c:	682a      	ldr	r2, [r5, #0]
 8006d1e:	68e1      	ldr	r1, [r4, #12]
 8006d20:	2500      	movs	r5, #0
 8006d22:	4003      	ands	r3, r0
 8006d24:	2b04      	cmp	r3, #4
 8006d26:	d103      	bne.n	8006d30 <_printf_common+0x74>
 8006d28:	1a8d      	subs	r5, r1, r2
 8006d2a:	43eb      	mvns	r3, r5
 8006d2c:	17db      	asrs	r3, r3, #31
 8006d2e:	401d      	ands	r5, r3
 8006d30:	68a3      	ldr	r3, [r4, #8]
 8006d32:	6922      	ldr	r2, [r4, #16]
 8006d34:	4293      	cmp	r3, r2
 8006d36:	dd01      	ble.n	8006d3c <_printf_common+0x80>
 8006d38:	1a9b      	subs	r3, r3, r2
 8006d3a:	18ed      	adds	r5, r5, r3
 8006d3c:	2700      	movs	r7, #0
 8006d3e:	42bd      	cmp	r5, r7
 8006d40:	d120      	bne.n	8006d84 <_printf_common+0xc8>
 8006d42:	2000      	movs	r0, #0
 8006d44:	e010      	b.n	8006d68 <_printf_common+0xac>
 8006d46:	3701      	adds	r7, #1
 8006d48:	68e3      	ldr	r3, [r4, #12]
 8006d4a:	682a      	ldr	r2, [r5, #0]
 8006d4c:	1a9b      	subs	r3, r3, r2
 8006d4e:	42bb      	cmp	r3, r7
 8006d50:	ddd2      	ble.n	8006cf8 <_printf_common+0x3c>
 8006d52:	0022      	movs	r2, r4
 8006d54:	2301      	movs	r3, #1
 8006d56:	9901      	ldr	r1, [sp, #4]
 8006d58:	9800      	ldr	r0, [sp, #0]
 8006d5a:	9e08      	ldr	r6, [sp, #32]
 8006d5c:	3219      	adds	r2, #25
 8006d5e:	47b0      	blx	r6
 8006d60:	1c43      	adds	r3, r0, #1
 8006d62:	d1f0      	bne.n	8006d46 <_printf_common+0x8a>
 8006d64:	2001      	movs	r0, #1
 8006d66:	4240      	negs	r0, r0
 8006d68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006d6a:	2030      	movs	r0, #48	; 0x30
 8006d6c:	18e1      	adds	r1, r4, r3
 8006d6e:	3143      	adds	r1, #67	; 0x43
 8006d70:	7008      	strb	r0, [r1, #0]
 8006d72:	0021      	movs	r1, r4
 8006d74:	1c5a      	adds	r2, r3, #1
 8006d76:	3145      	adds	r1, #69	; 0x45
 8006d78:	7809      	ldrb	r1, [r1, #0]
 8006d7a:	18a2      	adds	r2, r4, r2
 8006d7c:	3243      	adds	r2, #67	; 0x43
 8006d7e:	3302      	adds	r3, #2
 8006d80:	7011      	strb	r1, [r2, #0]
 8006d82:	e7c1      	b.n	8006d08 <_printf_common+0x4c>
 8006d84:	0022      	movs	r2, r4
 8006d86:	2301      	movs	r3, #1
 8006d88:	9901      	ldr	r1, [sp, #4]
 8006d8a:	9800      	ldr	r0, [sp, #0]
 8006d8c:	9e08      	ldr	r6, [sp, #32]
 8006d8e:	321a      	adds	r2, #26
 8006d90:	47b0      	blx	r6
 8006d92:	1c43      	adds	r3, r0, #1
 8006d94:	d0e6      	beq.n	8006d64 <_printf_common+0xa8>
 8006d96:	3701      	adds	r7, #1
 8006d98:	e7d1      	b.n	8006d3e <_printf_common+0x82>
	...

08006d9c <_printf_i>:
 8006d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d9e:	b08b      	sub	sp, #44	; 0x2c
 8006da0:	9206      	str	r2, [sp, #24]
 8006da2:	000a      	movs	r2, r1
 8006da4:	3243      	adds	r2, #67	; 0x43
 8006da6:	9307      	str	r3, [sp, #28]
 8006da8:	9005      	str	r0, [sp, #20]
 8006daa:	9204      	str	r2, [sp, #16]
 8006dac:	7e0a      	ldrb	r2, [r1, #24]
 8006dae:	000c      	movs	r4, r1
 8006db0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006db2:	2a78      	cmp	r2, #120	; 0x78
 8006db4:	d807      	bhi.n	8006dc6 <_printf_i+0x2a>
 8006db6:	2a62      	cmp	r2, #98	; 0x62
 8006db8:	d809      	bhi.n	8006dce <_printf_i+0x32>
 8006dba:	2a00      	cmp	r2, #0
 8006dbc:	d100      	bne.n	8006dc0 <_printf_i+0x24>
 8006dbe:	e0c1      	b.n	8006f44 <_printf_i+0x1a8>
 8006dc0:	2a58      	cmp	r2, #88	; 0x58
 8006dc2:	d100      	bne.n	8006dc6 <_printf_i+0x2a>
 8006dc4:	e08c      	b.n	8006ee0 <_printf_i+0x144>
 8006dc6:	0026      	movs	r6, r4
 8006dc8:	3642      	adds	r6, #66	; 0x42
 8006dca:	7032      	strb	r2, [r6, #0]
 8006dcc:	e022      	b.n	8006e14 <_printf_i+0x78>
 8006dce:	0010      	movs	r0, r2
 8006dd0:	3863      	subs	r0, #99	; 0x63
 8006dd2:	2815      	cmp	r0, #21
 8006dd4:	d8f7      	bhi.n	8006dc6 <_printf_i+0x2a>
 8006dd6:	f7f9 f9a9 	bl	800012c <__gnu_thumb1_case_shi>
 8006dda:	0016      	.short	0x0016
 8006ddc:	fff6001f 	.word	0xfff6001f
 8006de0:	fff6fff6 	.word	0xfff6fff6
 8006de4:	001ffff6 	.word	0x001ffff6
 8006de8:	fff6fff6 	.word	0xfff6fff6
 8006dec:	fff6fff6 	.word	0xfff6fff6
 8006df0:	003600a8 	.word	0x003600a8
 8006df4:	fff6009a 	.word	0xfff6009a
 8006df8:	00b9fff6 	.word	0x00b9fff6
 8006dfc:	0036fff6 	.word	0x0036fff6
 8006e00:	fff6fff6 	.word	0xfff6fff6
 8006e04:	009e      	.short	0x009e
 8006e06:	0026      	movs	r6, r4
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	3642      	adds	r6, #66	; 0x42
 8006e0c:	1d11      	adds	r1, r2, #4
 8006e0e:	6019      	str	r1, [r3, #0]
 8006e10:	6813      	ldr	r3, [r2, #0]
 8006e12:	7033      	strb	r3, [r6, #0]
 8006e14:	2301      	movs	r3, #1
 8006e16:	e0a7      	b.n	8006f68 <_printf_i+0x1cc>
 8006e18:	6808      	ldr	r0, [r1, #0]
 8006e1a:	6819      	ldr	r1, [r3, #0]
 8006e1c:	1d0a      	adds	r2, r1, #4
 8006e1e:	0605      	lsls	r5, r0, #24
 8006e20:	d50b      	bpl.n	8006e3a <_printf_i+0x9e>
 8006e22:	680d      	ldr	r5, [r1, #0]
 8006e24:	601a      	str	r2, [r3, #0]
 8006e26:	2d00      	cmp	r5, #0
 8006e28:	da03      	bge.n	8006e32 <_printf_i+0x96>
 8006e2a:	232d      	movs	r3, #45	; 0x2d
 8006e2c:	9a04      	ldr	r2, [sp, #16]
 8006e2e:	426d      	negs	r5, r5
 8006e30:	7013      	strb	r3, [r2, #0]
 8006e32:	4b61      	ldr	r3, [pc, #388]	; (8006fb8 <_printf_i+0x21c>)
 8006e34:	270a      	movs	r7, #10
 8006e36:	9303      	str	r3, [sp, #12]
 8006e38:	e01b      	b.n	8006e72 <_printf_i+0xd6>
 8006e3a:	680d      	ldr	r5, [r1, #0]
 8006e3c:	601a      	str	r2, [r3, #0]
 8006e3e:	0641      	lsls	r1, r0, #25
 8006e40:	d5f1      	bpl.n	8006e26 <_printf_i+0x8a>
 8006e42:	b22d      	sxth	r5, r5
 8006e44:	e7ef      	b.n	8006e26 <_printf_i+0x8a>
 8006e46:	680d      	ldr	r5, [r1, #0]
 8006e48:	6819      	ldr	r1, [r3, #0]
 8006e4a:	1d08      	adds	r0, r1, #4
 8006e4c:	6018      	str	r0, [r3, #0]
 8006e4e:	062e      	lsls	r6, r5, #24
 8006e50:	d501      	bpl.n	8006e56 <_printf_i+0xba>
 8006e52:	680d      	ldr	r5, [r1, #0]
 8006e54:	e003      	b.n	8006e5e <_printf_i+0xc2>
 8006e56:	066d      	lsls	r5, r5, #25
 8006e58:	d5fb      	bpl.n	8006e52 <_printf_i+0xb6>
 8006e5a:	680d      	ldr	r5, [r1, #0]
 8006e5c:	b2ad      	uxth	r5, r5
 8006e5e:	4b56      	ldr	r3, [pc, #344]	; (8006fb8 <_printf_i+0x21c>)
 8006e60:	2708      	movs	r7, #8
 8006e62:	9303      	str	r3, [sp, #12]
 8006e64:	2a6f      	cmp	r2, #111	; 0x6f
 8006e66:	d000      	beq.n	8006e6a <_printf_i+0xce>
 8006e68:	3702      	adds	r7, #2
 8006e6a:	0023      	movs	r3, r4
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	3343      	adds	r3, #67	; 0x43
 8006e70:	701a      	strb	r2, [r3, #0]
 8006e72:	6863      	ldr	r3, [r4, #4]
 8006e74:	60a3      	str	r3, [r4, #8]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	db03      	blt.n	8006e82 <_printf_i+0xe6>
 8006e7a:	2204      	movs	r2, #4
 8006e7c:	6821      	ldr	r1, [r4, #0]
 8006e7e:	4391      	bics	r1, r2
 8006e80:	6021      	str	r1, [r4, #0]
 8006e82:	2d00      	cmp	r5, #0
 8006e84:	d102      	bne.n	8006e8c <_printf_i+0xf0>
 8006e86:	9e04      	ldr	r6, [sp, #16]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00c      	beq.n	8006ea6 <_printf_i+0x10a>
 8006e8c:	9e04      	ldr	r6, [sp, #16]
 8006e8e:	0028      	movs	r0, r5
 8006e90:	0039      	movs	r1, r7
 8006e92:	f7f9 f9db 	bl	800024c <__aeabi_uidivmod>
 8006e96:	9b03      	ldr	r3, [sp, #12]
 8006e98:	3e01      	subs	r6, #1
 8006e9a:	5c5b      	ldrb	r3, [r3, r1]
 8006e9c:	7033      	strb	r3, [r6, #0]
 8006e9e:	002b      	movs	r3, r5
 8006ea0:	0005      	movs	r5, r0
 8006ea2:	429f      	cmp	r7, r3
 8006ea4:	d9f3      	bls.n	8006e8e <_printf_i+0xf2>
 8006ea6:	2f08      	cmp	r7, #8
 8006ea8:	d109      	bne.n	8006ebe <_printf_i+0x122>
 8006eaa:	6823      	ldr	r3, [r4, #0]
 8006eac:	07db      	lsls	r3, r3, #31
 8006eae:	d506      	bpl.n	8006ebe <_printf_i+0x122>
 8006eb0:	6863      	ldr	r3, [r4, #4]
 8006eb2:	6922      	ldr	r2, [r4, #16]
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	dc02      	bgt.n	8006ebe <_printf_i+0x122>
 8006eb8:	2330      	movs	r3, #48	; 0x30
 8006eba:	3e01      	subs	r6, #1
 8006ebc:	7033      	strb	r3, [r6, #0]
 8006ebe:	9b04      	ldr	r3, [sp, #16]
 8006ec0:	1b9b      	subs	r3, r3, r6
 8006ec2:	6123      	str	r3, [r4, #16]
 8006ec4:	9b07      	ldr	r3, [sp, #28]
 8006ec6:	0021      	movs	r1, r4
 8006ec8:	9300      	str	r3, [sp, #0]
 8006eca:	9805      	ldr	r0, [sp, #20]
 8006ecc:	9b06      	ldr	r3, [sp, #24]
 8006ece:	aa09      	add	r2, sp, #36	; 0x24
 8006ed0:	f7ff fef4 	bl	8006cbc <_printf_common>
 8006ed4:	1c43      	adds	r3, r0, #1
 8006ed6:	d14c      	bne.n	8006f72 <_printf_i+0x1d6>
 8006ed8:	2001      	movs	r0, #1
 8006eda:	4240      	negs	r0, r0
 8006edc:	b00b      	add	sp, #44	; 0x2c
 8006ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ee0:	3145      	adds	r1, #69	; 0x45
 8006ee2:	700a      	strb	r2, [r1, #0]
 8006ee4:	4a34      	ldr	r2, [pc, #208]	; (8006fb8 <_printf_i+0x21c>)
 8006ee6:	9203      	str	r2, [sp, #12]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	6821      	ldr	r1, [r4, #0]
 8006eec:	ca20      	ldmia	r2!, {r5}
 8006eee:	601a      	str	r2, [r3, #0]
 8006ef0:	0608      	lsls	r0, r1, #24
 8006ef2:	d516      	bpl.n	8006f22 <_printf_i+0x186>
 8006ef4:	07cb      	lsls	r3, r1, #31
 8006ef6:	d502      	bpl.n	8006efe <_printf_i+0x162>
 8006ef8:	2320      	movs	r3, #32
 8006efa:	4319      	orrs	r1, r3
 8006efc:	6021      	str	r1, [r4, #0]
 8006efe:	2710      	movs	r7, #16
 8006f00:	2d00      	cmp	r5, #0
 8006f02:	d1b2      	bne.n	8006e6a <_printf_i+0xce>
 8006f04:	2320      	movs	r3, #32
 8006f06:	6822      	ldr	r2, [r4, #0]
 8006f08:	439a      	bics	r2, r3
 8006f0a:	6022      	str	r2, [r4, #0]
 8006f0c:	e7ad      	b.n	8006e6a <_printf_i+0xce>
 8006f0e:	2220      	movs	r2, #32
 8006f10:	6809      	ldr	r1, [r1, #0]
 8006f12:	430a      	orrs	r2, r1
 8006f14:	6022      	str	r2, [r4, #0]
 8006f16:	0022      	movs	r2, r4
 8006f18:	2178      	movs	r1, #120	; 0x78
 8006f1a:	3245      	adds	r2, #69	; 0x45
 8006f1c:	7011      	strb	r1, [r2, #0]
 8006f1e:	4a27      	ldr	r2, [pc, #156]	; (8006fbc <_printf_i+0x220>)
 8006f20:	e7e1      	b.n	8006ee6 <_printf_i+0x14a>
 8006f22:	0648      	lsls	r0, r1, #25
 8006f24:	d5e6      	bpl.n	8006ef4 <_printf_i+0x158>
 8006f26:	b2ad      	uxth	r5, r5
 8006f28:	e7e4      	b.n	8006ef4 <_printf_i+0x158>
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	680d      	ldr	r5, [r1, #0]
 8006f2e:	1d10      	adds	r0, r2, #4
 8006f30:	6949      	ldr	r1, [r1, #20]
 8006f32:	6018      	str	r0, [r3, #0]
 8006f34:	6813      	ldr	r3, [r2, #0]
 8006f36:	062e      	lsls	r6, r5, #24
 8006f38:	d501      	bpl.n	8006f3e <_printf_i+0x1a2>
 8006f3a:	6019      	str	r1, [r3, #0]
 8006f3c:	e002      	b.n	8006f44 <_printf_i+0x1a8>
 8006f3e:	066d      	lsls	r5, r5, #25
 8006f40:	d5fb      	bpl.n	8006f3a <_printf_i+0x19e>
 8006f42:	8019      	strh	r1, [r3, #0]
 8006f44:	2300      	movs	r3, #0
 8006f46:	9e04      	ldr	r6, [sp, #16]
 8006f48:	6123      	str	r3, [r4, #16]
 8006f4a:	e7bb      	b.n	8006ec4 <_printf_i+0x128>
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	1d11      	adds	r1, r2, #4
 8006f50:	6019      	str	r1, [r3, #0]
 8006f52:	6816      	ldr	r6, [r2, #0]
 8006f54:	2100      	movs	r1, #0
 8006f56:	0030      	movs	r0, r6
 8006f58:	6862      	ldr	r2, [r4, #4]
 8006f5a:	f002 fc1f 	bl	800979c <memchr>
 8006f5e:	2800      	cmp	r0, #0
 8006f60:	d001      	beq.n	8006f66 <_printf_i+0x1ca>
 8006f62:	1b80      	subs	r0, r0, r6
 8006f64:	6060      	str	r0, [r4, #4]
 8006f66:	6863      	ldr	r3, [r4, #4]
 8006f68:	6123      	str	r3, [r4, #16]
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	9a04      	ldr	r2, [sp, #16]
 8006f6e:	7013      	strb	r3, [r2, #0]
 8006f70:	e7a8      	b.n	8006ec4 <_printf_i+0x128>
 8006f72:	6923      	ldr	r3, [r4, #16]
 8006f74:	0032      	movs	r2, r6
 8006f76:	9906      	ldr	r1, [sp, #24]
 8006f78:	9805      	ldr	r0, [sp, #20]
 8006f7a:	9d07      	ldr	r5, [sp, #28]
 8006f7c:	47a8      	blx	r5
 8006f7e:	1c43      	adds	r3, r0, #1
 8006f80:	d0aa      	beq.n	8006ed8 <_printf_i+0x13c>
 8006f82:	6823      	ldr	r3, [r4, #0]
 8006f84:	079b      	lsls	r3, r3, #30
 8006f86:	d415      	bmi.n	8006fb4 <_printf_i+0x218>
 8006f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f8a:	68e0      	ldr	r0, [r4, #12]
 8006f8c:	4298      	cmp	r0, r3
 8006f8e:	daa5      	bge.n	8006edc <_printf_i+0x140>
 8006f90:	0018      	movs	r0, r3
 8006f92:	e7a3      	b.n	8006edc <_printf_i+0x140>
 8006f94:	0022      	movs	r2, r4
 8006f96:	2301      	movs	r3, #1
 8006f98:	9906      	ldr	r1, [sp, #24]
 8006f9a:	9805      	ldr	r0, [sp, #20]
 8006f9c:	9e07      	ldr	r6, [sp, #28]
 8006f9e:	3219      	adds	r2, #25
 8006fa0:	47b0      	blx	r6
 8006fa2:	1c43      	adds	r3, r0, #1
 8006fa4:	d098      	beq.n	8006ed8 <_printf_i+0x13c>
 8006fa6:	3501      	adds	r5, #1
 8006fa8:	68e3      	ldr	r3, [r4, #12]
 8006faa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fac:	1a9b      	subs	r3, r3, r2
 8006fae:	42ab      	cmp	r3, r5
 8006fb0:	dcf0      	bgt.n	8006f94 <_printf_i+0x1f8>
 8006fb2:	e7e9      	b.n	8006f88 <_printf_i+0x1ec>
 8006fb4:	2500      	movs	r5, #0
 8006fb6:	e7f7      	b.n	8006fa8 <_printf_i+0x20c>
 8006fb8:	0800bc78 	.word	0x0800bc78
 8006fbc:	0800bc89 	.word	0x0800bc89

08006fc0 <_scanf_float>:
 8006fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fc2:	b08b      	sub	sp, #44	; 0x2c
 8006fc4:	0015      	movs	r5, r2
 8006fc6:	9001      	str	r0, [sp, #4]
 8006fc8:	22ae      	movs	r2, #174	; 0xae
 8006fca:	2000      	movs	r0, #0
 8006fcc:	9306      	str	r3, [sp, #24]
 8006fce:	688b      	ldr	r3, [r1, #8]
 8006fd0:	000e      	movs	r6, r1
 8006fd2:	1e59      	subs	r1, r3, #1
 8006fd4:	0052      	lsls	r2, r2, #1
 8006fd6:	9005      	str	r0, [sp, #20]
 8006fd8:	4291      	cmp	r1, r2
 8006fda:	d905      	bls.n	8006fe8 <_scanf_float+0x28>
 8006fdc:	3b5e      	subs	r3, #94	; 0x5e
 8006fde:	3bff      	subs	r3, #255	; 0xff
 8006fe0:	9305      	str	r3, [sp, #20]
 8006fe2:	235e      	movs	r3, #94	; 0x5e
 8006fe4:	33ff      	adds	r3, #255	; 0xff
 8006fe6:	60b3      	str	r3, [r6, #8]
 8006fe8:	23f0      	movs	r3, #240	; 0xf0
 8006fea:	6832      	ldr	r2, [r6, #0]
 8006fec:	00db      	lsls	r3, r3, #3
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	6033      	str	r3, [r6, #0]
 8006ff2:	0033      	movs	r3, r6
 8006ff4:	2400      	movs	r4, #0
 8006ff6:	331c      	adds	r3, #28
 8006ff8:	001f      	movs	r7, r3
 8006ffa:	9303      	str	r3, [sp, #12]
 8006ffc:	9402      	str	r4, [sp, #8]
 8006ffe:	9408      	str	r4, [sp, #32]
 8007000:	9407      	str	r4, [sp, #28]
 8007002:	9400      	str	r4, [sp, #0]
 8007004:	9404      	str	r4, [sp, #16]
 8007006:	68b2      	ldr	r2, [r6, #8]
 8007008:	2a00      	cmp	r2, #0
 800700a:	d00a      	beq.n	8007022 <_scanf_float+0x62>
 800700c:	682b      	ldr	r3, [r5, #0]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	2b4e      	cmp	r3, #78	; 0x4e
 8007012:	d844      	bhi.n	800709e <_scanf_float+0xde>
 8007014:	0018      	movs	r0, r3
 8007016:	2b40      	cmp	r3, #64	; 0x40
 8007018:	d82c      	bhi.n	8007074 <_scanf_float+0xb4>
 800701a:	382b      	subs	r0, #43	; 0x2b
 800701c:	b2c1      	uxtb	r1, r0
 800701e:	290e      	cmp	r1, #14
 8007020:	d92a      	bls.n	8007078 <_scanf_float+0xb8>
 8007022:	9b00      	ldr	r3, [sp, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d003      	beq.n	8007030 <_scanf_float+0x70>
 8007028:	6832      	ldr	r2, [r6, #0]
 800702a:	4ba4      	ldr	r3, [pc, #656]	; (80072bc <_scanf_float+0x2fc>)
 800702c:	4013      	ands	r3, r2
 800702e:	6033      	str	r3, [r6, #0]
 8007030:	9b02      	ldr	r3, [sp, #8]
 8007032:	3b01      	subs	r3, #1
 8007034:	2b01      	cmp	r3, #1
 8007036:	d900      	bls.n	800703a <_scanf_float+0x7a>
 8007038:	e0f9      	b.n	800722e <_scanf_float+0x26e>
 800703a:	24be      	movs	r4, #190	; 0xbe
 800703c:	0064      	lsls	r4, r4, #1
 800703e:	9b03      	ldr	r3, [sp, #12]
 8007040:	429f      	cmp	r7, r3
 8007042:	d900      	bls.n	8007046 <_scanf_float+0x86>
 8007044:	e0e9      	b.n	800721a <_scanf_float+0x25a>
 8007046:	2301      	movs	r3, #1
 8007048:	9302      	str	r3, [sp, #8]
 800704a:	e185      	b.n	8007358 <_scanf_float+0x398>
 800704c:	0018      	movs	r0, r3
 800704e:	3861      	subs	r0, #97	; 0x61
 8007050:	280d      	cmp	r0, #13
 8007052:	d8e6      	bhi.n	8007022 <_scanf_float+0x62>
 8007054:	f7f9 f86a 	bl	800012c <__gnu_thumb1_case_shi>
 8007058:	ffe50083 	.word	0xffe50083
 800705c:	ffe5ffe5 	.word	0xffe5ffe5
 8007060:	00a200b6 	.word	0x00a200b6
 8007064:	ffe5ffe5 	.word	0xffe5ffe5
 8007068:	ffe50089 	.word	0xffe50089
 800706c:	ffe5ffe5 	.word	0xffe5ffe5
 8007070:	0065ffe5 	.word	0x0065ffe5
 8007074:	3841      	subs	r0, #65	; 0x41
 8007076:	e7eb      	b.n	8007050 <_scanf_float+0x90>
 8007078:	280e      	cmp	r0, #14
 800707a:	d8d2      	bhi.n	8007022 <_scanf_float+0x62>
 800707c:	f7f9 f856 	bl	800012c <__gnu_thumb1_case_shi>
 8007080:	ffd1004b 	.word	0xffd1004b
 8007084:	0098004b 	.word	0x0098004b
 8007088:	0020ffd1 	.word	0x0020ffd1
 800708c:	00400040 	.word	0x00400040
 8007090:	00400040 	.word	0x00400040
 8007094:	00400040 	.word	0x00400040
 8007098:	00400040 	.word	0x00400040
 800709c:	0040      	.short	0x0040
 800709e:	2b6e      	cmp	r3, #110	; 0x6e
 80070a0:	d809      	bhi.n	80070b6 <_scanf_float+0xf6>
 80070a2:	2b60      	cmp	r3, #96	; 0x60
 80070a4:	d8d2      	bhi.n	800704c <_scanf_float+0x8c>
 80070a6:	2b54      	cmp	r3, #84	; 0x54
 80070a8:	d07d      	beq.n	80071a6 <_scanf_float+0x1e6>
 80070aa:	2b59      	cmp	r3, #89	; 0x59
 80070ac:	d1b9      	bne.n	8007022 <_scanf_float+0x62>
 80070ae:	2c07      	cmp	r4, #7
 80070b0:	d1b7      	bne.n	8007022 <_scanf_float+0x62>
 80070b2:	2408      	movs	r4, #8
 80070b4:	e02c      	b.n	8007110 <_scanf_float+0x150>
 80070b6:	2b74      	cmp	r3, #116	; 0x74
 80070b8:	d075      	beq.n	80071a6 <_scanf_float+0x1e6>
 80070ba:	2b79      	cmp	r3, #121	; 0x79
 80070bc:	d0f7      	beq.n	80070ae <_scanf_float+0xee>
 80070be:	e7b0      	b.n	8007022 <_scanf_float+0x62>
 80070c0:	6831      	ldr	r1, [r6, #0]
 80070c2:	05c8      	lsls	r0, r1, #23
 80070c4:	d51c      	bpl.n	8007100 <_scanf_float+0x140>
 80070c6:	2380      	movs	r3, #128	; 0x80
 80070c8:	4399      	bics	r1, r3
 80070ca:	9b00      	ldr	r3, [sp, #0]
 80070cc:	6031      	str	r1, [r6, #0]
 80070ce:	3301      	adds	r3, #1
 80070d0:	9300      	str	r3, [sp, #0]
 80070d2:	9b05      	ldr	r3, [sp, #20]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d003      	beq.n	80070e0 <_scanf_float+0x120>
 80070d8:	3b01      	subs	r3, #1
 80070da:	3201      	adds	r2, #1
 80070dc:	9305      	str	r3, [sp, #20]
 80070de:	60b2      	str	r2, [r6, #8]
 80070e0:	68b3      	ldr	r3, [r6, #8]
 80070e2:	3b01      	subs	r3, #1
 80070e4:	60b3      	str	r3, [r6, #8]
 80070e6:	6933      	ldr	r3, [r6, #16]
 80070e8:	3301      	adds	r3, #1
 80070ea:	6133      	str	r3, [r6, #16]
 80070ec:	686b      	ldr	r3, [r5, #4]
 80070ee:	3b01      	subs	r3, #1
 80070f0:	606b      	str	r3, [r5, #4]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	dc00      	bgt.n	80070f8 <_scanf_float+0x138>
 80070f6:	e086      	b.n	8007206 <_scanf_float+0x246>
 80070f8:	682b      	ldr	r3, [r5, #0]
 80070fa:	3301      	adds	r3, #1
 80070fc:	602b      	str	r3, [r5, #0]
 80070fe:	e782      	b.n	8007006 <_scanf_float+0x46>
 8007100:	9a02      	ldr	r2, [sp, #8]
 8007102:	1912      	adds	r2, r2, r4
 8007104:	2a00      	cmp	r2, #0
 8007106:	d18c      	bne.n	8007022 <_scanf_float+0x62>
 8007108:	4a6d      	ldr	r2, [pc, #436]	; (80072c0 <_scanf_float+0x300>)
 800710a:	6831      	ldr	r1, [r6, #0]
 800710c:	400a      	ands	r2, r1
 800710e:	6032      	str	r2, [r6, #0]
 8007110:	703b      	strb	r3, [r7, #0]
 8007112:	3701      	adds	r7, #1
 8007114:	e7e4      	b.n	80070e0 <_scanf_float+0x120>
 8007116:	2180      	movs	r1, #128	; 0x80
 8007118:	6832      	ldr	r2, [r6, #0]
 800711a:	420a      	tst	r2, r1
 800711c:	d081      	beq.n	8007022 <_scanf_float+0x62>
 800711e:	438a      	bics	r2, r1
 8007120:	e7f5      	b.n	800710e <_scanf_float+0x14e>
 8007122:	9a02      	ldr	r2, [sp, #8]
 8007124:	2a00      	cmp	r2, #0
 8007126:	d10f      	bne.n	8007148 <_scanf_float+0x188>
 8007128:	9a00      	ldr	r2, [sp, #0]
 800712a:	2a00      	cmp	r2, #0
 800712c:	d10f      	bne.n	800714e <_scanf_float+0x18e>
 800712e:	6832      	ldr	r2, [r6, #0]
 8007130:	21e0      	movs	r1, #224	; 0xe0
 8007132:	0010      	movs	r0, r2
 8007134:	00c9      	lsls	r1, r1, #3
 8007136:	4008      	ands	r0, r1
 8007138:	4288      	cmp	r0, r1
 800713a:	d108      	bne.n	800714e <_scanf_float+0x18e>
 800713c:	4961      	ldr	r1, [pc, #388]	; (80072c4 <_scanf_float+0x304>)
 800713e:	400a      	ands	r2, r1
 8007140:	6032      	str	r2, [r6, #0]
 8007142:	2201      	movs	r2, #1
 8007144:	9202      	str	r2, [sp, #8]
 8007146:	e7e3      	b.n	8007110 <_scanf_float+0x150>
 8007148:	9a02      	ldr	r2, [sp, #8]
 800714a:	2a02      	cmp	r2, #2
 800714c:	d059      	beq.n	8007202 <_scanf_float+0x242>
 800714e:	2c01      	cmp	r4, #1
 8007150:	d002      	beq.n	8007158 <_scanf_float+0x198>
 8007152:	2c04      	cmp	r4, #4
 8007154:	d000      	beq.n	8007158 <_scanf_float+0x198>
 8007156:	e764      	b.n	8007022 <_scanf_float+0x62>
 8007158:	3401      	adds	r4, #1
 800715a:	b2e4      	uxtb	r4, r4
 800715c:	e7d8      	b.n	8007110 <_scanf_float+0x150>
 800715e:	9a02      	ldr	r2, [sp, #8]
 8007160:	2a01      	cmp	r2, #1
 8007162:	d000      	beq.n	8007166 <_scanf_float+0x1a6>
 8007164:	e75d      	b.n	8007022 <_scanf_float+0x62>
 8007166:	2202      	movs	r2, #2
 8007168:	e7ec      	b.n	8007144 <_scanf_float+0x184>
 800716a:	2c00      	cmp	r4, #0
 800716c:	d110      	bne.n	8007190 <_scanf_float+0x1d0>
 800716e:	9a00      	ldr	r2, [sp, #0]
 8007170:	2a00      	cmp	r2, #0
 8007172:	d000      	beq.n	8007176 <_scanf_float+0x1b6>
 8007174:	e758      	b.n	8007028 <_scanf_float+0x68>
 8007176:	6832      	ldr	r2, [r6, #0]
 8007178:	21e0      	movs	r1, #224	; 0xe0
 800717a:	0010      	movs	r0, r2
 800717c:	00c9      	lsls	r1, r1, #3
 800717e:	4008      	ands	r0, r1
 8007180:	4288      	cmp	r0, r1
 8007182:	d000      	beq.n	8007186 <_scanf_float+0x1c6>
 8007184:	e754      	b.n	8007030 <_scanf_float+0x70>
 8007186:	494f      	ldr	r1, [pc, #316]	; (80072c4 <_scanf_float+0x304>)
 8007188:	3401      	adds	r4, #1
 800718a:	400a      	ands	r2, r1
 800718c:	6032      	str	r2, [r6, #0]
 800718e:	e7bf      	b.n	8007110 <_scanf_float+0x150>
 8007190:	21fd      	movs	r1, #253	; 0xfd
 8007192:	1ee2      	subs	r2, r4, #3
 8007194:	420a      	tst	r2, r1
 8007196:	d000      	beq.n	800719a <_scanf_float+0x1da>
 8007198:	e743      	b.n	8007022 <_scanf_float+0x62>
 800719a:	e7dd      	b.n	8007158 <_scanf_float+0x198>
 800719c:	2c02      	cmp	r4, #2
 800719e:	d000      	beq.n	80071a2 <_scanf_float+0x1e2>
 80071a0:	e73f      	b.n	8007022 <_scanf_float+0x62>
 80071a2:	2403      	movs	r4, #3
 80071a4:	e7b4      	b.n	8007110 <_scanf_float+0x150>
 80071a6:	2c06      	cmp	r4, #6
 80071a8:	d000      	beq.n	80071ac <_scanf_float+0x1ec>
 80071aa:	e73a      	b.n	8007022 <_scanf_float+0x62>
 80071ac:	2407      	movs	r4, #7
 80071ae:	e7af      	b.n	8007110 <_scanf_float+0x150>
 80071b0:	6832      	ldr	r2, [r6, #0]
 80071b2:	0591      	lsls	r1, r2, #22
 80071b4:	d400      	bmi.n	80071b8 <_scanf_float+0x1f8>
 80071b6:	e734      	b.n	8007022 <_scanf_float+0x62>
 80071b8:	4943      	ldr	r1, [pc, #268]	; (80072c8 <_scanf_float+0x308>)
 80071ba:	400a      	ands	r2, r1
 80071bc:	6032      	str	r2, [r6, #0]
 80071be:	9a00      	ldr	r2, [sp, #0]
 80071c0:	9204      	str	r2, [sp, #16]
 80071c2:	e7a5      	b.n	8007110 <_scanf_float+0x150>
 80071c4:	21a0      	movs	r1, #160	; 0xa0
 80071c6:	2080      	movs	r0, #128	; 0x80
 80071c8:	6832      	ldr	r2, [r6, #0]
 80071ca:	00c9      	lsls	r1, r1, #3
 80071cc:	4011      	ands	r1, r2
 80071ce:	00c0      	lsls	r0, r0, #3
 80071d0:	4281      	cmp	r1, r0
 80071d2:	d006      	beq.n	80071e2 <_scanf_float+0x222>
 80071d4:	4202      	tst	r2, r0
 80071d6:	d100      	bne.n	80071da <_scanf_float+0x21a>
 80071d8:	e723      	b.n	8007022 <_scanf_float+0x62>
 80071da:	9900      	ldr	r1, [sp, #0]
 80071dc:	2900      	cmp	r1, #0
 80071de:	d100      	bne.n	80071e2 <_scanf_float+0x222>
 80071e0:	e726      	b.n	8007030 <_scanf_float+0x70>
 80071e2:	0591      	lsls	r1, r2, #22
 80071e4:	d404      	bmi.n	80071f0 <_scanf_float+0x230>
 80071e6:	9900      	ldr	r1, [sp, #0]
 80071e8:	9804      	ldr	r0, [sp, #16]
 80071ea:	9708      	str	r7, [sp, #32]
 80071ec:	1a09      	subs	r1, r1, r0
 80071ee:	9107      	str	r1, [sp, #28]
 80071f0:	4934      	ldr	r1, [pc, #208]	; (80072c4 <_scanf_float+0x304>)
 80071f2:	400a      	ands	r2, r1
 80071f4:	21c0      	movs	r1, #192	; 0xc0
 80071f6:	0049      	lsls	r1, r1, #1
 80071f8:	430a      	orrs	r2, r1
 80071fa:	6032      	str	r2, [r6, #0]
 80071fc:	2200      	movs	r2, #0
 80071fe:	9200      	str	r2, [sp, #0]
 8007200:	e786      	b.n	8007110 <_scanf_float+0x150>
 8007202:	2203      	movs	r2, #3
 8007204:	e79e      	b.n	8007144 <_scanf_float+0x184>
 8007206:	23c0      	movs	r3, #192	; 0xc0
 8007208:	005b      	lsls	r3, r3, #1
 800720a:	0029      	movs	r1, r5
 800720c:	58f3      	ldr	r3, [r6, r3]
 800720e:	9801      	ldr	r0, [sp, #4]
 8007210:	4798      	blx	r3
 8007212:	2800      	cmp	r0, #0
 8007214:	d100      	bne.n	8007218 <_scanf_float+0x258>
 8007216:	e6f6      	b.n	8007006 <_scanf_float+0x46>
 8007218:	e703      	b.n	8007022 <_scanf_float+0x62>
 800721a:	3f01      	subs	r7, #1
 800721c:	5933      	ldr	r3, [r6, r4]
 800721e:	002a      	movs	r2, r5
 8007220:	7839      	ldrb	r1, [r7, #0]
 8007222:	9801      	ldr	r0, [sp, #4]
 8007224:	4798      	blx	r3
 8007226:	6933      	ldr	r3, [r6, #16]
 8007228:	3b01      	subs	r3, #1
 800722a:	6133      	str	r3, [r6, #16]
 800722c:	e707      	b.n	800703e <_scanf_float+0x7e>
 800722e:	1e63      	subs	r3, r4, #1
 8007230:	2b06      	cmp	r3, #6
 8007232:	d80e      	bhi.n	8007252 <_scanf_float+0x292>
 8007234:	9702      	str	r7, [sp, #8]
 8007236:	2c02      	cmp	r4, #2
 8007238:	d920      	bls.n	800727c <_scanf_float+0x2bc>
 800723a:	1be3      	subs	r3, r4, r7
 800723c:	b2db      	uxtb	r3, r3
 800723e:	9305      	str	r3, [sp, #20]
 8007240:	9b02      	ldr	r3, [sp, #8]
 8007242:	9a05      	ldr	r2, [sp, #20]
 8007244:	189b      	adds	r3, r3, r2
 8007246:	b2db      	uxtb	r3, r3
 8007248:	2b03      	cmp	r3, #3
 800724a:	d827      	bhi.n	800729c <_scanf_float+0x2dc>
 800724c:	3c03      	subs	r4, #3
 800724e:	b2e4      	uxtb	r4, r4
 8007250:	1b3f      	subs	r7, r7, r4
 8007252:	6833      	ldr	r3, [r6, #0]
 8007254:	05da      	lsls	r2, r3, #23
 8007256:	d554      	bpl.n	8007302 <_scanf_float+0x342>
 8007258:	055b      	lsls	r3, r3, #21
 800725a:	d537      	bpl.n	80072cc <_scanf_float+0x30c>
 800725c:	24be      	movs	r4, #190	; 0xbe
 800725e:	0064      	lsls	r4, r4, #1
 8007260:	9b03      	ldr	r3, [sp, #12]
 8007262:	429f      	cmp	r7, r3
 8007264:	d800      	bhi.n	8007268 <_scanf_float+0x2a8>
 8007266:	e6ee      	b.n	8007046 <_scanf_float+0x86>
 8007268:	3f01      	subs	r7, #1
 800726a:	5933      	ldr	r3, [r6, r4]
 800726c:	002a      	movs	r2, r5
 800726e:	7839      	ldrb	r1, [r7, #0]
 8007270:	9801      	ldr	r0, [sp, #4]
 8007272:	4798      	blx	r3
 8007274:	6933      	ldr	r3, [r6, #16]
 8007276:	3b01      	subs	r3, #1
 8007278:	6133      	str	r3, [r6, #16]
 800727a:	e7f1      	b.n	8007260 <_scanf_float+0x2a0>
 800727c:	24be      	movs	r4, #190	; 0xbe
 800727e:	0064      	lsls	r4, r4, #1
 8007280:	9b03      	ldr	r3, [sp, #12]
 8007282:	429f      	cmp	r7, r3
 8007284:	d800      	bhi.n	8007288 <_scanf_float+0x2c8>
 8007286:	e6de      	b.n	8007046 <_scanf_float+0x86>
 8007288:	3f01      	subs	r7, #1
 800728a:	5933      	ldr	r3, [r6, r4]
 800728c:	002a      	movs	r2, r5
 800728e:	7839      	ldrb	r1, [r7, #0]
 8007290:	9801      	ldr	r0, [sp, #4]
 8007292:	4798      	blx	r3
 8007294:	6933      	ldr	r3, [r6, #16]
 8007296:	3b01      	subs	r3, #1
 8007298:	6133      	str	r3, [r6, #16]
 800729a:	e7f1      	b.n	8007280 <_scanf_float+0x2c0>
 800729c:	9b02      	ldr	r3, [sp, #8]
 800729e:	002a      	movs	r2, r5
 80072a0:	3b01      	subs	r3, #1
 80072a2:	7819      	ldrb	r1, [r3, #0]
 80072a4:	9302      	str	r3, [sp, #8]
 80072a6:	23be      	movs	r3, #190	; 0xbe
 80072a8:	005b      	lsls	r3, r3, #1
 80072aa:	58f3      	ldr	r3, [r6, r3]
 80072ac:	9801      	ldr	r0, [sp, #4]
 80072ae:	9309      	str	r3, [sp, #36]	; 0x24
 80072b0:	4798      	blx	r3
 80072b2:	6933      	ldr	r3, [r6, #16]
 80072b4:	3b01      	subs	r3, #1
 80072b6:	6133      	str	r3, [r6, #16]
 80072b8:	e7c2      	b.n	8007240 <_scanf_float+0x280>
 80072ba:	46c0      	nop			; (mov r8, r8)
 80072bc:	fffffeff 	.word	0xfffffeff
 80072c0:	fffffe7f 	.word	0xfffffe7f
 80072c4:	fffff87f 	.word	0xfffff87f
 80072c8:	fffffd7f 	.word	0xfffffd7f
 80072cc:	6933      	ldr	r3, [r6, #16]
 80072ce:	1e7c      	subs	r4, r7, #1
 80072d0:	7821      	ldrb	r1, [r4, #0]
 80072d2:	3b01      	subs	r3, #1
 80072d4:	6133      	str	r3, [r6, #16]
 80072d6:	2965      	cmp	r1, #101	; 0x65
 80072d8:	d00c      	beq.n	80072f4 <_scanf_float+0x334>
 80072da:	2945      	cmp	r1, #69	; 0x45
 80072dc:	d00a      	beq.n	80072f4 <_scanf_float+0x334>
 80072de:	23be      	movs	r3, #190	; 0xbe
 80072e0:	005b      	lsls	r3, r3, #1
 80072e2:	58f3      	ldr	r3, [r6, r3]
 80072e4:	002a      	movs	r2, r5
 80072e6:	9801      	ldr	r0, [sp, #4]
 80072e8:	4798      	blx	r3
 80072ea:	6933      	ldr	r3, [r6, #16]
 80072ec:	1ebc      	subs	r4, r7, #2
 80072ee:	3b01      	subs	r3, #1
 80072f0:	7821      	ldrb	r1, [r4, #0]
 80072f2:	6133      	str	r3, [r6, #16]
 80072f4:	23be      	movs	r3, #190	; 0xbe
 80072f6:	005b      	lsls	r3, r3, #1
 80072f8:	002a      	movs	r2, r5
 80072fa:	58f3      	ldr	r3, [r6, r3]
 80072fc:	9801      	ldr	r0, [sp, #4]
 80072fe:	4798      	blx	r3
 8007300:	0027      	movs	r7, r4
 8007302:	6832      	ldr	r2, [r6, #0]
 8007304:	2310      	movs	r3, #16
 8007306:	0011      	movs	r1, r2
 8007308:	4019      	ands	r1, r3
 800730a:	9102      	str	r1, [sp, #8]
 800730c:	421a      	tst	r2, r3
 800730e:	d158      	bne.n	80073c2 <_scanf_float+0x402>
 8007310:	23c0      	movs	r3, #192	; 0xc0
 8007312:	7039      	strb	r1, [r7, #0]
 8007314:	6832      	ldr	r2, [r6, #0]
 8007316:	00db      	lsls	r3, r3, #3
 8007318:	4013      	ands	r3, r2
 800731a:	2280      	movs	r2, #128	; 0x80
 800731c:	00d2      	lsls	r2, r2, #3
 800731e:	4293      	cmp	r3, r2
 8007320:	d11d      	bne.n	800735e <_scanf_float+0x39e>
 8007322:	9b04      	ldr	r3, [sp, #16]
 8007324:	9a00      	ldr	r2, [sp, #0]
 8007326:	9900      	ldr	r1, [sp, #0]
 8007328:	1a9a      	subs	r2, r3, r2
 800732a:	428b      	cmp	r3, r1
 800732c:	d124      	bne.n	8007378 <_scanf_float+0x3b8>
 800732e:	2200      	movs	r2, #0
 8007330:	9903      	ldr	r1, [sp, #12]
 8007332:	9801      	ldr	r0, [sp, #4]
 8007334:	f000 ff24 	bl	8008180 <_strtod_r>
 8007338:	9b06      	ldr	r3, [sp, #24]
 800733a:	000d      	movs	r5, r1
 800733c:	6831      	ldr	r1, [r6, #0]
 800733e:	0004      	movs	r4, r0
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	078a      	lsls	r2, r1, #30
 8007344:	d525      	bpl.n	8007392 <_scanf_float+0x3d2>
 8007346:	1d1a      	adds	r2, r3, #4
 8007348:	9906      	ldr	r1, [sp, #24]
 800734a:	600a      	str	r2, [r1, #0]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	601c      	str	r4, [r3, #0]
 8007350:	605d      	str	r5, [r3, #4]
 8007352:	68f3      	ldr	r3, [r6, #12]
 8007354:	3301      	adds	r3, #1
 8007356:	60f3      	str	r3, [r6, #12]
 8007358:	9802      	ldr	r0, [sp, #8]
 800735a:	b00b      	add	sp, #44	; 0x2c
 800735c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800735e:	9b07      	ldr	r3, [sp, #28]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d0e4      	beq.n	800732e <_scanf_float+0x36e>
 8007364:	9b08      	ldr	r3, [sp, #32]
 8007366:	9a02      	ldr	r2, [sp, #8]
 8007368:	1c59      	adds	r1, r3, #1
 800736a:	9801      	ldr	r0, [sp, #4]
 800736c:	230a      	movs	r3, #10
 800736e:	f000 ff9d 	bl	80082ac <_strtol_r>
 8007372:	9b07      	ldr	r3, [sp, #28]
 8007374:	9f08      	ldr	r7, [sp, #32]
 8007376:	1ac2      	subs	r2, r0, r3
 8007378:	0033      	movs	r3, r6
 800737a:	3370      	adds	r3, #112	; 0x70
 800737c:	33ff      	adds	r3, #255	; 0xff
 800737e:	429f      	cmp	r7, r3
 8007380:	d302      	bcc.n	8007388 <_scanf_float+0x3c8>
 8007382:	0037      	movs	r7, r6
 8007384:	376f      	adds	r7, #111	; 0x6f
 8007386:	37ff      	adds	r7, #255	; 0xff
 8007388:	0038      	movs	r0, r7
 800738a:	490f      	ldr	r1, [pc, #60]	; (80073c8 <_scanf_float+0x408>)
 800738c:	f000 f824 	bl	80073d8 <siprintf>
 8007390:	e7cd      	b.n	800732e <_scanf_float+0x36e>
 8007392:	1d1a      	adds	r2, r3, #4
 8007394:	0749      	lsls	r1, r1, #29
 8007396:	d4d7      	bmi.n	8007348 <_scanf_float+0x388>
 8007398:	9906      	ldr	r1, [sp, #24]
 800739a:	0020      	movs	r0, r4
 800739c:	600a      	str	r2, [r1, #0]
 800739e:	681f      	ldr	r7, [r3, #0]
 80073a0:	0022      	movs	r2, r4
 80073a2:	002b      	movs	r3, r5
 80073a4:	0029      	movs	r1, r5
 80073a6:	f7fb fc17 	bl	8002bd8 <__aeabi_dcmpun>
 80073aa:	2800      	cmp	r0, #0
 80073ac:	d004      	beq.n	80073b8 <_scanf_float+0x3f8>
 80073ae:	4807      	ldr	r0, [pc, #28]	; (80073cc <_scanf_float+0x40c>)
 80073b0:	f000 f80e 	bl	80073d0 <nanf>
 80073b4:	6038      	str	r0, [r7, #0]
 80073b6:	e7cc      	b.n	8007352 <_scanf_float+0x392>
 80073b8:	0020      	movs	r0, r4
 80073ba:	0029      	movs	r1, r5
 80073bc:	f7fb fcfe 	bl	8002dbc <__aeabi_d2f>
 80073c0:	e7f8      	b.n	80073b4 <_scanf_float+0x3f4>
 80073c2:	2300      	movs	r3, #0
 80073c4:	e640      	b.n	8007048 <_scanf_float+0x88>
 80073c6:	46c0      	nop			; (mov r8, r8)
 80073c8:	0800bc9a 	.word	0x0800bc9a
 80073cc:	0800c0bb 	.word	0x0800c0bb

080073d0 <nanf>:
 80073d0:	4800      	ldr	r0, [pc, #0]	; (80073d4 <nanf+0x4>)
 80073d2:	4770      	bx	lr
 80073d4:	7fc00000 	.word	0x7fc00000

080073d8 <siprintf>:
 80073d8:	b40e      	push	{r1, r2, r3}
 80073da:	b500      	push	{lr}
 80073dc:	490b      	ldr	r1, [pc, #44]	; (800740c <siprintf+0x34>)
 80073de:	b09c      	sub	sp, #112	; 0x70
 80073e0:	ab1d      	add	r3, sp, #116	; 0x74
 80073e2:	9002      	str	r0, [sp, #8]
 80073e4:	9006      	str	r0, [sp, #24]
 80073e6:	9107      	str	r1, [sp, #28]
 80073e8:	9104      	str	r1, [sp, #16]
 80073ea:	4809      	ldr	r0, [pc, #36]	; (8007410 <siprintf+0x38>)
 80073ec:	4909      	ldr	r1, [pc, #36]	; (8007414 <siprintf+0x3c>)
 80073ee:	cb04      	ldmia	r3!, {r2}
 80073f0:	9105      	str	r1, [sp, #20]
 80073f2:	6800      	ldr	r0, [r0, #0]
 80073f4:	a902      	add	r1, sp, #8
 80073f6:	9301      	str	r3, [sp, #4]
 80073f8:	f003 f81e 	bl	800a438 <_svfiprintf_r>
 80073fc:	2300      	movs	r3, #0
 80073fe:	9a02      	ldr	r2, [sp, #8]
 8007400:	7013      	strb	r3, [r2, #0]
 8007402:	b01c      	add	sp, #112	; 0x70
 8007404:	bc08      	pop	{r3}
 8007406:	b003      	add	sp, #12
 8007408:	4718      	bx	r3
 800740a:	46c0      	nop			; (mov r8, r8)
 800740c:	7fffffff 	.word	0x7fffffff
 8007410:	2000000c 	.word	0x2000000c
 8007414:	ffff0208 	.word	0xffff0208

08007418 <siscanf>:
 8007418:	b40e      	push	{r1, r2, r3}
 800741a:	b530      	push	{r4, r5, lr}
 800741c:	2381      	movs	r3, #129	; 0x81
 800741e:	b09c      	sub	sp, #112	; 0x70
 8007420:	466a      	mov	r2, sp
 8007422:	ac1f      	add	r4, sp, #124	; 0x7c
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	cc20      	ldmia	r4!, {r5}
 8007428:	8293      	strh	r3, [r2, #20]
 800742a:	9002      	str	r0, [sp, #8]
 800742c:	9006      	str	r0, [sp, #24]
 800742e:	f7f8 fe6b 	bl	8000108 <strlen>
 8007432:	4b0b      	ldr	r3, [pc, #44]	; (8007460 <siscanf+0x48>)
 8007434:	466a      	mov	r2, sp
 8007436:	930b      	str	r3, [sp, #44]	; 0x2c
 8007438:	2300      	movs	r3, #0
 800743a:	9003      	str	r0, [sp, #12]
 800743c:	9007      	str	r0, [sp, #28]
 800743e:	4809      	ldr	r0, [pc, #36]	; (8007464 <siscanf+0x4c>)
 8007440:	930f      	str	r3, [sp, #60]	; 0x3c
 8007442:	9314      	str	r3, [sp, #80]	; 0x50
 8007444:	3b01      	subs	r3, #1
 8007446:	82d3      	strh	r3, [r2, #22]
 8007448:	a902      	add	r1, sp, #8
 800744a:	0023      	movs	r3, r4
 800744c:	002a      	movs	r2, r5
 800744e:	6800      	ldr	r0, [r0, #0]
 8007450:	9401      	str	r4, [sp, #4]
 8007452:	f003 f94d 	bl	800a6f0 <__ssvfiscanf_r>
 8007456:	b01c      	add	sp, #112	; 0x70
 8007458:	bc30      	pop	{r4, r5}
 800745a:	bc08      	pop	{r3}
 800745c:	b003      	add	sp, #12
 800745e:	4718      	bx	r3
 8007460:	08007491 	.word	0x08007491
 8007464:	2000000c 	.word	0x2000000c

08007468 <__sread>:
 8007468:	b570      	push	{r4, r5, r6, lr}
 800746a:	000c      	movs	r4, r1
 800746c:	250e      	movs	r5, #14
 800746e:	5f49      	ldrsh	r1, [r1, r5]
 8007470:	f003 fc1e 	bl	800acb0 <_read_r>
 8007474:	2800      	cmp	r0, #0
 8007476:	db03      	blt.n	8007480 <__sread+0x18>
 8007478:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800747a:	181b      	adds	r3, r3, r0
 800747c:	6563      	str	r3, [r4, #84]	; 0x54
 800747e:	bd70      	pop	{r4, r5, r6, pc}
 8007480:	89a3      	ldrh	r3, [r4, #12]
 8007482:	4a02      	ldr	r2, [pc, #8]	; (800748c <__sread+0x24>)
 8007484:	4013      	ands	r3, r2
 8007486:	81a3      	strh	r3, [r4, #12]
 8007488:	e7f9      	b.n	800747e <__sread+0x16>
 800748a:	46c0      	nop			; (mov r8, r8)
 800748c:	ffffefff 	.word	0xffffefff

08007490 <__seofread>:
 8007490:	2000      	movs	r0, #0
 8007492:	4770      	bx	lr

08007494 <__swrite>:
 8007494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007496:	001f      	movs	r7, r3
 8007498:	898b      	ldrh	r3, [r1, #12]
 800749a:	0005      	movs	r5, r0
 800749c:	000c      	movs	r4, r1
 800749e:	0016      	movs	r6, r2
 80074a0:	05db      	lsls	r3, r3, #23
 80074a2:	d505      	bpl.n	80074b0 <__swrite+0x1c>
 80074a4:	230e      	movs	r3, #14
 80074a6:	5ec9      	ldrsh	r1, [r1, r3]
 80074a8:	2200      	movs	r2, #0
 80074aa:	2302      	movs	r3, #2
 80074ac:	f002 f946 	bl	800973c <_lseek_r>
 80074b0:	89a3      	ldrh	r3, [r4, #12]
 80074b2:	4a05      	ldr	r2, [pc, #20]	; (80074c8 <__swrite+0x34>)
 80074b4:	0028      	movs	r0, r5
 80074b6:	4013      	ands	r3, r2
 80074b8:	81a3      	strh	r3, [r4, #12]
 80074ba:	0032      	movs	r2, r6
 80074bc:	230e      	movs	r3, #14
 80074be:	5ee1      	ldrsh	r1, [r4, r3]
 80074c0:	003b      	movs	r3, r7
 80074c2:	f000 fef7 	bl	80082b4 <_write_r>
 80074c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074c8:	ffffefff 	.word	0xffffefff

080074cc <__sseek>:
 80074cc:	b570      	push	{r4, r5, r6, lr}
 80074ce:	000c      	movs	r4, r1
 80074d0:	250e      	movs	r5, #14
 80074d2:	5f49      	ldrsh	r1, [r1, r5]
 80074d4:	f002 f932 	bl	800973c <_lseek_r>
 80074d8:	89a3      	ldrh	r3, [r4, #12]
 80074da:	1c42      	adds	r2, r0, #1
 80074dc:	d103      	bne.n	80074e6 <__sseek+0x1a>
 80074de:	4a05      	ldr	r2, [pc, #20]	; (80074f4 <__sseek+0x28>)
 80074e0:	4013      	ands	r3, r2
 80074e2:	81a3      	strh	r3, [r4, #12]
 80074e4:	bd70      	pop	{r4, r5, r6, pc}
 80074e6:	2280      	movs	r2, #128	; 0x80
 80074e8:	0152      	lsls	r2, r2, #5
 80074ea:	4313      	orrs	r3, r2
 80074ec:	81a3      	strh	r3, [r4, #12]
 80074ee:	6560      	str	r0, [r4, #84]	; 0x54
 80074f0:	e7f8      	b.n	80074e4 <__sseek+0x18>
 80074f2:	46c0      	nop			; (mov r8, r8)
 80074f4:	ffffefff 	.word	0xffffefff

080074f8 <__sclose>:
 80074f8:	b510      	push	{r4, lr}
 80074fa:	230e      	movs	r3, #14
 80074fc:	5ec9      	ldrsh	r1, [r1, r3]
 80074fe:	f000 feed 	bl	80082dc <_close_r>
 8007502:	bd10      	pop	{r4, pc}

08007504 <strncmp>:
 8007504:	b530      	push	{r4, r5, lr}
 8007506:	0005      	movs	r5, r0
 8007508:	1e10      	subs	r0, r2, #0
 800750a:	d008      	beq.n	800751e <strncmp+0x1a>
 800750c:	2400      	movs	r4, #0
 800750e:	3a01      	subs	r2, #1
 8007510:	5d2b      	ldrb	r3, [r5, r4]
 8007512:	5d08      	ldrb	r0, [r1, r4]
 8007514:	4283      	cmp	r3, r0
 8007516:	d101      	bne.n	800751c <strncmp+0x18>
 8007518:	4294      	cmp	r4, r2
 800751a:	d101      	bne.n	8007520 <strncmp+0x1c>
 800751c:	1a18      	subs	r0, r3, r0
 800751e:	bd30      	pop	{r4, r5, pc}
 8007520:	3401      	adds	r4, #1
 8007522:	2b00      	cmp	r3, #0
 8007524:	d1f4      	bne.n	8007510 <strncmp+0xc>
 8007526:	e7f9      	b.n	800751c <strncmp+0x18>

08007528 <sulp>:
 8007528:	b570      	push	{r4, r5, r6, lr}
 800752a:	0016      	movs	r6, r2
 800752c:	000d      	movs	r5, r1
 800752e:	f002 fccd 	bl	8009ecc <__ulp>
 8007532:	2e00      	cmp	r6, #0
 8007534:	d00d      	beq.n	8007552 <sulp+0x2a>
 8007536:	236b      	movs	r3, #107	; 0x6b
 8007538:	006a      	lsls	r2, r5, #1
 800753a:	0d52      	lsrs	r2, r2, #21
 800753c:	1a9b      	subs	r3, r3, r2
 800753e:	2b00      	cmp	r3, #0
 8007540:	dd07      	ble.n	8007552 <sulp+0x2a>
 8007542:	2400      	movs	r4, #0
 8007544:	4a03      	ldr	r2, [pc, #12]	; (8007554 <sulp+0x2c>)
 8007546:	051b      	lsls	r3, r3, #20
 8007548:	189d      	adds	r5, r3, r2
 800754a:	002b      	movs	r3, r5
 800754c:	0022      	movs	r2, r4
 800754e:	f7fa fd45 	bl	8001fdc <__aeabi_dmul>
 8007552:	bd70      	pop	{r4, r5, r6, pc}
 8007554:	3ff00000 	.word	0x3ff00000

08007558 <_strtod_l>:
 8007558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800755a:	001d      	movs	r5, r3
 800755c:	2300      	movs	r3, #0
 800755e:	b0a5      	sub	sp, #148	; 0x94
 8007560:	9320      	str	r3, [sp, #128]	; 0x80
 8007562:	4bac      	ldr	r3, [pc, #688]	; (8007814 <_strtod_l+0x2bc>)
 8007564:	9005      	str	r0, [sp, #20]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	9108      	str	r1, [sp, #32]
 800756a:	0018      	movs	r0, r3
 800756c:	9307      	str	r3, [sp, #28]
 800756e:	921b      	str	r2, [sp, #108]	; 0x6c
 8007570:	f7f8 fdca 	bl	8000108 <strlen>
 8007574:	2600      	movs	r6, #0
 8007576:	0004      	movs	r4, r0
 8007578:	2700      	movs	r7, #0
 800757a:	9b08      	ldr	r3, [sp, #32]
 800757c:	931f      	str	r3, [sp, #124]	; 0x7c
 800757e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007580:	7813      	ldrb	r3, [r2, #0]
 8007582:	2b2b      	cmp	r3, #43	; 0x2b
 8007584:	d058      	beq.n	8007638 <_strtod_l+0xe0>
 8007586:	d844      	bhi.n	8007612 <_strtod_l+0xba>
 8007588:	2b0d      	cmp	r3, #13
 800758a:	d83d      	bhi.n	8007608 <_strtod_l+0xb0>
 800758c:	2b08      	cmp	r3, #8
 800758e:	d83d      	bhi.n	800760c <_strtod_l+0xb4>
 8007590:	2b00      	cmp	r3, #0
 8007592:	d047      	beq.n	8007624 <_strtod_l+0xcc>
 8007594:	2300      	movs	r3, #0
 8007596:	930e      	str	r3, [sp, #56]	; 0x38
 8007598:	2200      	movs	r2, #0
 800759a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800759c:	920a      	str	r2, [sp, #40]	; 0x28
 800759e:	9306      	str	r3, [sp, #24]
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	2b30      	cmp	r3, #48	; 0x30
 80075a4:	d000      	beq.n	80075a8 <_strtod_l+0x50>
 80075a6:	e07f      	b.n	80076a8 <_strtod_l+0x150>
 80075a8:	9b06      	ldr	r3, [sp, #24]
 80075aa:	3220      	adds	r2, #32
 80075ac:	785b      	ldrb	r3, [r3, #1]
 80075ae:	4393      	bics	r3, r2
 80075b0:	2b58      	cmp	r3, #88	; 0x58
 80075b2:	d000      	beq.n	80075b6 <_strtod_l+0x5e>
 80075b4:	e06e      	b.n	8007694 <_strtod_l+0x13c>
 80075b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075b8:	9502      	str	r5, [sp, #8]
 80075ba:	9301      	str	r3, [sp, #4]
 80075bc:	ab20      	add	r3, sp, #128	; 0x80
 80075be:	9300      	str	r3, [sp, #0]
 80075c0:	4a95      	ldr	r2, [pc, #596]	; (8007818 <_strtod_l+0x2c0>)
 80075c2:	ab21      	add	r3, sp, #132	; 0x84
 80075c4:	9805      	ldr	r0, [sp, #20]
 80075c6:	a91f      	add	r1, sp, #124	; 0x7c
 80075c8:	f001 fdaa 	bl	8009120 <__gethex>
 80075cc:	2307      	movs	r3, #7
 80075ce:	0005      	movs	r5, r0
 80075d0:	0004      	movs	r4, r0
 80075d2:	401d      	ands	r5, r3
 80075d4:	4218      	tst	r0, r3
 80075d6:	d006      	beq.n	80075e6 <_strtod_l+0x8e>
 80075d8:	2d06      	cmp	r5, #6
 80075da:	d12f      	bne.n	800763c <_strtod_l+0xe4>
 80075dc:	9b06      	ldr	r3, [sp, #24]
 80075de:	3301      	adds	r3, #1
 80075e0:	931f      	str	r3, [sp, #124]	; 0x7c
 80075e2:	2300      	movs	r3, #0
 80075e4:	930e      	str	r3, [sp, #56]	; 0x38
 80075e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d002      	beq.n	80075f2 <_strtod_l+0x9a>
 80075ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80075ee:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80075f0:	601a      	str	r2, [r3, #0]
 80075f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d01c      	beq.n	8007632 <_strtod_l+0xda>
 80075f8:	2380      	movs	r3, #128	; 0x80
 80075fa:	0032      	movs	r2, r6
 80075fc:	061b      	lsls	r3, r3, #24
 80075fe:	18fb      	adds	r3, r7, r3
 8007600:	0010      	movs	r0, r2
 8007602:	0019      	movs	r1, r3
 8007604:	b025      	add	sp, #148	; 0x94
 8007606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007608:	2b20      	cmp	r3, #32
 800760a:	d1c3      	bne.n	8007594 <_strtod_l+0x3c>
 800760c:	3201      	adds	r2, #1
 800760e:	921f      	str	r2, [sp, #124]	; 0x7c
 8007610:	e7b5      	b.n	800757e <_strtod_l+0x26>
 8007612:	2b2d      	cmp	r3, #45	; 0x2d
 8007614:	d1be      	bne.n	8007594 <_strtod_l+0x3c>
 8007616:	3b2c      	subs	r3, #44	; 0x2c
 8007618:	930e      	str	r3, [sp, #56]	; 0x38
 800761a:	1c53      	adds	r3, r2, #1
 800761c:	931f      	str	r3, [sp, #124]	; 0x7c
 800761e:	7853      	ldrb	r3, [r2, #1]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d1b9      	bne.n	8007598 <_strtod_l+0x40>
 8007624:	9b08      	ldr	r3, [sp, #32]
 8007626:	931f      	str	r3, [sp, #124]	; 0x7c
 8007628:	2300      	movs	r3, #0
 800762a:	930e      	str	r3, [sp, #56]	; 0x38
 800762c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1dc      	bne.n	80075ec <_strtod_l+0x94>
 8007632:	0032      	movs	r2, r6
 8007634:	003b      	movs	r3, r7
 8007636:	e7e3      	b.n	8007600 <_strtod_l+0xa8>
 8007638:	2300      	movs	r3, #0
 800763a:	e7ed      	b.n	8007618 <_strtod_l+0xc0>
 800763c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800763e:	2a00      	cmp	r2, #0
 8007640:	d007      	beq.n	8007652 <_strtod_l+0xfa>
 8007642:	2135      	movs	r1, #53	; 0x35
 8007644:	a822      	add	r0, sp, #136	; 0x88
 8007646:	f002 fd42 	bl	800a0ce <__copybits>
 800764a:	9920      	ldr	r1, [sp, #128]	; 0x80
 800764c:	9805      	ldr	r0, [sp, #20]
 800764e:	f002 f8fd 	bl	800984c <_Bfree>
 8007652:	1e68      	subs	r0, r5, #1
 8007654:	2804      	cmp	r0, #4
 8007656:	d806      	bhi.n	8007666 <_strtod_l+0x10e>
 8007658:	f7f8 fd5e 	bl	8000118 <__gnu_thumb1_case_uqi>
 800765c:	1816030b 	.word	0x1816030b
 8007660:	0b          	.byte	0x0b
 8007661:	00          	.byte	0x00
 8007662:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8007664:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8007666:	0723      	lsls	r3, r4, #28
 8007668:	d5bd      	bpl.n	80075e6 <_strtod_l+0x8e>
 800766a:	2380      	movs	r3, #128	; 0x80
 800766c:	061b      	lsls	r3, r3, #24
 800766e:	431f      	orrs	r7, r3
 8007670:	e7b9      	b.n	80075e6 <_strtod_l+0x8e>
 8007672:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007674:	4a69      	ldr	r2, [pc, #420]	; (800781c <_strtod_l+0x2c4>)
 8007676:	496a      	ldr	r1, [pc, #424]	; (8007820 <_strtod_l+0x2c8>)
 8007678:	401a      	ands	r2, r3
 800767a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800767c:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800767e:	185b      	adds	r3, r3, r1
 8007680:	051b      	lsls	r3, r3, #20
 8007682:	431a      	orrs	r2, r3
 8007684:	0017      	movs	r7, r2
 8007686:	e7ee      	b.n	8007666 <_strtod_l+0x10e>
 8007688:	4f66      	ldr	r7, [pc, #408]	; (8007824 <_strtod_l+0x2cc>)
 800768a:	e7ec      	b.n	8007666 <_strtod_l+0x10e>
 800768c:	2601      	movs	r6, #1
 800768e:	4f66      	ldr	r7, [pc, #408]	; (8007828 <_strtod_l+0x2d0>)
 8007690:	4276      	negs	r6, r6
 8007692:	e7e8      	b.n	8007666 <_strtod_l+0x10e>
 8007694:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007696:	1c5a      	adds	r2, r3, #1
 8007698:	921f      	str	r2, [sp, #124]	; 0x7c
 800769a:	785b      	ldrb	r3, [r3, #1]
 800769c:	2b30      	cmp	r3, #48	; 0x30
 800769e:	d0f9      	beq.n	8007694 <_strtod_l+0x13c>
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d0a0      	beq.n	80075e6 <_strtod_l+0x8e>
 80076a4:	2301      	movs	r3, #1
 80076a6:	930a      	str	r3, [sp, #40]	; 0x28
 80076a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80076aa:	220a      	movs	r2, #10
 80076ac:	9310      	str	r3, [sp, #64]	; 0x40
 80076ae:	2300      	movs	r3, #0
 80076b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80076b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80076b4:	9309      	str	r3, [sp, #36]	; 0x24
 80076b6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80076b8:	7805      	ldrb	r5, [r0, #0]
 80076ba:	002b      	movs	r3, r5
 80076bc:	3b30      	subs	r3, #48	; 0x30
 80076be:	b2d9      	uxtb	r1, r3
 80076c0:	2909      	cmp	r1, #9
 80076c2:	d927      	bls.n	8007714 <_strtod_l+0x1bc>
 80076c4:	0022      	movs	r2, r4
 80076c6:	9907      	ldr	r1, [sp, #28]
 80076c8:	f7ff ff1c 	bl	8007504 <strncmp>
 80076cc:	2800      	cmp	r0, #0
 80076ce:	d033      	beq.n	8007738 <_strtod_l+0x1e0>
 80076d0:	2000      	movs	r0, #0
 80076d2:	002b      	movs	r3, r5
 80076d4:	4684      	mov	ip, r0
 80076d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076d8:	900c      	str	r0, [sp, #48]	; 0x30
 80076da:	9206      	str	r2, [sp, #24]
 80076dc:	2220      	movs	r2, #32
 80076de:	0019      	movs	r1, r3
 80076e0:	4391      	bics	r1, r2
 80076e2:	000a      	movs	r2, r1
 80076e4:	2100      	movs	r1, #0
 80076e6:	9107      	str	r1, [sp, #28]
 80076e8:	2a45      	cmp	r2, #69	; 0x45
 80076ea:	d000      	beq.n	80076ee <_strtod_l+0x196>
 80076ec:	e0c5      	b.n	800787a <_strtod_l+0x322>
 80076ee:	9b06      	ldr	r3, [sp, #24]
 80076f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076f2:	4303      	orrs	r3, r0
 80076f4:	4313      	orrs	r3, r2
 80076f6:	428b      	cmp	r3, r1
 80076f8:	d094      	beq.n	8007624 <_strtod_l+0xcc>
 80076fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80076fc:	9308      	str	r3, [sp, #32]
 80076fe:	3301      	adds	r3, #1
 8007700:	931f      	str	r3, [sp, #124]	; 0x7c
 8007702:	9b08      	ldr	r3, [sp, #32]
 8007704:	785b      	ldrb	r3, [r3, #1]
 8007706:	2b2b      	cmp	r3, #43	; 0x2b
 8007708:	d076      	beq.n	80077f8 <_strtod_l+0x2a0>
 800770a:	000c      	movs	r4, r1
 800770c:	2b2d      	cmp	r3, #45	; 0x2d
 800770e:	d179      	bne.n	8007804 <_strtod_l+0x2ac>
 8007710:	2401      	movs	r4, #1
 8007712:	e072      	b.n	80077fa <_strtod_l+0x2a2>
 8007714:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007716:	2908      	cmp	r1, #8
 8007718:	dc09      	bgt.n	800772e <_strtod_l+0x1d6>
 800771a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800771c:	4351      	muls	r1, r2
 800771e:	185b      	adds	r3, r3, r1
 8007720:	930b      	str	r3, [sp, #44]	; 0x2c
 8007722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007724:	3001      	adds	r0, #1
 8007726:	3301      	adds	r3, #1
 8007728:	9309      	str	r3, [sp, #36]	; 0x24
 800772a:	901f      	str	r0, [sp, #124]	; 0x7c
 800772c:	e7c3      	b.n	80076b6 <_strtod_l+0x15e>
 800772e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007730:	4351      	muls	r1, r2
 8007732:	185b      	adds	r3, r3, r1
 8007734:	930f      	str	r3, [sp, #60]	; 0x3c
 8007736:	e7f4      	b.n	8007722 <_strtod_l+0x1ca>
 8007738:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800773a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800773c:	191c      	adds	r4, r3, r4
 800773e:	941f      	str	r4, [sp, #124]	; 0x7c
 8007740:	7823      	ldrb	r3, [r4, #0]
 8007742:	2a00      	cmp	r2, #0
 8007744:	d039      	beq.n	80077ba <_strtod_l+0x262>
 8007746:	900c      	str	r0, [sp, #48]	; 0x30
 8007748:	9206      	str	r2, [sp, #24]
 800774a:	001a      	movs	r2, r3
 800774c:	3a30      	subs	r2, #48	; 0x30
 800774e:	2a09      	cmp	r2, #9
 8007750:	d912      	bls.n	8007778 <_strtod_l+0x220>
 8007752:	2201      	movs	r2, #1
 8007754:	4694      	mov	ip, r2
 8007756:	e7c1      	b.n	80076dc <_strtod_l+0x184>
 8007758:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800775a:	3001      	adds	r0, #1
 800775c:	1c5a      	adds	r2, r3, #1
 800775e:	921f      	str	r2, [sp, #124]	; 0x7c
 8007760:	785b      	ldrb	r3, [r3, #1]
 8007762:	2b30      	cmp	r3, #48	; 0x30
 8007764:	d0f8      	beq.n	8007758 <_strtod_l+0x200>
 8007766:	001a      	movs	r2, r3
 8007768:	3a31      	subs	r2, #49	; 0x31
 800776a:	2a08      	cmp	r2, #8
 800776c:	d83f      	bhi.n	80077ee <_strtod_l+0x296>
 800776e:	900c      	str	r0, [sp, #48]	; 0x30
 8007770:	2000      	movs	r0, #0
 8007772:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007774:	9006      	str	r0, [sp, #24]
 8007776:	9210      	str	r2, [sp, #64]	; 0x40
 8007778:	001a      	movs	r2, r3
 800777a:	1c41      	adds	r1, r0, #1
 800777c:	3a30      	subs	r2, #48	; 0x30
 800777e:	2b30      	cmp	r3, #48	; 0x30
 8007780:	d015      	beq.n	80077ae <_strtod_l+0x256>
 8007782:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007784:	185b      	adds	r3, r3, r1
 8007786:	210a      	movs	r1, #10
 8007788:	930c      	str	r3, [sp, #48]	; 0x30
 800778a:	9b06      	ldr	r3, [sp, #24]
 800778c:	18c4      	adds	r4, r0, r3
 800778e:	42a3      	cmp	r3, r4
 8007790:	d115      	bne.n	80077be <_strtod_l+0x266>
 8007792:	9906      	ldr	r1, [sp, #24]
 8007794:	9b06      	ldr	r3, [sp, #24]
 8007796:	3101      	adds	r1, #1
 8007798:	1809      	adds	r1, r1, r0
 800779a:	181b      	adds	r3, r3, r0
 800779c:	9106      	str	r1, [sp, #24]
 800779e:	2b08      	cmp	r3, #8
 80077a0:	dc1b      	bgt.n	80077da <_strtod_l+0x282>
 80077a2:	230a      	movs	r3, #10
 80077a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80077a6:	434b      	muls	r3, r1
 80077a8:	2100      	movs	r1, #0
 80077aa:	18d3      	adds	r3, r2, r3
 80077ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80077ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80077b0:	0008      	movs	r0, r1
 80077b2:	1c5a      	adds	r2, r3, #1
 80077b4:	921f      	str	r2, [sp, #124]	; 0x7c
 80077b6:	785b      	ldrb	r3, [r3, #1]
 80077b8:	e7c7      	b.n	800774a <_strtod_l+0x1f2>
 80077ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077bc:	e7d1      	b.n	8007762 <_strtod_l+0x20a>
 80077be:	2b08      	cmp	r3, #8
 80077c0:	dc04      	bgt.n	80077cc <_strtod_l+0x274>
 80077c2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80077c4:	434d      	muls	r5, r1
 80077c6:	950b      	str	r5, [sp, #44]	; 0x2c
 80077c8:	3301      	adds	r3, #1
 80077ca:	e7e0      	b.n	800778e <_strtod_l+0x236>
 80077cc:	1c5d      	adds	r5, r3, #1
 80077ce:	2d10      	cmp	r5, #16
 80077d0:	dcfa      	bgt.n	80077c8 <_strtod_l+0x270>
 80077d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80077d4:	434d      	muls	r5, r1
 80077d6:	950f      	str	r5, [sp, #60]	; 0x3c
 80077d8:	e7f6      	b.n	80077c8 <_strtod_l+0x270>
 80077da:	9b06      	ldr	r3, [sp, #24]
 80077dc:	2100      	movs	r1, #0
 80077de:	2b10      	cmp	r3, #16
 80077e0:	dce5      	bgt.n	80077ae <_strtod_l+0x256>
 80077e2:	230a      	movs	r3, #10
 80077e4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80077e6:	4343      	muls	r3, r0
 80077e8:	18d3      	adds	r3, r2, r3
 80077ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80077ec:	e7df      	b.n	80077ae <_strtod_l+0x256>
 80077ee:	2200      	movs	r2, #0
 80077f0:	920c      	str	r2, [sp, #48]	; 0x30
 80077f2:	9206      	str	r2, [sp, #24]
 80077f4:	3201      	adds	r2, #1
 80077f6:	e7ad      	b.n	8007754 <_strtod_l+0x1fc>
 80077f8:	2400      	movs	r4, #0
 80077fa:	9b08      	ldr	r3, [sp, #32]
 80077fc:	3302      	adds	r3, #2
 80077fe:	931f      	str	r3, [sp, #124]	; 0x7c
 8007800:	9b08      	ldr	r3, [sp, #32]
 8007802:	789b      	ldrb	r3, [r3, #2]
 8007804:	001a      	movs	r2, r3
 8007806:	3a30      	subs	r2, #48	; 0x30
 8007808:	2a09      	cmp	r2, #9
 800780a:	d913      	bls.n	8007834 <_strtod_l+0x2dc>
 800780c:	9a08      	ldr	r2, [sp, #32]
 800780e:	921f      	str	r2, [sp, #124]	; 0x7c
 8007810:	2200      	movs	r2, #0
 8007812:	e031      	b.n	8007878 <_strtod_l+0x320>
 8007814:	0800bee8 	.word	0x0800bee8
 8007818:	0800bca0 	.word	0x0800bca0
 800781c:	ffefffff 	.word	0xffefffff
 8007820:	00000433 	.word	0x00000433
 8007824:	7ff00000 	.word	0x7ff00000
 8007828:	7fffffff 	.word	0x7fffffff
 800782c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800782e:	1c5a      	adds	r2, r3, #1
 8007830:	921f      	str	r2, [sp, #124]	; 0x7c
 8007832:	785b      	ldrb	r3, [r3, #1]
 8007834:	2b30      	cmp	r3, #48	; 0x30
 8007836:	d0f9      	beq.n	800782c <_strtod_l+0x2d4>
 8007838:	2200      	movs	r2, #0
 800783a:	9207      	str	r2, [sp, #28]
 800783c:	001a      	movs	r2, r3
 800783e:	3a31      	subs	r2, #49	; 0x31
 8007840:	2a08      	cmp	r2, #8
 8007842:	d81a      	bhi.n	800787a <_strtod_l+0x322>
 8007844:	3b30      	subs	r3, #48	; 0x30
 8007846:	001a      	movs	r2, r3
 8007848:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800784a:	9307      	str	r3, [sp, #28]
 800784c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800784e:	1c59      	adds	r1, r3, #1
 8007850:	911f      	str	r1, [sp, #124]	; 0x7c
 8007852:	785b      	ldrb	r3, [r3, #1]
 8007854:	001d      	movs	r5, r3
 8007856:	3d30      	subs	r5, #48	; 0x30
 8007858:	2d09      	cmp	r5, #9
 800785a:	d939      	bls.n	80078d0 <_strtod_l+0x378>
 800785c:	9d07      	ldr	r5, [sp, #28]
 800785e:	1b49      	subs	r1, r1, r5
 8007860:	4db0      	ldr	r5, [pc, #704]	; (8007b24 <_strtod_l+0x5cc>)
 8007862:	9507      	str	r5, [sp, #28]
 8007864:	2908      	cmp	r1, #8
 8007866:	dc03      	bgt.n	8007870 <_strtod_l+0x318>
 8007868:	9207      	str	r2, [sp, #28]
 800786a:	42aa      	cmp	r2, r5
 800786c:	dd00      	ble.n	8007870 <_strtod_l+0x318>
 800786e:	9507      	str	r5, [sp, #28]
 8007870:	2c00      	cmp	r4, #0
 8007872:	d002      	beq.n	800787a <_strtod_l+0x322>
 8007874:	9a07      	ldr	r2, [sp, #28]
 8007876:	4252      	negs	r2, r2
 8007878:	9207      	str	r2, [sp, #28]
 800787a:	9a06      	ldr	r2, [sp, #24]
 800787c:	2a00      	cmp	r2, #0
 800787e:	d14b      	bne.n	8007918 <_strtod_l+0x3c0>
 8007880:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007882:	4310      	orrs	r0, r2
 8007884:	d000      	beq.n	8007888 <_strtod_l+0x330>
 8007886:	e6ae      	b.n	80075e6 <_strtod_l+0x8e>
 8007888:	4662      	mov	r2, ip
 800788a:	2a00      	cmp	r2, #0
 800788c:	d000      	beq.n	8007890 <_strtod_l+0x338>
 800788e:	e6c9      	b.n	8007624 <_strtod_l+0xcc>
 8007890:	2b69      	cmp	r3, #105	; 0x69
 8007892:	d025      	beq.n	80078e0 <_strtod_l+0x388>
 8007894:	dc21      	bgt.n	80078da <_strtod_l+0x382>
 8007896:	2b49      	cmp	r3, #73	; 0x49
 8007898:	d022      	beq.n	80078e0 <_strtod_l+0x388>
 800789a:	2b4e      	cmp	r3, #78	; 0x4e
 800789c:	d000      	beq.n	80078a0 <_strtod_l+0x348>
 800789e:	e6c1      	b.n	8007624 <_strtod_l+0xcc>
 80078a0:	49a1      	ldr	r1, [pc, #644]	; (8007b28 <_strtod_l+0x5d0>)
 80078a2:	a81f      	add	r0, sp, #124	; 0x7c
 80078a4:	f001 fe8a 	bl	80095bc <__match>
 80078a8:	2800      	cmp	r0, #0
 80078aa:	d100      	bne.n	80078ae <_strtod_l+0x356>
 80078ac:	e6ba      	b.n	8007624 <_strtod_l+0xcc>
 80078ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	2b28      	cmp	r3, #40	; 0x28
 80078b4:	d12a      	bne.n	800790c <_strtod_l+0x3b4>
 80078b6:	499d      	ldr	r1, [pc, #628]	; (8007b2c <_strtod_l+0x5d4>)
 80078b8:	aa22      	add	r2, sp, #136	; 0x88
 80078ba:	a81f      	add	r0, sp, #124	; 0x7c
 80078bc:	f001 fe92 	bl	80095e4 <__hexnan>
 80078c0:	2805      	cmp	r0, #5
 80078c2:	d123      	bne.n	800790c <_strtod_l+0x3b4>
 80078c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80078c6:	4a9a      	ldr	r2, [pc, #616]	; (8007b30 <_strtod_l+0x5d8>)
 80078c8:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80078ca:	431a      	orrs	r2, r3
 80078cc:	0017      	movs	r7, r2
 80078ce:	e68a      	b.n	80075e6 <_strtod_l+0x8e>
 80078d0:	210a      	movs	r1, #10
 80078d2:	434a      	muls	r2, r1
 80078d4:	18d2      	adds	r2, r2, r3
 80078d6:	3a30      	subs	r2, #48	; 0x30
 80078d8:	e7b8      	b.n	800784c <_strtod_l+0x2f4>
 80078da:	2b6e      	cmp	r3, #110	; 0x6e
 80078dc:	d0e0      	beq.n	80078a0 <_strtod_l+0x348>
 80078de:	e6a1      	b.n	8007624 <_strtod_l+0xcc>
 80078e0:	4994      	ldr	r1, [pc, #592]	; (8007b34 <_strtod_l+0x5dc>)
 80078e2:	a81f      	add	r0, sp, #124	; 0x7c
 80078e4:	f001 fe6a 	bl	80095bc <__match>
 80078e8:	2800      	cmp	r0, #0
 80078ea:	d100      	bne.n	80078ee <_strtod_l+0x396>
 80078ec:	e69a      	b.n	8007624 <_strtod_l+0xcc>
 80078ee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80078f0:	4991      	ldr	r1, [pc, #580]	; (8007b38 <_strtod_l+0x5e0>)
 80078f2:	3b01      	subs	r3, #1
 80078f4:	a81f      	add	r0, sp, #124	; 0x7c
 80078f6:	931f      	str	r3, [sp, #124]	; 0x7c
 80078f8:	f001 fe60 	bl	80095bc <__match>
 80078fc:	2800      	cmp	r0, #0
 80078fe:	d102      	bne.n	8007906 <_strtod_l+0x3ae>
 8007900:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007902:	3301      	adds	r3, #1
 8007904:	931f      	str	r3, [sp, #124]	; 0x7c
 8007906:	2600      	movs	r6, #0
 8007908:	4f89      	ldr	r7, [pc, #548]	; (8007b30 <_strtod_l+0x5d8>)
 800790a:	e66c      	b.n	80075e6 <_strtod_l+0x8e>
 800790c:	488b      	ldr	r0, [pc, #556]	; (8007b3c <_strtod_l+0x5e4>)
 800790e:	f003 f9e3 	bl	800acd8 <nan>
 8007912:	0006      	movs	r6, r0
 8007914:	000f      	movs	r7, r1
 8007916:	e666      	b.n	80075e6 <_strtod_l+0x8e>
 8007918:	9b07      	ldr	r3, [sp, #28]
 800791a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800791c:	1a9b      	subs	r3, r3, r2
 800791e:	930a      	str	r3, [sp, #40]	; 0x28
 8007920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007922:	2b00      	cmp	r3, #0
 8007924:	d101      	bne.n	800792a <_strtod_l+0x3d2>
 8007926:	9b06      	ldr	r3, [sp, #24]
 8007928:	9309      	str	r3, [sp, #36]	; 0x24
 800792a:	9c06      	ldr	r4, [sp, #24]
 800792c:	2c10      	cmp	r4, #16
 800792e:	dd00      	ble.n	8007932 <_strtod_l+0x3da>
 8007930:	2410      	movs	r4, #16
 8007932:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007934:	f7fb f9d4 	bl	8002ce0 <__aeabi_ui2d>
 8007938:	9b06      	ldr	r3, [sp, #24]
 800793a:	0006      	movs	r6, r0
 800793c:	000f      	movs	r7, r1
 800793e:	2b09      	cmp	r3, #9
 8007940:	dd15      	ble.n	800796e <_strtod_l+0x416>
 8007942:	0022      	movs	r2, r4
 8007944:	4b7e      	ldr	r3, [pc, #504]	; (8007b40 <_strtod_l+0x5e8>)
 8007946:	3a09      	subs	r2, #9
 8007948:	00d2      	lsls	r2, r2, #3
 800794a:	189b      	adds	r3, r3, r2
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	f7fa fb44 	bl	8001fdc <__aeabi_dmul>
 8007954:	0006      	movs	r6, r0
 8007956:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007958:	000f      	movs	r7, r1
 800795a:	f7fb f9c1 	bl	8002ce0 <__aeabi_ui2d>
 800795e:	0002      	movs	r2, r0
 8007960:	000b      	movs	r3, r1
 8007962:	0030      	movs	r0, r6
 8007964:	0039      	movs	r1, r7
 8007966:	f7f9 fbfb 	bl	8001160 <__aeabi_dadd>
 800796a:	0006      	movs	r6, r0
 800796c:	000f      	movs	r7, r1
 800796e:	9b06      	ldr	r3, [sp, #24]
 8007970:	2b0f      	cmp	r3, #15
 8007972:	dc39      	bgt.n	80079e8 <_strtod_l+0x490>
 8007974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007976:	2b00      	cmp	r3, #0
 8007978:	d100      	bne.n	800797c <_strtod_l+0x424>
 800797a:	e634      	b.n	80075e6 <_strtod_l+0x8e>
 800797c:	dd24      	ble.n	80079c8 <_strtod_l+0x470>
 800797e:	2b16      	cmp	r3, #22
 8007980:	dc09      	bgt.n	8007996 <_strtod_l+0x43e>
 8007982:	496f      	ldr	r1, [pc, #444]	; (8007b40 <_strtod_l+0x5e8>)
 8007984:	00db      	lsls	r3, r3, #3
 8007986:	18c9      	adds	r1, r1, r3
 8007988:	0032      	movs	r2, r6
 800798a:	6808      	ldr	r0, [r1, #0]
 800798c:	6849      	ldr	r1, [r1, #4]
 800798e:	003b      	movs	r3, r7
 8007990:	f7fa fb24 	bl	8001fdc <__aeabi_dmul>
 8007994:	e7bd      	b.n	8007912 <_strtod_l+0x3ba>
 8007996:	2325      	movs	r3, #37	; 0x25
 8007998:	9a06      	ldr	r2, [sp, #24]
 800799a:	1a9b      	subs	r3, r3, r2
 800799c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800799e:	4293      	cmp	r3, r2
 80079a0:	db22      	blt.n	80079e8 <_strtod_l+0x490>
 80079a2:	240f      	movs	r4, #15
 80079a4:	9b06      	ldr	r3, [sp, #24]
 80079a6:	4d66      	ldr	r5, [pc, #408]	; (8007b40 <_strtod_l+0x5e8>)
 80079a8:	1ae4      	subs	r4, r4, r3
 80079aa:	00e1      	lsls	r1, r4, #3
 80079ac:	1869      	adds	r1, r5, r1
 80079ae:	0032      	movs	r2, r6
 80079b0:	6808      	ldr	r0, [r1, #0]
 80079b2:	6849      	ldr	r1, [r1, #4]
 80079b4:	003b      	movs	r3, r7
 80079b6:	f7fa fb11 	bl	8001fdc <__aeabi_dmul>
 80079ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079bc:	1b1c      	subs	r4, r3, r4
 80079be:	00e4      	lsls	r4, r4, #3
 80079c0:	192c      	adds	r4, r5, r4
 80079c2:	6822      	ldr	r2, [r4, #0]
 80079c4:	6863      	ldr	r3, [r4, #4]
 80079c6:	e7e3      	b.n	8007990 <_strtod_l+0x438>
 80079c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079ca:	3316      	adds	r3, #22
 80079cc:	db0c      	blt.n	80079e8 <_strtod_l+0x490>
 80079ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079d0:	9a07      	ldr	r2, [sp, #28]
 80079d2:	0030      	movs	r0, r6
 80079d4:	1a9a      	subs	r2, r3, r2
 80079d6:	4b5a      	ldr	r3, [pc, #360]	; (8007b40 <_strtod_l+0x5e8>)
 80079d8:	00d2      	lsls	r2, r2, #3
 80079da:	189b      	adds	r3, r3, r2
 80079dc:	0039      	movs	r1, r7
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	f7f9 fef9 	bl	80017d8 <__aeabi_ddiv>
 80079e6:	e794      	b.n	8007912 <_strtod_l+0x3ba>
 80079e8:	9b06      	ldr	r3, [sp, #24]
 80079ea:	1b1c      	subs	r4, r3, r4
 80079ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079ee:	18e4      	adds	r4, r4, r3
 80079f0:	2c00      	cmp	r4, #0
 80079f2:	dd72      	ble.n	8007ada <_strtod_l+0x582>
 80079f4:	230f      	movs	r3, #15
 80079f6:	0021      	movs	r1, r4
 80079f8:	4019      	ands	r1, r3
 80079fa:	421c      	tst	r4, r3
 80079fc:	d00a      	beq.n	8007a14 <_strtod_l+0x4bc>
 80079fe:	00cb      	lsls	r3, r1, #3
 8007a00:	494f      	ldr	r1, [pc, #316]	; (8007b40 <_strtod_l+0x5e8>)
 8007a02:	0032      	movs	r2, r6
 8007a04:	18c9      	adds	r1, r1, r3
 8007a06:	6808      	ldr	r0, [r1, #0]
 8007a08:	6849      	ldr	r1, [r1, #4]
 8007a0a:	003b      	movs	r3, r7
 8007a0c:	f7fa fae6 	bl	8001fdc <__aeabi_dmul>
 8007a10:	0006      	movs	r6, r0
 8007a12:	000f      	movs	r7, r1
 8007a14:	230f      	movs	r3, #15
 8007a16:	439c      	bics	r4, r3
 8007a18:	d04a      	beq.n	8007ab0 <_strtod_l+0x558>
 8007a1a:	3326      	adds	r3, #38	; 0x26
 8007a1c:	33ff      	adds	r3, #255	; 0xff
 8007a1e:	429c      	cmp	r4, r3
 8007a20:	dd22      	ble.n	8007a68 <_strtod_l+0x510>
 8007a22:	2300      	movs	r3, #0
 8007a24:	9306      	str	r3, [sp, #24]
 8007a26:	9307      	str	r3, [sp, #28]
 8007a28:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a2a:	9309      	str	r3, [sp, #36]	; 0x24
 8007a2c:	2322      	movs	r3, #34	; 0x22
 8007a2e:	2600      	movs	r6, #0
 8007a30:	9a05      	ldr	r2, [sp, #20]
 8007a32:	4f3f      	ldr	r7, [pc, #252]	; (8007b30 <_strtod_l+0x5d8>)
 8007a34:	6013      	str	r3, [r2, #0]
 8007a36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a38:	42b3      	cmp	r3, r6
 8007a3a:	d100      	bne.n	8007a3e <_strtod_l+0x4e6>
 8007a3c:	e5d3      	b.n	80075e6 <_strtod_l+0x8e>
 8007a3e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007a40:	9805      	ldr	r0, [sp, #20]
 8007a42:	f001 ff03 	bl	800984c <_Bfree>
 8007a46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a48:	9805      	ldr	r0, [sp, #20]
 8007a4a:	f001 feff 	bl	800984c <_Bfree>
 8007a4e:	9907      	ldr	r1, [sp, #28]
 8007a50:	9805      	ldr	r0, [sp, #20]
 8007a52:	f001 fefb 	bl	800984c <_Bfree>
 8007a56:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a58:	9805      	ldr	r0, [sp, #20]
 8007a5a:	f001 fef7 	bl	800984c <_Bfree>
 8007a5e:	9906      	ldr	r1, [sp, #24]
 8007a60:	9805      	ldr	r0, [sp, #20]
 8007a62:	f001 fef3 	bl	800984c <_Bfree>
 8007a66:	e5be      	b.n	80075e6 <_strtod_l+0x8e>
 8007a68:	2300      	movs	r3, #0
 8007a6a:	0030      	movs	r0, r6
 8007a6c:	0039      	movs	r1, r7
 8007a6e:	4d35      	ldr	r5, [pc, #212]	; (8007b44 <_strtod_l+0x5ec>)
 8007a70:	1124      	asrs	r4, r4, #4
 8007a72:	9308      	str	r3, [sp, #32]
 8007a74:	2c01      	cmp	r4, #1
 8007a76:	dc1e      	bgt.n	8007ab6 <_strtod_l+0x55e>
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d001      	beq.n	8007a80 <_strtod_l+0x528>
 8007a7c:	0006      	movs	r6, r0
 8007a7e:	000f      	movs	r7, r1
 8007a80:	4b31      	ldr	r3, [pc, #196]	; (8007b48 <_strtod_l+0x5f0>)
 8007a82:	0032      	movs	r2, r6
 8007a84:	18ff      	adds	r7, r7, r3
 8007a86:	9b08      	ldr	r3, [sp, #32]
 8007a88:	00dd      	lsls	r5, r3, #3
 8007a8a:	4b2e      	ldr	r3, [pc, #184]	; (8007b44 <_strtod_l+0x5ec>)
 8007a8c:	195d      	adds	r5, r3, r5
 8007a8e:	6828      	ldr	r0, [r5, #0]
 8007a90:	6869      	ldr	r1, [r5, #4]
 8007a92:	003b      	movs	r3, r7
 8007a94:	f7fa faa2 	bl	8001fdc <__aeabi_dmul>
 8007a98:	4b25      	ldr	r3, [pc, #148]	; (8007b30 <_strtod_l+0x5d8>)
 8007a9a:	4a2c      	ldr	r2, [pc, #176]	; (8007b4c <_strtod_l+0x5f4>)
 8007a9c:	0006      	movs	r6, r0
 8007a9e:	400b      	ands	r3, r1
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d8be      	bhi.n	8007a22 <_strtod_l+0x4ca>
 8007aa4:	4a2a      	ldr	r2, [pc, #168]	; (8007b50 <_strtod_l+0x5f8>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d913      	bls.n	8007ad2 <_strtod_l+0x57a>
 8007aaa:	2601      	movs	r6, #1
 8007aac:	4f29      	ldr	r7, [pc, #164]	; (8007b54 <_strtod_l+0x5fc>)
 8007aae:	4276      	negs	r6, r6
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	9308      	str	r3, [sp, #32]
 8007ab4:	e087      	b.n	8007bc6 <_strtod_l+0x66e>
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	4214      	tst	r4, r2
 8007aba:	d004      	beq.n	8007ac6 <_strtod_l+0x56e>
 8007abc:	682a      	ldr	r2, [r5, #0]
 8007abe:	686b      	ldr	r3, [r5, #4]
 8007ac0:	f7fa fa8c 	bl	8001fdc <__aeabi_dmul>
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	9a08      	ldr	r2, [sp, #32]
 8007ac8:	1064      	asrs	r4, r4, #1
 8007aca:	3201      	adds	r2, #1
 8007acc:	9208      	str	r2, [sp, #32]
 8007ace:	3508      	adds	r5, #8
 8007ad0:	e7d0      	b.n	8007a74 <_strtod_l+0x51c>
 8007ad2:	23d4      	movs	r3, #212	; 0xd4
 8007ad4:	049b      	lsls	r3, r3, #18
 8007ad6:	18cf      	adds	r7, r1, r3
 8007ad8:	e7ea      	b.n	8007ab0 <_strtod_l+0x558>
 8007ada:	2c00      	cmp	r4, #0
 8007adc:	d0e8      	beq.n	8007ab0 <_strtod_l+0x558>
 8007ade:	4264      	negs	r4, r4
 8007ae0:	220f      	movs	r2, #15
 8007ae2:	0023      	movs	r3, r4
 8007ae4:	4013      	ands	r3, r2
 8007ae6:	4214      	tst	r4, r2
 8007ae8:	d00a      	beq.n	8007b00 <_strtod_l+0x5a8>
 8007aea:	00da      	lsls	r2, r3, #3
 8007aec:	4b14      	ldr	r3, [pc, #80]	; (8007b40 <_strtod_l+0x5e8>)
 8007aee:	0030      	movs	r0, r6
 8007af0:	189b      	adds	r3, r3, r2
 8007af2:	0039      	movs	r1, r7
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	f7f9 fe6e 	bl	80017d8 <__aeabi_ddiv>
 8007afc:	0006      	movs	r6, r0
 8007afe:	000f      	movs	r7, r1
 8007b00:	1124      	asrs	r4, r4, #4
 8007b02:	d0d5      	beq.n	8007ab0 <_strtod_l+0x558>
 8007b04:	2c1f      	cmp	r4, #31
 8007b06:	dd27      	ble.n	8007b58 <_strtod_l+0x600>
 8007b08:	2300      	movs	r3, #0
 8007b0a:	9306      	str	r3, [sp, #24]
 8007b0c:	9307      	str	r3, [sp, #28]
 8007b0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b10:	9309      	str	r3, [sp, #36]	; 0x24
 8007b12:	2322      	movs	r3, #34	; 0x22
 8007b14:	9a05      	ldr	r2, [sp, #20]
 8007b16:	2600      	movs	r6, #0
 8007b18:	6013      	str	r3, [r2, #0]
 8007b1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b1c:	2700      	movs	r7, #0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d18d      	bne.n	8007a3e <_strtod_l+0x4e6>
 8007b22:	e560      	b.n	80075e6 <_strtod_l+0x8e>
 8007b24:	00004e1f 	.word	0x00004e1f
 8007b28:	0800bc75 	.word	0x0800bc75
 8007b2c:	0800bcb4 	.word	0x0800bcb4
 8007b30:	7ff00000 	.word	0x7ff00000
 8007b34:	0800bc6d 	.word	0x0800bc6d
 8007b38:	0800bdf4 	.word	0x0800bdf4
 8007b3c:	0800c0bb 	.word	0x0800c0bb
 8007b40:	0800bf80 	.word	0x0800bf80
 8007b44:	0800bf58 	.word	0x0800bf58
 8007b48:	fcb00000 	.word	0xfcb00000
 8007b4c:	7ca00000 	.word	0x7ca00000
 8007b50:	7c900000 	.word	0x7c900000
 8007b54:	7fefffff 	.word	0x7fefffff
 8007b58:	2310      	movs	r3, #16
 8007b5a:	0022      	movs	r2, r4
 8007b5c:	401a      	ands	r2, r3
 8007b5e:	9208      	str	r2, [sp, #32]
 8007b60:	421c      	tst	r4, r3
 8007b62:	d001      	beq.n	8007b68 <_strtod_l+0x610>
 8007b64:	335a      	adds	r3, #90	; 0x5a
 8007b66:	9308      	str	r3, [sp, #32]
 8007b68:	0030      	movs	r0, r6
 8007b6a:	0039      	movs	r1, r7
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	4dc5      	ldr	r5, [pc, #788]	; (8007e84 <_strtod_l+0x92c>)
 8007b70:	2201      	movs	r2, #1
 8007b72:	4214      	tst	r4, r2
 8007b74:	d004      	beq.n	8007b80 <_strtod_l+0x628>
 8007b76:	682a      	ldr	r2, [r5, #0]
 8007b78:	686b      	ldr	r3, [r5, #4]
 8007b7a:	f7fa fa2f 	bl	8001fdc <__aeabi_dmul>
 8007b7e:	2301      	movs	r3, #1
 8007b80:	1064      	asrs	r4, r4, #1
 8007b82:	3508      	adds	r5, #8
 8007b84:	2c00      	cmp	r4, #0
 8007b86:	d1f3      	bne.n	8007b70 <_strtod_l+0x618>
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d001      	beq.n	8007b90 <_strtod_l+0x638>
 8007b8c:	0006      	movs	r6, r0
 8007b8e:	000f      	movs	r7, r1
 8007b90:	9b08      	ldr	r3, [sp, #32]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d00f      	beq.n	8007bb6 <_strtod_l+0x65e>
 8007b96:	236b      	movs	r3, #107	; 0x6b
 8007b98:	007a      	lsls	r2, r7, #1
 8007b9a:	0d52      	lsrs	r2, r2, #21
 8007b9c:	0039      	movs	r1, r7
 8007b9e:	1a9b      	subs	r3, r3, r2
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	dd08      	ble.n	8007bb6 <_strtod_l+0x65e>
 8007ba4:	2b1f      	cmp	r3, #31
 8007ba6:	dc00      	bgt.n	8007baa <_strtod_l+0x652>
 8007ba8:	e124      	b.n	8007df4 <_strtod_l+0x89c>
 8007baa:	2600      	movs	r6, #0
 8007bac:	2b34      	cmp	r3, #52	; 0x34
 8007bae:	dc00      	bgt.n	8007bb2 <_strtod_l+0x65a>
 8007bb0:	e119      	b.n	8007de6 <_strtod_l+0x88e>
 8007bb2:	27dc      	movs	r7, #220	; 0xdc
 8007bb4:	04bf      	lsls	r7, r7, #18
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	2300      	movs	r3, #0
 8007bba:	0030      	movs	r0, r6
 8007bbc:	0039      	movs	r1, r7
 8007bbe:	f7f8 fc45 	bl	800044c <__aeabi_dcmpeq>
 8007bc2:	2800      	cmp	r0, #0
 8007bc4:	d1a0      	bne.n	8007b08 <_strtod_l+0x5b0>
 8007bc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bca:	9300      	str	r3, [sp, #0]
 8007bcc:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007bce:	9b06      	ldr	r3, [sp, #24]
 8007bd0:	9805      	ldr	r0, [sp, #20]
 8007bd2:	f001 fea3 	bl	800991c <__s2b>
 8007bd6:	900b      	str	r0, [sp, #44]	; 0x2c
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	d100      	bne.n	8007bde <_strtod_l+0x686>
 8007bdc:	e721      	b.n	8007a22 <_strtod_l+0x4ca>
 8007bde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007be0:	9907      	ldr	r1, [sp, #28]
 8007be2:	17da      	asrs	r2, r3, #31
 8007be4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007be6:	1a5b      	subs	r3, r3, r1
 8007be8:	401a      	ands	r2, r3
 8007bea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bec:	9215      	str	r2, [sp, #84]	; 0x54
 8007bee:	43db      	mvns	r3, r3
 8007bf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bf2:	17db      	asrs	r3, r3, #31
 8007bf4:	401a      	ands	r2, r3
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	921a      	str	r2, [sp, #104]	; 0x68
 8007bfa:	9306      	str	r3, [sp, #24]
 8007bfc:	9307      	str	r3, [sp, #28]
 8007bfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c00:	9805      	ldr	r0, [sp, #20]
 8007c02:	6859      	ldr	r1, [r3, #4]
 8007c04:	f001 fdde 	bl	80097c4 <_Balloc>
 8007c08:	9009      	str	r0, [sp, #36]	; 0x24
 8007c0a:	2800      	cmp	r0, #0
 8007c0c:	d100      	bne.n	8007c10 <_strtod_l+0x6b8>
 8007c0e:	e70d      	b.n	8007a2c <_strtod_l+0x4d4>
 8007c10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	310c      	adds	r1, #12
 8007c18:	1c9a      	adds	r2, r3, #2
 8007c1a:	0092      	lsls	r2, r2, #2
 8007c1c:	300c      	adds	r0, #12
 8007c1e:	930c      	str	r3, [sp, #48]	; 0x30
 8007c20:	f001 fdc7 	bl	80097b2 <memcpy>
 8007c24:	ab22      	add	r3, sp, #136	; 0x88
 8007c26:	9301      	str	r3, [sp, #4]
 8007c28:	ab21      	add	r3, sp, #132	; 0x84
 8007c2a:	9300      	str	r3, [sp, #0]
 8007c2c:	0032      	movs	r2, r6
 8007c2e:	003b      	movs	r3, r7
 8007c30:	9805      	ldr	r0, [sp, #20]
 8007c32:	9612      	str	r6, [sp, #72]	; 0x48
 8007c34:	9713      	str	r7, [sp, #76]	; 0x4c
 8007c36:	f002 f9bd 	bl	8009fb4 <__d2b>
 8007c3a:	9020      	str	r0, [sp, #128]	; 0x80
 8007c3c:	2800      	cmp	r0, #0
 8007c3e:	d100      	bne.n	8007c42 <_strtod_l+0x6ea>
 8007c40:	e6f4      	b.n	8007a2c <_strtod_l+0x4d4>
 8007c42:	2101      	movs	r1, #1
 8007c44:	9805      	ldr	r0, [sp, #20]
 8007c46:	f001 fefd 	bl	8009a44 <__i2b>
 8007c4a:	9007      	str	r0, [sp, #28]
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	d100      	bne.n	8007c52 <_strtod_l+0x6fa>
 8007c50:	e6ec      	b.n	8007a2c <_strtod_l+0x4d4>
 8007c52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c54:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007c56:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007c58:	1ad4      	subs	r4, r2, r3
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	db01      	blt.n	8007c62 <_strtod_l+0x70a>
 8007c5e:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8007c60:	195d      	adds	r5, r3, r5
 8007c62:	9908      	ldr	r1, [sp, #32]
 8007c64:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007c66:	1a5b      	subs	r3, r3, r1
 8007c68:	2136      	movs	r1, #54	; 0x36
 8007c6a:	189b      	adds	r3, r3, r2
 8007c6c:	1a8a      	subs	r2, r1, r2
 8007c6e:	4986      	ldr	r1, [pc, #536]	; (8007e88 <_strtod_l+0x930>)
 8007c70:	2001      	movs	r0, #1
 8007c72:	468c      	mov	ip, r1
 8007c74:	2100      	movs	r1, #0
 8007c76:	3b01      	subs	r3, #1
 8007c78:	9110      	str	r1, [sp, #64]	; 0x40
 8007c7a:	9014      	str	r0, [sp, #80]	; 0x50
 8007c7c:	4563      	cmp	r3, ip
 8007c7e:	da07      	bge.n	8007c90 <_strtod_l+0x738>
 8007c80:	4661      	mov	r1, ip
 8007c82:	1ac9      	subs	r1, r1, r3
 8007c84:	1a52      	subs	r2, r2, r1
 8007c86:	291f      	cmp	r1, #31
 8007c88:	dd00      	ble.n	8007c8c <_strtod_l+0x734>
 8007c8a:	e0b8      	b.n	8007dfe <_strtod_l+0x8a6>
 8007c8c:	4088      	lsls	r0, r1
 8007c8e:	9014      	str	r0, [sp, #80]	; 0x50
 8007c90:	18ab      	adds	r3, r5, r2
 8007c92:	930c      	str	r3, [sp, #48]	; 0x30
 8007c94:	18a4      	adds	r4, r4, r2
 8007c96:	9b08      	ldr	r3, [sp, #32]
 8007c98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c9a:	191c      	adds	r4, r3, r4
 8007c9c:	002b      	movs	r3, r5
 8007c9e:	4295      	cmp	r5, r2
 8007ca0:	dd00      	ble.n	8007ca4 <_strtod_l+0x74c>
 8007ca2:	0013      	movs	r3, r2
 8007ca4:	42a3      	cmp	r3, r4
 8007ca6:	dd00      	ble.n	8007caa <_strtod_l+0x752>
 8007ca8:	0023      	movs	r3, r4
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	dd04      	ble.n	8007cb8 <_strtod_l+0x760>
 8007cae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007cb0:	1ae4      	subs	r4, r4, r3
 8007cb2:	1ad2      	subs	r2, r2, r3
 8007cb4:	920c      	str	r2, [sp, #48]	; 0x30
 8007cb6:	1aed      	subs	r5, r5, r3
 8007cb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	dd17      	ble.n	8007cee <_strtod_l+0x796>
 8007cbe:	001a      	movs	r2, r3
 8007cc0:	9907      	ldr	r1, [sp, #28]
 8007cc2:	9805      	ldr	r0, [sp, #20]
 8007cc4:	f001 ff84 	bl	8009bd0 <__pow5mult>
 8007cc8:	9007      	str	r0, [sp, #28]
 8007cca:	2800      	cmp	r0, #0
 8007ccc:	d100      	bne.n	8007cd0 <_strtod_l+0x778>
 8007cce:	e6ad      	b.n	8007a2c <_strtod_l+0x4d4>
 8007cd0:	0001      	movs	r1, r0
 8007cd2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007cd4:	9805      	ldr	r0, [sp, #20]
 8007cd6:	f001 fecb 	bl	8009a70 <__multiply>
 8007cda:	900f      	str	r0, [sp, #60]	; 0x3c
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	d100      	bne.n	8007ce2 <_strtod_l+0x78a>
 8007ce0:	e6a4      	b.n	8007a2c <_strtod_l+0x4d4>
 8007ce2:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007ce4:	9805      	ldr	r0, [sp, #20]
 8007ce6:	f001 fdb1 	bl	800984c <_Bfree>
 8007cea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007cec:	9320      	str	r3, [sp, #128]	; 0x80
 8007cee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	dd00      	ble.n	8007cf6 <_strtod_l+0x79e>
 8007cf4:	e089      	b.n	8007e0a <_strtod_l+0x8b2>
 8007cf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	dd08      	ble.n	8007d0e <_strtod_l+0x7b6>
 8007cfc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007cfe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d00:	9805      	ldr	r0, [sp, #20]
 8007d02:	f001 ff65 	bl	8009bd0 <__pow5mult>
 8007d06:	9009      	str	r0, [sp, #36]	; 0x24
 8007d08:	2800      	cmp	r0, #0
 8007d0a:	d100      	bne.n	8007d0e <_strtod_l+0x7b6>
 8007d0c:	e68e      	b.n	8007a2c <_strtod_l+0x4d4>
 8007d0e:	2c00      	cmp	r4, #0
 8007d10:	dd08      	ble.n	8007d24 <_strtod_l+0x7cc>
 8007d12:	0022      	movs	r2, r4
 8007d14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d16:	9805      	ldr	r0, [sp, #20]
 8007d18:	f001 ffb6 	bl	8009c88 <__lshift>
 8007d1c:	9009      	str	r0, [sp, #36]	; 0x24
 8007d1e:	2800      	cmp	r0, #0
 8007d20:	d100      	bne.n	8007d24 <_strtod_l+0x7cc>
 8007d22:	e683      	b.n	8007a2c <_strtod_l+0x4d4>
 8007d24:	2d00      	cmp	r5, #0
 8007d26:	dd08      	ble.n	8007d3a <_strtod_l+0x7e2>
 8007d28:	002a      	movs	r2, r5
 8007d2a:	9907      	ldr	r1, [sp, #28]
 8007d2c:	9805      	ldr	r0, [sp, #20]
 8007d2e:	f001 ffab 	bl	8009c88 <__lshift>
 8007d32:	9007      	str	r0, [sp, #28]
 8007d34:	2800      	cmp	r0, #0
 8007d36:	d100      	bne.n	8007d3a <_strtod_l+0x7e2>
 8007d38:	e678      	b.n	8007a2c <_strtod_l+0x4d4>
 8007d3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d3c:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007d3e:	9805      	ldr	r0, [sp, #20]
 8007d40:	f002 f82c 	bl	8009d9c <__mdiff>
 8007d44:	9006      	str	r0, [sp, #24]
 8007d46:	2800      	cmp	r0, #0
 8007d48:	d100      	bne.n	8007d4c <_strtod_l+0x7f4>
 8007d4a:	e66f      	b.n	8007a2c <_strtod_l+0x4d4>
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	68c3      	ldr	r3, [r0, #12]
 8007d50:	9907      	ldr	r1, [sp, #28]
 8007d52:	60c2      	str	r2, [r0, #12]
 8007d54:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d56:	f002 f805 	bl	8009d64 <__mcmp>
 8007d5a:	2800      	cmp	r0, #0
 8007d5c:	da5f      	bge.n	8007e1e <_strtod_l+0x8c6>
 8007d5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d60:	4333      	orrs	r3, r6
 8007d62:	d000      	beq.n	8007d66 <_strtod_l+0x80e>
 8007d64:	e08a      	b.n	8007e7c <_strtod_l+0x924>
 8007d66:	033b      	lsls	r3, r7, #12
 8007d68:	d000      	beq.n	8007d6c <_strtod_l+0x814>
 8007d6a:	e087      	b.n	8007e7c <_strtod_l+0x924>
 8007d6c:	22d6      	movs	r2, #214	; 0xd6
 8007d6e:	4b47      	ldr	r3, [pc, #284]	; (8007e8c <_strtod_l+0x934>)
 8007d70:	04d2      	lsls	r2, r2, #19
 8007d72:	403b      	ands	r3, r7
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d800      	bhi.n	8007d7a <_strtod_l+0x822>
 8007d78:	e080      	b.n	8007e7c <_strtod_l+0x924>
 8007d7a:	9b06      	ldr	r3, [sp, #24]
 8007d7c:	695b      	ldr	r3, [r3, #20]
 8007d7e:	930a      	str	r3, [sp, #40]	; 0x28
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d104      	bne.n	8007d8e <_strtod_l+0x836>
 8007d84:	9b06      	ldr	r3, [sp, #24]
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	930a      	str	r3, [sp, #40]	; 0x28
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	dd76      	ble.n	8007e7c <_strtod_l+0x924>
 8007d8e:	9906      	ldr	r1, [sp, #24]
 8007d90:	2201      	movs	r2, #1
 8007d92:	9805      	ldr	r0, [sp, #20]
 8007d94:	f001 ff78 	bl	8009c88 <__lshift>
 8007d98:	9907      	ldr	r1, [sp, #28]
 8007d9a:	9006      	str	r0, [sp, #24]
 8007d9c:	f001 ffe2 	bl	8009d64 <__mcmp>
 8007da0:	2800      	cmp	r0, #0
 8007da2:	dd6b      	ble.n	8007e7c <_strtod_l+0x924>
 8007da4:	9908      	ldr	r1, [sp, #32]
 8007da6:	003b      	movs	r3, r7
 8007da8:	4a38      	ldr	r2, [pc, #224]	; (8007e8c <_strtod_l+0x934>)
 8007daa:	2900      	cmp	r1, #0
 8007dac:	d100      	bne.n	8007db0 <_strtod_l+0x858>
 8007dae:	e092      	b.n	8007ed6 <_strtod_l+0x97e>
 8007db0:	0011      	movs	r1, r2
 8007db2:	20d6      	movs	r0, #214	; 0xd6
 8007db4:	4039      	ands	r1, r7
 8007db6:	04c0      	lsls	r0, r0, #19
 8007db8:	4281      	cmp	r1, r0
 8007dba:	dd00      	ble.n	8007dbe <_strtod_l+0x866>
 8007dbc:	e08b      	b.n	8007ed6 <_strtod_l+0x97e>
 8007dbe:	23dc      	movs	r3, #220	; 0xdc
 8007dc0:	049b      	lsls	r3, r3, #18
 8007dc2:	4299      	cmp	r1, r3
 8007dc4:	dc00      	bgt.n	8007dc8 <_strtod_l+0x870>
 8007dc6:	e6a4      	b.n	8007b12 <_strtod_l+0x5ba>
 8007dc8:	0030      	movs	r0, r6
 8007dca:	0039      	movs	r1, r7
 8007dcc:	2200      	movs	r2, #0
 8007dce:	4b30      	ldr	r3, [pc, #192]	; (8007e90 <_strtod_l+0x938>)
 8007dd0:	f7fa f904 	bl	8001fdc <__aeabi_dmul>
 8007dd4:	0006      	movs	r6, r0
 8007dd6:	000f      	movs	r7, r1
 8007dd8:	4308      	orrs	r0, r1
 8007dda:	d000      	beq.n	8007dde <_strtod_l+0x886>
 8007ddc:	e62f      	b.n	8007a3e <_strtod_l+0x4e6>
 8007dde:	2322      	movs	r3, #34	; 0x22
 8007de0:	9a05      	ldr	r2, [sp, #20]
 8007de2:	6013      	str	r3, [r2, #0]
 8007de4:	e62b      	b.n	8007a3e <_strtod_l+0x4e6>
 8007de6:	234b      	movs	r3, #75	; 0x4b
 8007de8:	1a9a      	subs	r2, r3, r2
 8007dea:	3b4c      	subs	r3, #76	; 0x4c
 8007dec:	4093      	lsls	r3, r2
 8007dee:	4019      	ands	r1, r3
 8007df0:	000f      	movs	r7, r1
 8007df2:	e6e0      	b.n	8007bb6 <_strtod_l+0x65e>
 8007df4:	2201      	movs	r2, #1
 8007df6:	4252      	negs	r2, r2
 8007df8:	409a      	lsls	r2, r3
 8007dfa:	4016      	ands	r6, r2
 8007dfc:	e6db      	b.n	8007bb6 <_strtod_l+0x65e>
 8007dfe:	4925      	ldr	r1, [pc, #148]	; (8007e94 <_strtod_l+0x93c>)
 8007e00:	1acb      	subs	r3, r1, r3
 8007e02:	0001      	movs	r1, r0
 8007e04:	4099      	lsls	r1, r3
 8007e06:	9110      	str	r1, [sp, #64]	; 0x40
 8007e08:	e741      	b.n	8007c8e <_strtod_l+0x736>
 8007e0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e0c:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007e0e:	9805      	ldr	r0, [sp, #20]
 8007e10:	f001 ff3a 	bl	8009c88 <__lshift>
 8007e14:	9020      	str	r0, [sp, #128]	; 0x80
 8007e16:	2800      	cmp	r0, #0
 8007e18:	d000      	beq.n	8007e1c <_strtod_l+0x8c4>
 8007e1a:	e76c      	b.n	8007cf6 <_strtod_l+0x79e>
 8007e1c:	e606      	b.n	8007a2c <_strtod_l+0x4d4>
 8007e1e:	970c      	str	r7, [sp, #48]	; 0x30
 8007e20:	2800      	cmp	r0, #0
 8007e22:	d176      	bne.n	8007f12 <_strtod_l+0x9ba>
 8007e24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007e26:	033b      	lsls	r3, r7, #12
 8007e28:	0b1b      	lsrs	r3, r3, #12
 8007e2a:	2a00      	cmp	r2, #0
 8007e2c:	d038      	beq.n	8007ea0 <_strtod_l+0x948>
 8007e2e:	4a1a      	ldr	r2, [pc, #104]	; (8007e98 <_strtod_l+0x940>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d138      	bne.n	8007ea6 <_strtod_l+0x94e>
 8007e34:	2201      	movs	r2, #1
 8007e36:	9b08      	ldr	r3, [sp, #32]
 8007e38:	4252      	negs	r2, r2
 8007e3a:	0031      	movs	r1, r6
 8007e3c:	0010      	movs	r0, r2
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00b      	beq.n	8007e5a <_strtod_l+0x902>
 8007e42:	24d4      	movs	r4, #212	; 0xd4
 8007e44:	4b11      	ldr	r3, [pc, #68]	; (8007e8c <_strtod_l+0x934>)
 8007e46:	0010      	movs	r0, r2
 8007e48:	403b      	ands	r3, r7
 8007e4a:	04e4      	lsls	r4, r4, #19
 8007e4c:	42a3      	cmp	r3, r4
 8007e4e:	d804      	bhi.n	8007e5a <_strtod_l+0x902>
 8007e50:	306c      	adds	r0, #108	; 0x6c
 8007e52:	0d1b      	lsrs	r3, r3, #20
 8007e54:	1ac3      	subs	r3, r0, r3
 8007e56:	409a      	lsls	r2, r3
 8007e58:	0010      	movs	r0, r2
 8007e5a:	4281      	cmp	r1, r0
 8007e5c:	d123      	bne.n	8007ea6 <_strtod_l+0x94e>
 8007e5e:	4b0f      	ldr	r3, [pc, #60]	; (8007e9c <_strtod_l+0x944>)
 8007e60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d102      	bne.n	8007e6c <_strtod_l+0x914>
 8007e66:	1c4b      	adds	r3, r1, #1
 8007e68:	d100      	bne.n	8007e6c <_strtod_l+0x914>
 8007e6a:	e5df      	b.n	8007a2c <_strtod_l+0x4d4>
 8007e6c:	4b07      	ldr	r3, [pc, #28]	; (8007e8c <_strtod_l+0x934>)
 8007e6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e70:	2600      	movs	r6, #0
 8007e72:	401a      	ands	r2, r3
 8007e74:	0013      	movs	r3, r2
 8007e76:	2280      	movs	r2, #128	; 0x80
 8007e78:	0352      	lsls	r2, r2, #13
 8007e7a:	189f      	adds	r7, r3, r2
 8007e7c:	9b08      	ldr	r3, [sp, #32]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1a2      	bne.n	8007dc8 <_strtod_l+0x870>
 8007e82:	e5dc      	b.n	8007a3e <_strtod_l+0x4e6>
 8007e84:	0800bcc8 	.word	0x0800bcc8
 8007e88:	fffffc02 	.word	0xfffffc02
 8007e8c:	7ff00000 	.word	0x7ff00000
 8007e90:	39500000 	.word	0x39500000
 8007e94:	fffffbe2 	.word	0xfffffbe2
 8007e98:	000fffff 	.word	0x000fffff
 8007e9c:	7fefffff 	.word	0x7fefffff
 8007ea0:	4333      	orrs	r3, r6
 8007ea2:	d100      	bne.n	8007ea6 <_strtod_l+0x94e>
 8007ea4:	e77e      	b.n	8007da4 <_strtod_l+0x84c>
 8007ea6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d01d      	beq.n	8007ee8 <_strtod_l+0x990>
 8007eac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007eae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007eb0:	4213      	tst	r3, r2
 8007eb2:	d0e3      	beq.n	8007e7c <_strtod_l+0x924>
 8007eb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007eb6:	0030      	movs	r0, r6
 8007eb8:	0039      	movs	r1, r7
 8007eba:	9a08      	ldr	r2, [sp, #32]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d017      	beq.n	8007ef0 <_strtod_l+0x998>
 8007ec0:	f7ff fb32 	bl	8007528 <sulp>
 8007ec4:	0002      	movs	r2, r0
 8007ec6:	000b      	movs	r3, r1
 8007ec8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007eca:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007ecc:	f7f9 f948 	bl	8001160 <__aeabi_dadd>
 8007ed0:	0006      	movs	r6, r0
 8007ed2:	000f      	movs	r7, r1
 8007ed4:	e7d2      	b.n	8007e7c <_strtod_l+0x924>
 8007ed6:	2601      	movs	r6, #1
 8007ed8:	4013      	ands	r3, r2
 8007eda:	4a99      	ldr	r2, [pc, #612]	; (8008140 <_strtod_l+0xbe8>)
 8007edc:	4276      	negs	r6, r6
 8007ede:	189b      	adds	r3, r3, r2
 8007ee0:	4a98      	ldr	r2, [pc, #608]	; (8008144 <_strtod_l+0xbec>)
 8007ee2:	431a      	orrs	r2, r3
 8007ee4:	0017      	movs	r7, r2
 8007ee6:	e7c9      	b.n	8007e7c <_strtod_l+0x924>
 8007ee8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007eea:	4233      	tst	r3, r6
 8007eec:	d0c6      	beq.n	8007e7c <_strtod_l+0x924>
 8007eee:	e7e1      	b.n	8007eb4 <_strtod_l+0x95c>
 8007ef0:	f7ff fb1a 	bl	8007528 <sulp>
 8007ef4:	0002      	movs	r2, r0
 8007ef6:	000b      	movs	r3, r1
 8007ef8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007efa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007efc:	f7fa fada 	bl	80024b4 <__aeabi_dsub>
 8007f00:	2200      	movs	r2, #0
 8007f02:	2300      	movs	r3, #0
 8007f04:	0006      	movs	r6, r0
 8007f06:	000f      	movs	r7, r1
 8007f08:	f7f8 faa0 	bl	800044c <__aeabi_dcmpeq>
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	d0b5      	beq.n	8007e7c <_strtod_l+0x924>
 8007f10:	e5ff      	b.n	8007b12 <_strtod_l+0x5ba>
 8007f12:	9907      	ldr	r1, [sp, #28]
 8007f14:	9806      	ldr	r0, [sp, #24]
 8007f16:	f002 f8b1 	bl	800a07c <__ratio>
 8007f1a:	2380      	movs	r3, #128	; 0x80
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	05db      	lsls	r3, r3, #23
 8007f20:	0004      	movs	r4, r0
 8007f22:	000d      	movs	r5, r1
 8007f24:	f7f8 faa2 	bl	800046c <__aeabi_dcmple>
 8007f28:	2800      	cmp	r0, #0
 8007f2a:	d075      	beq.n	8008018 <_strtod_l+0xac0>
 8007f2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d047      	beq.n	8007fc2 <_strtod_l+0xa6a>
 8007f32:	2300      	movs	r3, #0
 8007f34:	4c84      	ldr	r4, [pc, #528]	; (8008148 <_strtod_l+0xbf0>)
 8007f36:	2500      	movs	r5, #0
 8007f38:	9310      	str	r3, [sp, #64]	; 0x40
 8007f3a:	9411      	str	r4, [sp, #68]	; 0x44
 8007f3c:	4c82      	ldr	r4, [pc, #520]	; (8008148 <_strtod_l+0xbf0>)
 8007f3e:	4a83      	ldr	r2, [pc, #524]	; (800814c <_strtod_l+0xbf4>)
 8007f40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f42:	4013      	ands	r3, r2
 8007f44:	9314      	str	r3, [sp, #80]	; 0x50
 8007f46:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007f48:	4b81      	ldr	r3, [pc, #516]	; (8008150 <_strtod_l+0xbf8>)
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d000      	beq.n	8007f50 <_strtod_l+0x9f8>
 8007f4e:	e0ac      	b.n	80080aa <_strtod_l+0xb52>
 8007f50:	4a80      	ldr	r2, [pc, #512]	; (8008154 <_strtod_l+0xbfc>)
 8007f52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f54:	4694      	mov	ip, r2
 8007f56:	4463      	add	r3, ip
 8007f58:	001f      	movs	r7, r3
 8007f5a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f5e:	0030      	movs	r0, r6
 8007f60:	0039      	movs	r1, r7
 8007f62:	920c      	str	r2, [sp, #48]	; 0x30
 8007f64:	930d      	str	r3, [sp, #52]	; 0x34
 8007f66:	f001 ffb1 	bl	8009ecc <__ulp>
 8007f6a:	0002      	movs	r2, r0
 8007f6c:	000b      	movs	r3, r1
 8007f6e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007f70:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007f72:	f7fa f833 	bl	8001fdc <__aeabi_dmul>
 8007f76:	0032      	movs	r2, r6
 8007f78:	003b      	movs	r3, r7
 8007f7a:	f7f9 f8f1 	bl	8001160 <__aeabi_dadd>
 8007f7e:	4a73      	ldr	r2, [pc, #460]	; (800814c <_strtod_l+0xbf4>)
 8007f80:	4b75      	ldr	r3, [pc, #468]	; (8008158 <_strtod_l+0xc00>)
 8007f82:	0006      	movs	r6, r0
 8007f84:	400a      	ands	r2, r1
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d95e      	bls.n	8008048 <_strtod_l+0xaf0>
 8007f8a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007f8c:	4b73      	ldr	r3, [pc, #460]	; (800815c <_strtod_l+0xc04>)
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d103      	bne.n	8007f9a <_strtod_l+0xa42>
 8007f92:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007f94:	3301      	adds	r3, #1
 8007f96:	d100      	bne.n	8007f9a <_strtod_l+0xa42>
 8007f98:	e548      	b.n	8007a2c <_strtod_l+0x4d4>
 8007f9a:	2601      	movs	r6, #1
 8007f9c:	4f6f      	ldr	r7, [pc, #444]	; (800815c <_strtod_l+0xc04>)
 8007f9e:	4276      	negs	r6, r6
 8007fa0:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007fa2:	9805      	ldr	r0, [sp, #20]
 8007fa4:	f001 fc52 	bl	800984c <_Bfree>
 8007fa8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007faa:	9805      	ldr	r0, [sp, #20]
 8007fac:	f001 fc4e 	bl	800984c <_Bfree>
 8007fb0:	9907      	ldr	r1, [sp, #28]
 8007fb2:	9805      	ldr	r0, [sp, #20]
 8007fb4:	f001 fc4a 	bl	800984c <_Bfree>
 8007fb8:	9906      	ldr	r1, [sp, #24]
 8007fba:	9805      	ldr	r0, [sp, #20]
 8007fbc:	f001 fc46 	bl	800984c <_Bfree>
 8007fc0:	e61d      	b.n	8007bfe <_strtod_l+0x6a6>
 8007fc2:	2e00      	cmp	r6, #0
 8007fc4:	d11c      	bne.n	8008000 <_strtod_l+0xaa8>
 8007fc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007fc8:	031b      	lsls	r3, r3, #12
 8007fca:	d11f      	bne.n	800800c <_strtod_l+0xab4>
 8007fcc:	2200      	movs	r2, #0
 8007fce:	0020      	movs	r0, r4
 8007fd0:	0029      	movs	r1, r5
 8007fd2:	4b5d      	ldr	r3, [pc, #372]	; (8008148 <_strtod_l+0xbf0>)
 8007fd4:	f7f8 fa40 	bl	8000458 <__aeabi_dcmplt>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	d11a      	bne.n	8008012 <_strtod_l+0xaba>
 8007fdc:	0020      	movs	r0, r4
 8007fde:	0029      	movs	r1, r5
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	4b5f      	ldr	r3, [pc, #380]	; (8008160 <_strtod_l+0xc08>)
 8007fe4:	f7f9 fffa 	bl	8001fdc <__aeabi_dmul>
 8007fe8:	0005      	movs	r5, r0
 8007fea:	000c      	movs	r4, r1
 8007fec:	2380      	movs	r3, #128	; 0x80
 8007fee:	061b      	lsls	r3, r3, #24
 8007ff0:	18e3      	adds	r3, r4, r3
 8007ff2:	951c      	str	r5, [sp, #112]	; 0x70
 8007ff4:	931d      	str	r3, [sp, #116]	; 0x74
 8007ff6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007ff8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007ffa:	9210      	str	r2, [sp, #64]	; 0x40
 8007ffc:	9311      	str	r3, [sp, #68]	; 0x44
 8007ffe:	e79e      	b.n	8007f3e <_strtod_l+0x9e6>
 8008000:	2e01      	cmp	r6, #1
 8008002:	d103      	bne.n	800800c <_strtod_l+0xab4>
 8008004:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008006:	2b00      	cmp	r3, #0
 8008008:	d100      	bne.n	800800c <_strtod_l+0xab4>
 800800a:	e582      	b.n	8007b12 <_strtod_l+0x5ba>
 800800c:	2300      	movs	r3, #0
 800800e:	4c55      	ldr	r4, [pc, #340]	; (8008164 <_strtod_l+0xc0c>)
 8008010:	e791      	b.n	8007f36 <_strtod_l+0x9de>
 8008012:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008014:	4c52      	ldr	r4, [pc, #328]	; (8008160 <_strtod_l+0xc08>)
 8008016:	e7e9      	b.n	8007fec <_strtod_l+0xa94>
 8008018:	2200      	movs	r2, #0
 800801a:	0020      	movs	r0, r4
 800801c:	0029      	movs	r1, r5
 800801e:	4b50      	ldr	r3, [pc, #320]	; (8008160 <_strtod_l+0xc08>)
 8008020:	f7f9 ffdc 	bl	8001fdc <__aeabi_dmul>
 8008024:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008026:	0005      	movs	r5, r0
 8008028:	000b      	movs	r3, r1
 800802a:	000c      	movs	r4, r1
 800802c:	2a00      	cmp	r2, #0
 800802e:	d107      	bne.n	8008040 <_strtod_l+0xae8>
 8008030:	2280      	movs	r2, #128	; 0x80
 8008032:	0612      	lsls	r2, r2, #24
 8008034:	188b      	adds	r3, r1, r2
 8008036:	9016      	str	r0, [sp, #88]	; 0x58
 8008038:	9317      	str	r3, [sp, #92]	; 0x5c
 800803a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800803c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800803e:	e7dc      	b.n	8007ffa <_strtod_l+0xaa2>
 8008040:	0002      	movs	r2, r0
 8008042:	9216      	str	r2, [sp, #88]	; 0x58
 8008044:	9317      	str	r3, [sp, #92]	; 0x5c
 8008046:	e7f8      	b.n	800803a <_strtod_l+0xae2>
 8008048:	23d4      	movs	r3, #212	; 0xd4
 800804a:	049b      	lsls	r3, r3, #18
 800804c:	18cf      	adds	r7, r1, r3
 800804e:	9b08      	ldr	r3, [sp, #32]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d1a5      	bne.n	8007fa0 <_strtod_l+0xa48>
 8008054:	4b3d      	ldr	r3, [pc, #244]	; (800814c <_strtod_l+0xbf4>)
 8008056:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008058:	403b      	ands	r3, r7
 800805a:	429a      	cmp	r2, r3
 800805c:	d1a0      	bne.n	8007fa0 <_strtod_l+0xa48>
 800805e:	0028      	movs	r0, r5
 8008060:	0021      	movs	r1, r4
 8008062:	f7f8 fa8d 	bl	8000580 <__aeabi_d2lz>
 8008066:	f7f8 fac7 	bl	80005f8 <__aeabi_l2d>
 800806a:	0002      	movs	r2, r0
 800806c:	000b      	movs	r3, r1
 800806e:	0028      	movs	r0, r5
 8008070:	0021      	movs	r1, r4
 8008072:	f7fa fa1f 	bl	80024b4 <__aeabi_dsub>
 8008076:	033b      	lsls	r3, r7, #12
 8008078:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800807a:	0b1b      	lsrs	r3, r3, #12
 800807c:	4333      	orrs	r3, r6
 800807e:	4313      	orrs	r3, r2
 8008080:	0004      	movs	r4, r0
 8008082:	000d      	movs	r5, r1
 8008084:	4a38      	ldr	r2, [pc, #224]	; (8008168 <_strtod_l+0xc10>)
 8008086:	2b00      	cmp	r3, #0
 8008088:	d055      	beq.n	8008136 <_strtod_l+0xbde>
 800808a:	4b38      	ldr	r3, [pc, #224]	; (800816c <_strtod_l+0xc14>)
 800808c:	f7f8 f9e4 	bl	8000458 <__aeabi_dcmplt>
 8008090:	2800      	cmp	r0, #0
 8008092:	d000      	beq.n	8008096 <_strtod_l+0xb3e>
 8008094:	e4d3      	b.n	8007a3e <_strtod_l+0x4e6>
 8008096:	0020      	movs	r0, r4
 8008098:	0029      	movs	r1, r5
 800809a:	4a35      	ldr	r2, [pc, #212]	; (8008170 <_strtod_l+0xc18>)
 800809c:	4b30      	ldr	r3, [pc, #192]	; (8008160 <_strtod_l+0xc08>)
 800809e:	f7f8 f9ef 	bl	8000480 <__aeabi_dcmpgt>
 80080a2:	2800      	cmp	r0, #0
 80080a4:	d100      	bne.n	80080a8 <_strtod_l+0xb50>
 80080a6:	e77b      	b.n	8007fa0 <_strtod_l+0xa48>
 80080a8:	e4c9      	b.n	8007a3e <_strtod_l+0x4e6>
 80080aa:	9b08      	ldr	r3, [sp, #32]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d02b      	beq.n	8008108 <_strtod_l+0xbb0>
 80080b0:	23d4      	movs	r3, #212	; 0xd4
 80080b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80080b4:	04db      	lsls	r3, r3, #19
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d826      	bhi.n	8008108 <_strtod_l+0xbb0>
 80080ba:	0028      	movs	r0, r5
 80080bc:	0021      	movs	r1, r4
 80080be:	4a2d      	ldr	r2, [pc, #180]	; (8008174 <_strtod_l+0xc1c>)
 80080c0:	4b2d      	ldr	r3, [pc, #180]	; (8008178 <_strtod_l+0xc20>)
 80080c2:	f7f8 f9d3 	bl	800046c <__aeabi_dcmple>
 80080c6:	2800      	cmp	r0, #0
 80080c8:	d017      	beq.n	80080fa <_strtod_l+0xba2>
 80080ca:	0028      	movs	r0, r5
 80080cc:	0021      	movs	r1, r4
 80080ce:	f7f8 fa39 	bl	8000544 <__aeabi_d2uiz>
 80080d2:	2800      	cmp	r0, #0
 80080d4:	d100      	bne.n	80080d8 <_strtod_l+0xb80>
 80080d6:	3001      	adds	r0, #1
 80080d8:	f7fa fe02 	bl	8002ce0 <__aeabi_ui2d>
 80080dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80080de:	0005      	movs	r5, r0
 80080e0:	000b      	movs	r3, r1
 80080e2:	000c      	movs	r4, r1
 80080e4:	2a00      	cmp	r2, #0
 80080e6:	d122      	bne.n	800812e <_strtod_l+0xbd6>
 80080e8:	2280      	movs	r2, #128	; 0x80
 80080ea:	0612      	lsls	r2, r2, #24
 80080ec:	188b      	adds	r3, r1, r2
 80080ee:	9018      	str	r0, [sp, #96]	; 0x60
 80080f0:	9319      	str	r3, [sp, #100]	; 0x64
 80080f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80080f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80080f6:	9210      	str	r2, [sp, #64]	; 0x40
 80080f8:	9311      	str	r3, [sp, #68]	; 0x44
 80080fa:	22d6      	movs	r2, #214	; 0xd6
 80080fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080fe:	04d2      	lsls	r2, r2, #19
 8008100:	189b      	adds	r3, r3, r2
 8008102:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008104:	1a9b      	subs	r3, r3, r2
 8008106:	9311      	str	r3, [sp, #68]	; 0x44
 8008108:	9812      	ldr	r0, [sp, #72]	; 0x48
 800810a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800810c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800810e:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8008110:	f001 fedc 	bl	8009ecc <__ulp>
 8008114:	0002      	movs	r2, r0
 8008116:	000b      	movs	r3, r1
 8008118:	0030      	movs	r0, r6
 800811a:	0039      	movs	r1, r7
 800811c:	f7f9 ff5e 	bl	8001fdc <__aeabi_dmul>
 8008120:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008122:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008124:	f7f9 f81c 	bl	8001160 <__aeabi_dadd>
 8008128:	0006      	movs	r6, r0
 800812a:	000f      	movs	r7, r1
 800812c:	e78f      	b.n	800804e <_strtod_l+0xaf6>
 800812e:	0002      	movs	r2, r0
 8008130:	9218      	str	r2, [sp, #96]	; 0x60
 8008132:	9319      	str	r3, [sp, #100]	; 0x64
 8008134:	e7dd      	b.n	80080f2 <_strtod_l+0xb9a>
 8008136:	4b11      	ldr	r3, [pc, #68]	; (800817c <_strtod_l+0xc24>)
 8008138:	f7f8 f98e 	bl	8000458 <__aeabi_dcmplt>
 800813c:	e7b1      	b.n	80080a2 <_strtod_l+0xb4a>
 800813e:	46c0      	nop			; (mov r8, r8)
 8008140:	fff00000 	.word	0xfff00000
 8008144:	000fffff 	.word	0x000fffff
 8008148:	3ff00000 	.word	0x3ff00000
 800814c:	7ff00000 	.word	0x7ff00000
 8008150:	7fe00000 	.word	0x7fe00000
 8008154:	fcb00000 	.word	0xfcb00000
 8008158:	7c9fffff 	.word	0x7c9fffff
 800815c:	7fefffff 	.word	0x7fefffff
 8008160:	3fe00000 	.word	0x3fe00000
 8008164:	bff00000 	.word	0xbff00000
 8008168:	94a03595 	.word	0x94a03595
 800816c:	3fdfffff 	.word	0x3fdfffff
 8008170:	35afe535 	.word	0x35afe535
 8008174:	ffc00000 	.word	0xffc00000
 8008178:	41dfffff 	.word	0x41dfffff
 800817c:	3fcfffff 	.word	0x3fcfffff

08008180 <_strtod_r>:
 8008180:	b510      	push	{r4, lr}
 8008182:	4b02      	ldr	r3, [pc, #8]	; (800818c <_strtod_r+0xc>)
 8008184:	f7ff f9e8 	bl	8007558 <_strtod_l>
 8008188:	bd10      	pop	{r4, pc}
 800818a:	46c0      	nop			; (mov r8, r8)
 800818c:	20000074 	.word	0x20000074

08008190 <_strtol_l.constprop.0>:
 8008190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008192:	b087      	sub	sp, #28
 8008194:	001e      	movs	r6, r3
 8008196:	9005      	str	r0, [sp, #20]
 8008198:	9101      	str	r1, [sp, #4]
 800819a:	9202      	str	r2, [sp, #8]
 800819c:	2b01      	cmp	r3, #1
 800819e:	d045      	beq.n	800822c <_strtol_l.constprop.0+0x9c>
 80081a0:	000b      	movs	r3, r1
 80081a2:	2e24      	cmp	r6, #36	; 0x24
 80081a4:	d842      	bhi.n	800822c <_strtol_l.constprop.0+0x9c>
 80081a6:	4a3f      	ldr	r2, [pc, #252]	; (80082a4 <_strtol_l.constprop.0+0x114>)
 80081a8:	2108      	movs	r1, #8
 80081aa:	4694      	mov	ip, r2
 80081ac:	001a      	movs	r2, r3
 80081ae:	4660      	mov	r0, ip
 80081b0:	7814      	ldrb	r4, [r2, #0]
 80081b2:	3301      	adds	r3, #1
 80081b4:	5d00      	ldrb	r0, [r0, r4]
 80081b6:	001d      	movs	r5, r3
 80081b8:	0007      	movs	r7, r0
 80081ba:	400f      	ands	r7, r1
 80081bc:	4208      	tst	r0, r1
 80081be:	d1f5      	bne.n	80081ac <_strtol_l.constprop.0+0x1c>
 80081c0:	2c2d      	cmp	r4, #45	; 0x2d
 80081c2:	d13a      	bne.n	800823a <_strtol_l.constprop.0+0xaa>
 80081c4:	2701      	movs	r7, #1
 80081c6:	781c      	ldrb	r4, [r3, #0]
 80081c8:	1c95      	adds	r5, r2, #2
 80081ca:	2e00      	cmp	r6, #0
 80081cc:	d065      	beq.n	800829a <_strtol_l.constprop.0+0x10a>
 80081ce:	2e10      	cmp	r6, #16
 80081d0:	d109      	bne.n	80081e6 <_strtol_l.constprop.0+0x56>
 80081d2:	2c30      	cmp	r4, #48	; 0x30
 80081d4:	d107      	bne.n	80081e6 <_strtol_l.constprop.0+0x56>
 80081d6:	2220      	movs	r2, #32
 80081d8:	782b      	ldrb	r3, [r5, #0]
 80081da:	4393      	bics	r3, r2
 80081dc:	2b58      	cmp	r3, #88	; 0x58
 80081de:	d157      	bne.n	8008290 <_strtol_l.constprop.0+0x100>
 80081e0:	2610      	movs	r6, #16
 80081e2:	786c      	ldrb	r4, [r5, #1]
 80081e4:	3502      	adds	r5, #2
 80081e6:	4b30      	ldr	r3, [pc, #192]	; (80082a8 <_strtol_l.constprop.0+0x118>)
 80081e8:	0031      	movs	r1, r6
 80081ea:	18fb      	adds	r3, r7, r3
 80081ec:	0018      	movs	r0, r3
 80081ee:	9303      	str	r3, [sp, #12]
 80081f0:	f7f8 f82c 	bl	800024c <__aeabi_uidivmod>
 80081f4:	2300      	movs	r3, #0
 80081f6:	2201      	movs	r2, #1
 80081f8:	4684      	mov	ip, r0
 80081fa:	0018      	movs	r0, r3
 80081fc:	9104      	str	r1, [sp, #16]
 80081fe:	4252      	negs	r2, r2
 8008200:	0021      	movs	r1, r4
 8008202:	3930      	subs	r1, #48	; 0x30
 8008204:	2909      	cmp	r1, #9
 8008206:	d81d      	bhi.n	8008244 <_strtol_l.constprop.0+0xb4>
 8008208:	000c      	movs	r4, r1
 800820a:	42a6      	cmp	r6, r4
 800820c:	dd28      	ble.n	8008260 <_strtol_l.constprop.0+0xd0>
 800820e:	2b00      	cmp	r3, #0
 8008210:	db24      	blt.n	800825c <_strtol_l.constprop.0+0xcc>
 8008212:	0013      	movs	r3, r2
 8008214:	4584      	cmp	ip, r0
 8008216:	d306      	bcc.n	8008226 <_strtol_l.constprop.0+0x96>
 8008218:	d102      	bne.n	8008220 <_strtol_l.constprop.0+0x90>
 800821a:	9904      	ldr	r1, [sp, #16]
 800821c:	42a1      	cmp	r1, r4
 800821e:	db02      	blt.n	8008226 <_strtol_l.constprop.0+0x96>
 8008220:	2301      	movs	r3, #1
 8008222:	4370      	muls	r0, r6
 8008224:	1820      	adds	r0, r4, r0
 8008226:	782c      	ldrb	r4, [r5, #0]
 8008228:	3501      	adds	r5, #1
 800822a:	e7e9      	b.n	8008200 <_strtol_l.constprop.0+0x70>
 800822c:	f7fe fa28 	bl	8006680 <__errno>
 8008230:	2316      	movs	r3, #22
 8008232:	6003      	str	r3, [r0, #0]
 8008234:	2000      	movs	r0, #0
 8008236:	b007      	add	sp, #28
 8008238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800823a:	2c2b      	cmp	r4, #43	; 0x2b
 800823c:	d1c5      	bne.n	80081ca <_strtol_l.constprop.0+0x3a>
 800823e:	781c      	ldrb	r4, [r3, #0]
 8008240:	1c95      	adds	r5, r2, #2
 8008242:	e7c2      	b.n	80081ca <_strtol_l.constprop.0+0x3a>
 8008244:	0021      	movs	r1, r4
 8008246:	3941      	subs	r1, #65	; 0x41
 8008248:	2919      	cmp	r1, #25
 800824a:	d801      	bhi.n	8008250 <_strtol_l.constprop.0+0xc0>
 800824c:	3c37      	subs	r4, #55	; 0x37
 800824e:	e7dc      	b.n	800820a <_strtol_l.constprop.0+0x7a>
 8008250:	0021      	movs	r1, r4
 8008252:	3961      	subs	r1, #97	; 0x61
 8008254:	2919      	cmp	r1, #25
 8008256:	d803      	bhi.n	8008260 <_strtol_l.constprop.0+0xd0>
 8008258:	3c57      	subs	r4, #87	; 0x57
 800825a:	e7d6      	b.n	800820a <_strtol_l.constprop.0+0x7a>
 800825c:	0013      	movs	r3, r2
 800825e:	e7e2      	b.n	8008226 <_strtol_l.constprop.0+0x96>
 8008260:	2b00      	cmp	r3, #0
 8008262:	da09      	bge.n	8008278 <_strtol_l.constprop.0+0xe8>
 8008264:	2322      	movs	r3, #34	; 0x22
 8008266:	9a05      	ldr	r2, [sp, #20]
 8008268:	9803      	ldr	r0, [sp, #12]
 800826a:	6013      	str	r3, [r2, #0]
 800826c:	9b02      	ldr	r3, [sp, #8]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d0e1      	beq.n	8008236 <_strtol_l.constprop.0+0xa6>
 8008272:	1e6b      	subs	r3, r5, #1
 8008274:	9301      	str	r3, [sp, #4]
 8008276:	e007      	b.n	8008288 <_strtol_l.constprop.0+0xf8>
 8008278:	2f00      	cmp	r7, #0
 800827a:	d000      	beq.n	800827e <_strtol_l.constprop.0+0xee>
 800827c:	4240      	negs	r0, r0
 800827e:	9a02      	ldr	r2, [sp, #8]
 8008280:	2a00      	cmp	r2, #0
 8008282:	d0d8      	beq.n	8008236 <_strtol_l.constprop.0+0xa6>
 8008284:	2b00      	cmp	r3, #0
 8008286:	d1f4      	bne.n	8008272 <_strtol_l.constprop.0+0xe2>
 8008288:	9b02      	ldr	r3, [sp, #8]
 800828a:	9a01      	ldr	r2, [sp, #4]
 800828c:	601a      	str	r2, [r3, #0]
 800828e:	e7d2      	b.n	8008236 <_strtol_l.constprop.0+0xa6>
 8008290:	2430      	movs	r4, #48	; 0x30
 8008292:	2e00      	cmp	r6, #0
 8008294:	d1a7      	bne.n	80081e6 <_strtol_l.constprop.0+0x56>
 8008296:	3608      	adds	r6, #8
 8008298:	e7a5      	b.n	80081e6 <_strtol_l.constprop.0+0x56>
 800829a:	2c30      	cmp	r4, #48	; 0x30
 800829c:	d09b      	beq.n	80081d6 <_strtol_l.constprop.0+0x46>
 800829e:	260a      	movs	r6, #10
 80082a0:	e7a1      	b.n	80081e6 <_strtol_l.constprop.0+0x56>
 80082a2:	46c0      	nop			; (mov r8, r8)
 80082a4:	0800bcf1 	.word	0x0800bcf1
 80082a8:	7fffffff 	.word	0x7fffffff

080082ac <_strtol_r>:
 80082ac:	b510      	push	{r4, lr}
 80082ae:	f7ff ff6f 	bl	8008190 <_strtol_l.constprop.0>
 80082b2:	bd10      	pop	{r4, pc}

080082b4 <_write_r>:
 80082b4:	b570      	push	{r4, r5, r6, lr}
 80082b6:	0004      	movs	r4, r0
 80082b8:	0008      	movs	r0, r1
 80082ba:	0011      	movs	r1, r2
 80082bc:	001a      	movs	r2, r3
 80082be:	2300      	movs	r3, #0
 80082c0:	4d05      	ldr	r5, [pc, #20]	; (80082d8 <_write_r+0x24>)
 80082c2:	602b      	str	r3, [r5, #0]
 80082c4:	f7fb fa53 	bl	800376e <_write>
 80082c8:	1c43      	adds	r3, r0, #1
 80082ca:	d103      	bne.n	80082d4 <_write_r+0x20>
 80082cc:	682b      	ldr	r3, [r5, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d000      	beq.n	80082d4 <_write_r+0x20>
 80082d2:	6023      	str	r3, [r4, #0]
 80082d4:	bd70      	pop	{r4, r5, r6, pc}
 80082d6:	46c0      	nop			; (mov r8, r8)
 80082d8:	200003fc 	.word	0x200003fc

080082dc <_close_r>:
 80082dc:	2300      	movs	r3, #0
 80082de:	b570      	push	{r4, r5, r6, lr}
 80082e0:	4d06      	ldr	r5, [pc, #24]	; (80082fc <_close_r+0x20>)
 80082e2:	0004      	movs	r4, r0
 80082e4:	0008      	movs	r0, r1
 80082e6:	602b      	str	r3, [r5, #0]
 80082e8:	f7fb fa5d 	bl	80037a6 <_close>
 80082ec:	1c43      	adds	r3, r0, #1
 80082ee:	d103      	bne.n	80082f8 <_close_r+0x1c>
 80082f0:	682b      	ldr	r3, [r5, #0]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d000      	beq.n	80082f8 <_close_r+0x1c>
 80082f6:	6023      	str	r3, [r4, #0]
 80082f8:	bd70      	pop	{r4, r5, r6, pc}
 80082fa:	46c0      	nop			; (mov r8, r8)
 80082fc:	200003fc 	.word	0x200003fc

08008300 <quorem>:
 8008300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008302:	0006      	movs	r6, r0
 8008304:	690b      	ldr	r3, [r1, #16]
 8008306:	6932      	ldr	r2, [r6, #16]
 8008308:	b087      	sub	sp, #28
 800830a:	2000      	movs	r0, #0
 800830c:	9103      	str	r1, [sp, #12]
 800830e:	429a      	cmp	r2, r3
 8008310:	db65      	blt.n	80083de <quorem+0xde>
 8008312:	3b01      	subs	r3, #1
 8008314:	009c      	lsls	r4, r3, #2
 8008316:	9300      	str	r3, [sp, #0]
 8008318:	000b      	movs	r3, r1
 800831a:	3314      	adds	r3, #20
 800831c:	9305      	str	r3, [sp, #20]
 800831e:	191b      	adds	r3, r3, r4
 8008320:	9304      	str	r3, [sp, #16]
 8008322:	0033      	movs	r3, r6
 8008324:	3314      	adds	r3, #20
 8008326:	9302      	str	r3, [sp, #8]
 8008328:	191c      	adds	r4, r3, r4
 800832a:	9b04      	ldr	r3, [sp, #16]
 800832c:	6827      	ldr	r7, [r4, #0]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	0038      	movs	r0, r7
 8008332:	1c5d      	adds	r5, r3, #1
 8008334:	0029      	movs	r1, r5
 8008336:	9301      	str	r3, [sp, #4]
 8008338:	f7f7 ff02 	bl	8000140 <__udivsi3>
 800833c:	9001      	str	r0, [sp, #4]
 800833e:	42af      	cmp	r7, r5
 8008340:	d324      	bcc.n	800838c <quorem+0x8c>
 8008342:	2500      	movs	r5, #0
 8008344:	46ac      	mov	ip, r5
 8008346:	9802      	ldr	r0, [sp, #8]
 8008348:	9f05      	ldr	r7, [sp, #20]
 800834a:	cf08      	ldmia	r7!, {r3}
 800834c:	9a01      	ldr	r2, [sp, #4]
 800834e:	b299      	uxth	r1, r3
 8008350:	4351      	muls	r1, r2
 8008352:	0c1b      	lsrs	r3, r3, #16
 8008354:	4353      	muls	r3, r2
 8008356:	1949      	adds	r1, r1, r5
 8008358:	0c0a      	lsrs	r2, r1, #16
 800835a:	189b      	adds	r3, r3, r2
 800835c:	6802      	ldr	r2, [r0, #0]
 800835e:	b289      	uxth	r1, r1
 8008360:	b292      	uxth	r2, r2
 8008362:	4462      	add	r2, ip
 8008364:	1a52      	subs	r2, r2, r1
 8008366:	6801      	ldr	r1, [r0, #0]
 8008368:	0c1d      	lsrs	r5, r3, #16
 800836a:	0c09      	lsrs	r1, r1, #16
 800836c:	b29b      	uxth	r3, r3
 800836e:	1acb      	subs	r3, r1, r3
 8008370:	1411      	asrs	r1, r2, #16
 8008372:	185b      	adds	r3, r3, r1
 8008374:	1419      	asrs	r1, r3, #16
 8008376:	b292      	uxth	r2, r2
 8008378:	041b      	lsls	r3, r3, #16
 800837a:	431a      	orrs	r2, r3
 800837c:	9b04      	ldr	r3, [sp, #16]
 800837e:	468c      	mov	ip, r1
 8008380:	c004      	stmia	r0!, {r2}
 8008382:	42bb      	cmp	r3, r7
 8008384:	d2e1      	bcs.n	800834a <quorem+0x4a>
 8008386:	6823      	ldr	r3, [r4, #0]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d030      	beq.n	80083ee <quorem+0xee>
 800838c:	0030      	movs	r0, r6
 800838e:	9903      	ldr	r1, [sp, #12]
 8008390:	f001 fce8 	bl	8009d64 <__mcmp>
 8008394:	2800      	cmp	r0, #0
 8008396:	db21      	blt.n	80083dc <quorem+0xdc>
 8008398:	0030      	movs	r0, r6
 800839a:	2400      	movs	r4, #0
 800839c:	9b01      	ldr	r3, [sp, #4]
 800839e:	9903      	ldr	r1, [sp, #12]
 80083a0:	3301      	adds	r3, #1
 80083a2:	9301      	str	r3, [sp, #4]
 80083a4:	3014      	adds	r0, #20
 80083a6:	3114      	adds	r1, #20
 80083a8:	6803      	ldr	r3, [r0, #0]
 80083aa:	c920      	ldmia	r1!, {r5}
 80083ac:	b29a      	uxth	r2, r3
 80083ae:	1914      	adds	r4, r2, r4
 80083b0:	b2aa      	uxth	r2, r5
 80083b2:	1aa2      	subs	r2, r4, r2
 80083b4:	0c1b      	lsrs	r3, r3, #16
 80083b6:	0c2d      	lsrs	r5, r5, #16
 80083b8:	1414      	asrs	r4, r2, #16
 80083ba:	1b5b      	subs	r3, r3, r5
 80083bc:	191b      	adds	r3, r3, r4
 80083be:	141c      	asrs	r4, r3, #16
 80083c0:	b292      	uxth	r2, r2
 80083c2:	041b      	lsls	r3, r3, #16
 80083c4:	4313      	orrs	r3, r2
 80083c6:	c008      	stmia	r0!, {r3}
 80083c8:	9b04      	ldr	r3, [sp, #16]
 80083ca:	428b      	cmp	r3, r1
 80083cc:	d2ec      	bcs.n	80083a8 <quorem+0xa8>
 80083ce:	9b00      	ldr	r3, [sp, #0]
 80083d0:	9a02      	ldr	r2, [sp, #8]
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	18d3      	adds	r3, r2, r3
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	2a00      	cmp	r2, #0
 80083da:	d015      	beq.n	8008408 <quorem+0x108>
 80083dc:	9801      	ldr	r0, [sp, #4]
 80083de:	b007      	add	sp, #28
 80083e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083e2:	6823      	ldr	r3, [r4, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d106      	bne.n	80083f6 <quorem+0xf6>
 80083e8:	9b00      	ldr	r3, [sp, #0]
 80083ea:	3b01      	subs	r3, #1
 80083ec:	9300      	str	r3, [sp, #0]
 80083ee:	9b02      	ldr	r3, [sp, #8]
 80083f0:	3c04      	subs	r4, #4
 80083f2:	42a3      	cmp	r3, r4
 80083f4:	d3f5      	bcc.n	80083e2 <quorem+0xe2>
 80083f6:	9b00      	ldr	r3, [sp, #0]
 80083f8:	6133      	str	r3, [r6, #16]
 80083fa:	e7c7      	b.n	800838c <quorem+0x8c>
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	2a00      	cmp	r2, #0
 8008400:	d106      	bne.n	8008410 <quorem+0x110>
 8008402:	9a00      	ldr	r2, [sp, #0]
 8008404:	3a01      	subs	r2, #1
 8008406:	9200      	str	r2, [sp, #0]
 8008408:	9a02      	ldr	r2, [sp, #8]
 800840a:	3b04      	subs	r3, #4
 800840c:	429a      	cmp	r2, r3
 800840e:	d3f5      	bcc.n	80083fc <quorem+0xfc>
 8008410:	9b00      	ldr	r3, [sp, #0]
 8008412:	6133      	str	r3, [r6, #16]
 8008414:	e7e2      	b.n	80083dc <quorem+0xdc>
	...

08008418 <_dtoa_r>:
 8008418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800841a:	b09d      	sub	sp, #116	; 0x74
 800841c:	9202      	str	r2, [sp, #8]
 800841e:	9303      	str	r3, [sp, #12]
 8008420:	9b02      	ldr	r3, [sp, #8]
 8008422:	9c03      	ldr	r4, [sp, #12]
 8008424:	9308      	str	r3, [sp, #32]
 8008426:	9409      	str	r4, [sp, #36]	; 0x24
 8008428:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800842a:	0007      	movs	r7, r0
 800842c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800842e:	2c00      	cmp	r4, #0
 8008430:	d10e      	bne.n	8008450 <_dtoa_r+0x38>
 8008432:	2010      	movs	r0, #16
 8008434:	f001 f996 	bl	8009764 <malloc>
 8008438:	1e02      	subs	r2, r0, #0
 800843a:	6278      	str	r0, [r7, #36]	; 0x24
 800843c:	d104      	bne.n	8008448 <_dtoa_r+0x30>
 800843e:	21ea      	movs	r1, #234	; 0xea
 8008440:	4bc7      	ldr	r3, [pc, #796]	; (8008760 <_dtoa_r+0x348>)
 8008442:	48c8      	ldr	r0, [pc, #800]	; (8008764 <_dtoa_r+0x34c>)
 8008444:	f002 fd76 	bl	800af34 <__assert_func>
 8008448:	6044      	str	r4, [r0, #4]
 800844a:	6084      	str	r4, [r0, #8]
 800844c:	6004      	str	r4, [r0, #0]
 800844e:	60c4      	str	r4, [r0, #12]
 8008450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008452:	6819      	ldr	r1, [r3, #0]
 8008454:	2900      	cmp	r1, #0
 8008456:	d00a      	beq.n	800846e <_dtoa_r+0x56>
 8008458:	685a      	ldr	r2, [r3, #4]
 800845a:	2301      	movs	r3, #1
 800845c:	4093      	lsls	r3, r2
 800845e:	604a      	str	r2, [r1, #4]
 8008460:	608b      	str	r3, [r1, #8]
 8008462:	0038      	movs	r0, r7
 8008464:	f001 f9f2 	bl	800984c <_Bfree>
 8008468:	2200      	movs	r2, #0
 800846a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846c:	601a      	str	r2, [r3, #0]
 800846e:	9b03      	ldr	r3, [sp, #12]
 8008470:	2b00      	cmp	r3, #0
 8008472:	da20      	bge.n	80084b6 <_dtoa_r+0x9e>
 8008474:	2301      	movs	r3, #1
 8008476:	602b      	str	r3, [r5, #0]
 8008478:	9b03      	ldr	r3, [sp, #12]
 800847a:	005b      	lsls	r3, r3, #1
 800847c:	085b      	lsrs	r3, r3, #1
 800847e:	9309      	str	r3, [sp, #36]	; 0x24
 8008480:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008482:	4bb9      	ldr	r3, [pc, #740]	; (8008768 <_dtoa_r+0x350>)
 8008484:	4ab8      	ldr	r2, [pc, #736]	; (8008768 <_dtoa_r+0x350>)
 8008486:	402b      	ands	r3, r5
 8008488:	4293      	cmp	r3, r2
 800848a:	d117      	bne.n	80084bc <_dtoa_r+0xa4>
 800848c:	4bb7      	ldr	r3, [pc, #732]	; (800876c <_dtoa_r+0x354>)
 800848e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008490:	0328      	lsls	r0, r5, #12
 8008492:	6013      	str	r3, [r2, #0]
 8008494:	9b02      	ldr	r3, [sp, #8]
 8008496:	0b00      	lsrs	r0, r0, #12
 8008498:	4318      	orrs	r0, r3
 800849a:	d101      	bne.n	80084a0 <_dtoa_r+0x88>
 800849c:	f000 fdbf 	bl	800901e <_dtoa_r+0xc06>
 80084a0:	48b3      	ldr	r0, [pc, #716]	; (8008770 <_dtoa_r+0x358>)
 80084a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80084a4:	9006      	str	r0, [sp, #24]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d002      	beq.n	80084b0 <_dtoa_r+0x98>
 80084aa:	4bb2      	ldr	r3, [pc, #712]	; (8008774 <_dtoa_r+0x35c>)
 80084ac:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80084ae:	6013      	str	r3, [r2, #0]
 80084b0:	9806      	ldr	r0, [sp, #24]
 80084b2:	b01d      	add	sp, #116	; 0x74
 80084b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084b6:	2300      	movs	r3, #0
 80084b8:	602b      	str	r3, [r5, #0]
 80084ba:	e7e1      	b.n	8008480 <_dtoa_r+0x68>
 80084bc:	9b08      	ldr	r3, [sp, #32]
 80084be:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80084c0:	9312      	str	r3, [sp, #72]	; 0x48
 80084c2:	9413      	str	r4, [sp, #76]	; 0x4c
 80084c4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80084c6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80084c8:	2200      	movs	r2, #0
 80084ca:	2300      	movs	r3, #0
 80084cc:	f7f7 ffbe 	bl	800044c <__aeabi_dcmpeq>
 80084d0:	1e04      	subs	r4, r0, #0
 80084d2:	d009      	beq.n	80084e8 <_dtoa_r+0xd0>
 80084d4:	2301      	movs	r3, #1
 80084d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80084d8:	6013      	str	r3, [r2, #0]
 80084da:	4ba7      	ldr	r3, [pc, #668]	; (8008778 <_dtoa_r+0x360>)
 80084dc:	9306      	str	r3, [sp, #24]
 80084de:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d0e5      	beq.n	80084b0 <_dtoa_r+0x98>
 80084e4:	4ba5      	ldr	r3, [pc, #660]	; (800877c <_dtoa_r+0x364>)
 80084e6:	e7e1      	b.n	80084ac <_dtoa_r+0x94>
 80084e8:	ab1a      	add	r3, sp, #104	; 0x68
 80084ea:	9301      	str	r3, [sp, #4]
 80084ec:	ab1b      	add	r3, sp, #108	; 0x6c
 80084ee:	9300      	str	r3, [sp, #0]
 80084f0:	0038      	movs	r0, r7
 80084f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80084f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80084f6:	f001 fd5d 	bl	8009fb4 <__d2b>
 80084fa:	006e      	lsls	r6, r5, #1
 80084fc:	9005      	str	r0, [sp, #20]
 80084fe:	0d76      	lsrs	r6, r6, #21
 8008500:	d100      	bne.n	8008504 <_dtoa_r+0xec>
 8008502:	e07c      	b.n	80085fe <_dtoa_r+0x1e6>
 8008504:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008506:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008508:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800850a:	4a9d      	ldr	r2, [pc, #628]	; (8008780 <_dtoa_r+0x368>)
 800850c:	031b      	lsls	r3, r3, #12
 800850e:	0b1b      	lsrs	r3, r3, #12
 8008510:	431a      	orrs	r2, r3
 8008512:	0011      	movs	r1, r2
 8008514:	4b9b      	ldr	r3, [pc, #620]	; (8008784 <_dtoa_r+0x36c>)
 8008516:	9418      	str	r4, [sp, #96]	; 0x60
 8008518:	18f6      	adds	r6, r6, r3
 800851a:	2200      	movs	r2, #0
 800851c:	4b9a      	ldr	r3, [pc, #616]	; (8008788 <_dtoa_r+0x370>)
 800851e:	f7f9 ffc9 	bl	80024b4 <__aeabi_dsub>
 8008522:	4a9a      	ldr	r2, [pc, #616]	; (800878c <_dtoa_r+0x374>)
 8008524:	4b9a      	ldr	r3, [pc, #616]	; (8008790 <_dtoa_r+0x378>)
 8008526:	f7f9 fd59 	bl	8001fdc <__aeabi_dmul>
 800852a:	4a9a      	ldr	r2, [pc, #616]	; (8008794 <_dtoa_r+0x37c>)
 800852c:	4b9a      	ldr	r3, [pc, #616]	; (8008798 <_dtoa_r+0x380>)
 800852e:	f7f8 fe17 	bl	8001160 <__aeabi_dadd>
 8008532:	0004      	movs	r4, r0
 8008534:	0030      	movs	r0, r6
 8008536:	000d      	movs	r5, r1
 8008538:	f7fa fba2 	bl	8002c80 <__aeabi_i2d>
 800853c:	4a97      	ldr	r2, [pc, #604]	; (800879c <_dtoa_r+0x384>)
 800853e:	4b98      	ldr	r3, [pc, #608]	; (80087a0 <_dtoa_r+0x388>)
 8008540:	f7f9 fd4c 	bl	8001fdc <__aeabi_dmul>
 8008544:	0002      	movs	r2, r0
 8008546:	000b      	movs	r3, r1
 8008548:	0020      	movs	r0, r4
 800854a:	0029      	movs	r1, r5
 800854c:	f7f8 fe08 	bl	8001160 <__aeabi_dadd>
 8008550:	0004      	movs	r4, r0
 8008552:	000d      	movs	r5, r1
 8008554:	f7fa fb5e 	bl	8002c14 <__aeabi_d2iz>
 8008558:	2200      	movs	r2, #0
 800855a:	9002      	str	r0, [sp, #8]
 800855c:	2300      	movs	r3, #0
 800855e:	0020      	movs	r0, r4
 8008560:	0029      	movs	r1, r5
 8008562:	f7f7 ff79 	bl	8000458 <__aeabi_dcmplt>
 8008566:	2800      	cmp	r0, #0
 8008568:	d00b      	beq.n	8008582 <_dtoa_r+0x16a>
 800856a:	9802      	ldr	r0, [sp, #8]
 800856c:	f7fa fb88 	bl	8002c80 <__aeabi_i2d>
 8008570:	002b      	movs	r3, r5
 8008572:	0022      	movs	r2, r4
 8008574:	f7f7 ff6a 	bl	800044c <__aeabi_dcmpeq>
 8008578:	4243      	negs	r3, r0
 800857a:	4158      	adcs	r0, r3
 800857c:	9b02      	ldr	r3, [sp, #8]
 800857e:	1a1b      	subs	r3, r3, r0
 8008580:	9302      	str	r3, [sp, #8]
 8008582:	2301      	movs	r3, #1
 8008584:	9316      	str	r3, [sp, #88]	; 0x58
 8008586:	9b02      	ldr	r3, [sp, #8]
 8008588:	2b16      	cmp	r3, #22
 800858a:	d80f      	bhi.n	80085ac <_dtoa_r+0x194>
 800858c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800858e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008590:	00da      	lsls	r2, r3, #3
 8008592:	4b84      	ldr	r3, [pc, #528]	; (80087a4 <_dtoa_r+0x38c>)
 8008594:	189b      	adds	r3, r3, r2
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	f7f7 ff5d 	bl	8000458 <__aeabi_dcmplt>
 800859e:	2800      	cmp	r0, #0
 80085a0:	d049      	beq.n	8008636 <_dtoa_r+0x21e>
 80085a2:	9b02      	ldr	r3, [sp, #8]
 80085a4:	3b01      	subs	r3, #1
 80085a6:	9302      	str	r3, [sp, #8]
 80085a8:	2300      	movs	r3, #0
 80085aa:	9316      	str	r3, [sp, #88]	; 0x58
 80085ac:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80085ae:	1b9e      	subs	r6, r3, r6
 80085b0:	2300      	movs	r3, #0
 80085b2:	930a      	str	r3, [sp, #40]	; 0x28
 80085b4:	0033      	movs	r3, r6
 80085b6:	3b01      	subs	r3, #1
 80085b8:	930d      	str	r3, [sp, #52]	; 0x34
 80085ba:	d504      	bpl.n	80085c6 <_dtoa_r+0x1ae>
 80085bc:	2301      	movs	r3, #1
 80085be:	1b9b      	subs	r3, r3, r6
 80085c0:	930a      	str	r3, [sp, #40]	; 0x28
 80085c2:	2300      	movs	r3, #0
 80085c4:	930d      	str	r3, [sp, #52]	; 0x34
 80085c6:	9b02      	ldr	r3, [sp, #8]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	db36      	blt.n	800863a <_dtoa_r+0x222>
 80085cc:	9a02      	ldr	r2, [sp, #8]
 80085ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085d0:	4694      	mov	ip, r2
 80085d2:	4463      	add	r3, ip
 80085d4:	930d      	str	r3, [sp, #52]	; 0x34
 80085d6:	2300      	movs	r3, #0
 80085d8:	9215      	str	r2, [sp, #84]	; 0x54
 80085da:	930e      	str	r3, [sp, #56]	; 0x38
 80085dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085de:	2401      	movs	r4, #1
 80085e0:	2b09      	cmp	r3, #9
 80085e2:	d864      	bhi.n	80086ae <_dtoa_r+0x296>
 80085e4:	2b05      	cmp	r3, #5
 80085e6:	dd02      	ble.n	80085ee <_dtoa_r+0x1d6>
 80085e8:	2400      	movs	r4, #0
 80085ea:	3b04      	subs	r3, #4
 80085ec:	9322      	str	r3, [sp, #136]	; 0x88
 80085ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085f0:	1e98      	subs	r0, r3, #2
 80085f2:	2803      	cmp	r0, #3
 80085f4:	d864      	bhi.n	80086c0 <_dtoa_r+0x2a8>
 80085f6:	f7f7 fd8f 	bl	8000118 <__gnu_thumb1_case_uqi>
 80085fa:	3829      	.short	0x3829
 80085fc:	5836      	.short	0x5836
 80085fe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008600:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008602:	189e      	adds	r6, r3, r2
 8008604:	4b68      	ldr	r3, [pc, #416]	; (80087a8 <_dtoa_r+0x390>)
 8008606:	18f2      	adds	r2, r6, r3
 8008608:	2a20      	cmp	r2, #32
 800860a:	dd0f      	ble.n	800862c <_dtoa_r+0x214>
 800860c:	2340      	movs	r3, #64	; 0x40
 800860e:	1a9b      	subs	r3, r3, r2
 8008610:	409d      	lsls	r5, r3
 8008612:	4b66      	ldr	r3, [pc, #408]	; (80087ac <_dtoa_r+0x394>)
 8008614:	9802      	ldr	r0, [sp, #8]
 8008616:	18f3      	adds	r3, r6, r3
 8008618:	40d8      	lsrs	r0, r3
 800861a:	4328      	orrs	r0, r5
 800861c:	f7fa fb60 	bl	8002ce0 <__aeabi_ui2d>
 8008620:	2301      	movs	r3, #1
 8008622:	4c63      	ldr	r4, [pc, #396]	; (80087b0 <_dtoa_r+0x398>)
 8008624:	3e01      	subs	r6, #1
 8008626:	1909      	adds	r1, r1, r4
 8008628:	9318      	str	r3, [sp, #96]	; 0x60
 800862a:	e776      	b.n	800851a <_dtoa_r+0x102>
 800862c:	2320      	movs	r3, #32
 800862e:	9802      	ldr	r0, [sp, #8]
 8008630:	1a9b      	subs	r3, r3, r2
 8008632:	4098      	lsls	r0, r3
 8008634:	e7f2      	b.n	800861c <_dtoa_r+0x204>
 8008636:	9016      	str	r0, [sp, #88]	; 0x58
 8008638:	e7b8      	b.n	80085ac <_dtoa_r+0x194>
 800863a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800863c:	9a02      	ldr	r2, [sp, #8]
 800863e:	1a9b      	subs	r3, r3, r2
 8008640:	930a      	str	r3, [sp, #40]	; 0x28
 8008642:	4253      	negs	r3, r2
 8008644:	930e      	str	r3, [sp, #56]	; 0x38
 8008646:	2300      	movs	r3, #0
 8008648:	9315      	str	r3, [sp, #84]	; 0x54
 800864a:	e7c7      	b.n	80085dc <_dtoa_r+0x1c4>
 800864c:	2300      	movs	r3, #0
 800864e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008650:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008652:	930c      	str	r3, [sp, #48]	; 0x30
 8008654:	9307      	str	r3, [sp, #28]
 8008656:	2b00      	cmp	r3, #0
 8008658:	dc13      	bgt.n	8008682 <_dtoa_r+0x26a>
 800865a:	2301      	movs	r3, #1
 800865c:	001a      	movs	r2, r3
 800865e:	930c      	str	r3, [sp, #48]	; 0x30
 8008660:	9307      	str	r3, [sp, #28]
 8008662:	9223      	str	r2, [sp, #140]	; 0x8c
 8008664:	e00d      	b.n	8008682 <_dtoa_r+0x26a>
 8008666:	2301      	movs	r3, #1
 8008668:	e7f1      	b.n	800864e <_dtoa_r+0x236>
 800866a:	2300      	movs	r3, #0
 800866c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800866e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008670:	4694      	mov	ip, r2
 8008672:	9b02      	ldr	r3, [sp, #8]
 8008674:	4463      	add	r3, ip
 8008676:	930c      	str	r3, [sp, #48]	; 0x30
 8008678:	3301      	adds	r3, #1
 800867a:	9307      	str	r3, [sp, #28]
 800867c:	2b00      	cmp	r3, #0
 800867e:	dc00      	bgt.n	8008682 <_dtoa_r+0x26a>
 8008680:	2301      	movs	r3, #1
 8008682:	2200      	movs	r2, #0
 8008684:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008686:	6042      	str	r2, [r0, #4]
 8008688:	3204      	adds	r2, #4
 800868a:	0015      	movs	r5, r2
 800868c:	3514      	adds	r5, #20
 800868e:	6841      	ldr	r1, [r0, #4]
 8008690:	429d      	cmp	r5, r3
 8008692:	d919      	bls.n	80086c8 <_dtoa_r+0x2b0>
 8008694:	0038      	movs	r0, r7
 8008696:	f001 f895 	bl	80097c4 <_Balloc>
 800869a:	9006      	str	r0, [sp, #24]
 800869c:	2800      	cmp	r0, #0
 800869e:	d117      	bne.n	80086d0 <_dtoa_r+0x2b8>
 80086a0:	21d5      	movs	r1, #213	; 0xd5
 80086a2:	0002      	movs	r2, r0
 80086a4:	4b43      	ldr	r3, [pc, #268]	; (80087b4 <_dtoa_r+0x39c>)
 80086a6:	0049      	lsls	r1, r1, #1
 80086a8:	e6cb      	b.n	8008442 <_dtoa_r+0x2a>
 80086aa:	2301      	movs	r3, #1
 80086ac:	e7de      	b.n	800866c <_dtoa_r+0x254>
 80086ae:	2300      	movs	r3, #0
 80086b0:	940f      	str	r4, [sp, #60]	; 0x3c
 80086b2:	9322      	str	r3, [sp, #136]	; 0x88
 80086b4:	3b01      	subs	r3, #1
 80086b6:	930c      	str	r3, [sp, #48]	; 0x30
 80086b8:	9307      	str	r3, [sp, #28]
 80086ba:	2200      	movs	r2, #0
 80086bc:	3313      	adds	r3, #19
 80086be:	e7d0      	b.n	8008662 <_dtoa_r+0x24a>
 80086c0:	2301      	movs	r3, #1
 80086c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80086c4:	3b02      	subs	r3, #2
 80086c6:	e7f6      	b.n	80086b6 <_dtoa_r+0x29e>
 80086c8:	3101      	adds	r1, #1
 80086ca:	6041      	str	r1, [r0, #4]
 80086cc:	0052      	lsls	r2, r2, #1
 80086ce:	e7dc      	b.n	800868a <_dtoa_r+0x272>
 80086d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d2:	9a06      	ldr	r2, [sp, #24]
 80086d4:	601a      	str	r2, [r3, #0]
 80086d6:	9b07      	ldr	r3, [sp, #28]
 80086d8:	2b0e      	cmp	r3, #14
 80086da:	d900      	bls.n	80086de <_dtoa_r+0x2c6>
 80086dc:	e0eb      	b.n	80088b6 <_dtoa_r+0x49e>
 80086de:	2c00      	cmp	r4, #0
 80086e0:	d100      	bne.n	80086e4 <_dtoa_r+0x2cc>
 80086e2:	e0e8      	b.n	80088b6 <_dtoa_r+0x49e>
 80086e4:	9b02      	ldr	r3, [sp, #8]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	dd68      	ble.n	80087bc <_dtoa_r+0x3a4>
 80086ea:	001a      	movs	r2, r3
 80086ec:	210f      	movs	r1, #15
 80086ee:	4b2d      	ldr	r3, [pc, #180]	; (80087a4 <_dtoa_r+0x38c>)
 80086f0:	400a      	ands	r2, r1
 80086f2:	00d2      	lsls	r2, r2, #3
 80086f4:	189b      	adds	r3, r3, r2
 80086f6:	681d      	ldr	r5, [r3, #0]
 80086f8:	685e      	ldr	r6, [r3, #4]
 80086fa:	9b02      	ldr	r3, [sp, #8]
 80086fc:	111c      	asrs	r4, r3, #4
 80086fe:	2302      	movs	r3, #2
 8008700:	9310      	str	r3, [sp, #64]	; 0x40
 8008702:	9b02      	ldr	r3, [sp, #8]
 8008704:	05db      	lsls	r3, r3, #23
 8008706:	d50b      	bpl.n	8008720 <_dtoa_r+0x308>
 8008708:	4b2b      	ldr	r3, [pc, #172]	; (80087b8 <_dtoa_r+0x3a0>)
 800870a:	400c      	ands	r4, r1
 800870c:	6a1a      	ldr	r2, [r3, #32]
 800870e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008710:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008712:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008714:	f7f9 f860 	bl	80017d8 <__aeabi_ddiv>
 8008718:	2303      	movs	r3, #3
 800871a:	9008      	str	r0, [sp, #32]
 800871c:	9109      	str	r1, [sp, #36]	; 0x24
 800871e:	9310      	str	r3, [sp, #64]	; 0x40
 8008720:	4b25      	ldr	r3, [pc, #148]	; (80087b8 <_dtoa_r+0x3a0>)
 8008722:	9314      	str	r3, [sp, #80]	; 0x50
 8008724:	2c00      	cmp	r4, #0
 8008726:	d108      	bne.n	800873a <_dtoa_r+0x322>
 8008728:	9808      	ldr	r0, [sp, #32]
 800872a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800872c:	002a      	movs	r2, r5
 800872e:	0033      	movs	r3, r6
 8008730:	f7f9 f852 	bl	80017d8 <__aeabi_ddiv>
 8008734:	9008      	str	r0, [sp, #32]
 8008736:	9109      	str	r1, [sp, #36]	; 0x24
 8008738:	e05c      	b.n	80087f4 <_dtoa_r+0x3dc>
 800873a:	2301      	movs	r3, #1
 800873c:	421c      	tst	r4, r3
 800873e:	d00b      	beq.n	8008758 <_dtoa_r+0x340>
 8008740:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008742:	0028      	movs	r0, r5
 8008744:	3301      	adds	r3, #1
 8008746:	9310      	str	r3, [sp, #64]	; 0x40
 8008748:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800874a:	0031      	movs	r1, r6
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	f7f9 fc44 	bl	8001fdc <__aeabi_dmul>
 8008754:	0005      	movs	r5, r0
 8008756:	000e      	movs	r6, r1
 8008758:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800875a:	1064      	asrs	r4, r4, #1
 800875c:	3308      	adds	r3, #8
 800875e:	e7e0      	b.n	8008722 <_dtoa_r+0x30a>
 8008760:	0800bdfe 	.word	0x0800bdfe
 8008764:	0800be15 	.word	0x0800be15
 8008768:	7ff00000 	.word	0x7ff00000
 800876c:	0000270f 	.word	0x0000270f
 8008770:	0800bdfa 	.word	0x0800bdfa
 8008774:	0800bdfd 	.word	0x0800bdfd
 8008778:	0800c069 	.word	0x0800c069
 800877c:	0800c06a 	.word	0x0800c06a
 8008780:	3ff00000 	.word	0x3ff00000
 8008784:	fffffc01 	.word	0xfffffc01
 8008788:	3ff80000 	.word	0x3ff80000
 800878c:	636f4361 	.word	0x636f4361
 8008790:	3fd287a7 	.word	0x3fd287a7
 8008794:	8b60c8b3 	.word	0x8b60c8b3
 8008798:	3fc68a28 	.word	0x3fc68a28
 800879c:	509f79fb 	.word	0x509f79fb
 80087a0:	3fd34413 	.word	0x3fd34413
 80087a4:	0800bf80 	.word	0x0800bf80
 80087a8:	00000432 	.word	0x00000432
 80087ac:	00000412 	.word	0x00000412
 80087b0:	fe100000 	.word	0xfe100000
 80087b4:	0800be70 	.word	0x0800be70
 80087b8:	0800bf58 	.word	0x0800bf58
 80087bc:	2302      	movs	r3, #2
 80087be:	9310      	str	r3, [sp, #64]	; 0x40
 80087c0:	9b02      	ldr	r3, [sp, #8]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d016      	beq.n	80087f4 <_dtoa_r+0x3dc>
 80087c6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80087c8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80087ca:	425c      	negs	r4, r3
 80087cc:	230f      	movs	r3, #15
 80087ce:	4ab6      	ldr	r2, [pc, #728]	; (8008aa8 <_dtoa_r+0x690>)
 80087d0:	4023      	ands	r3, r4
 80087d2:	00db      	lsls	r3, r3, #3
 80087d4:	18d3      	adds	r3, r2, r3
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	f7f9 fbff 	bl	8001fdc <__aeabi_dmul>
 80087de:	2601      	movs	r6, #1
 80087e0:	2300      	movs	r3, #0
 80087e2:	9008      	str	r0, [sp, #32]
 80087e4:	9109      	str	r1, [sp, #36]	; 0x24
 80087e6:	4db1      	ldr	r5, [pc, #708]	; (8008aac <_dtoa_r+0x694>)
 80087e8:	1124      	asrs	r4, r4, #4
 80087ea:	2c00      	cmp	r4, #0
 80087ec:	d000      	beq.n	80087f0 <_dtoa_r+0x3d8>
 80087ee:	e094      	b.n	800891a <_dtoa_r+0x502>
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d19f      	bne.n	8008734 <_dtoa_r+0x31c>
 80087f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d100      	bne.n	80087fc <_dtoa_r+0x3e4>
 80087fa:	e09b      	b.n	8008934 <_dtoa_r+0x51c>
 80087fc:	9c08      	ldr	r4, [sp, #32]
 80087fe:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008800:	2200      	movs	r2, #0
 8008802:	0020      	movs	r0, r4
 8008804:	0029      	movs	r1, r5
 8008806:	4baa      	ldr	r3, [pc, #680]	; (8008ab0 <_dtoa_r+0x698>)
 8008808:	f7f7 fe26 	bl	8000458 <__aeabi_dcmplt>
 800880c:	2800      	cmp	r0, #0
 800880e:	d100      	bne.n	8008812 <_dtoa_r+0x3fa>
 8008810:	e090      	b.n	8008934 <_dtoa_r+0x51c>
 8008812:	9b07      	ldr	r3, [sp, #28]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d100      	bne.n	800881a <_dtoa_r+0x402>
 8008818:	e08c      	b.n	8008934 <_dtoa_r+0x51c>
 800881a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800881c:	2b00      	cmp	r3, #0
 800881e:	dd46      	ble.n	80088ae <_dtoa_r+0x496>
 8008820:	9b02      	ldr	r3, [sp, #8]
 8008822:	2200      	movs	r2, #0
 8008824:	0020      	movs	r0, r4
 8008826:	0029      	movs	r1, r5
 8008828:	1e5e      	subs	r6, r3, #1
 800882a:	4ba2      	ldr	r3, [pc, #648]	; (8008ab4 <_dtoa_r+0x69c>)
 800882c:	f7f9 fbd6 	bl	8001fdc <__aeabi_dmul>
 8008830:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008832:	9008      	str	r0, [sp, #32]
 8008834:	9109      	str	r1, [sp, #36]	; 0x24
 8008836:	3301      	adds	r3, #1
 8008838:	9310      	str	r3, [sp, #64]	; 0x40
 800883a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800883c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800883e:	9c08      	ldr	r4, [sp, #32]
 8008840:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008842:	9314      	str	r3, [sp, #80]	; 0x50
 8008844:	f7fa fa1c 	bl	8002c80 <__aeabi_i2d>
 8008848:	0022      	movs	r2, r4
 800884a:	002b      	movs	r3, r5
 800884c:	f7f9 fbc6 	bl	8001fdc <__aeabi_dmul>
 8008850:	2200      	movs	r2, #0
 8008852:	4b99      	ldr	r3, [pc, #612]	; (8008ab8 <_dtoa_r+0x6a0>)
 8008854:	f7f8 fc84 	bl	8001160 <__aeabi_dadd>
 8008858:	9010      	str	r0, [sp, #64]	; 0x40
 800885a:	9111      	str	r1, [sp, #68]	; 0x44
 800885c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800885e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008860:	9208      	str	r2, [sp, #32]
 8008862:	9309      	str	r3, [sp, #36]	; 0x24
 8008864:	4a95      	ldr	r2, [pc, #596]	; (8008abc <_dtoa_r+0x6a4>)
 8008866:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008868:	4694      	mov	ip, r2
 800886a:	4463      	add	r3, ip
 800886c:	9317      	str	r3, [sp, #92]	; 0x5c
 800886e:	9309      	str	r3, [sp, #36]	; 0x24
 8008870:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008872:	2b00      	cmp	r3, #0
 8008874:	d161      	bne.n	800893a <_dtoa_r+0x522>
 8008876:	2200      	movs	r2, #0
 8008878:	0020      	movs	r0, r4
 800887a:	0029      	movs	r1, r5
 800887c:	4b90      	ldr	r3, [pc, #576]	; (8008ac0 <_dtoa_r+0x6a8>)
 800887e:	f7f9 fe19 	bl	80024b4 <__aeabi_dsub>
 8008882:	9a08      	ldr	r2, [sp, #32]
 8008884:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008886:	0004      	movs	r4, r0
 8008888:	000d      	movs	r5, r1
 800888a:	f7f7 fdf9 	bl	8000480 <__aeabi_dcmpgt>
 800888e:	2800      	cmp	r0, #0
 8008890:	d000      	beq.n	8008894 <_dtoa_r+0x47c>
 8008892:	e2af      	b.n	8008df4 <_dtoa_r+0x9dc>
 8008894:	488b      	ldr	r0, [pc, #556]	; (8008ac4 <_dtoa_r+0x6ac>)
 8008896:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008898:	4684      	mov	ip, r0
 800889a:	4461      	add	r1, ip
 800889c:	000b      	movs	r3, r1
 800889e:	0020      	movs	r0, r4
 80088a0:	0029      	movs	r1, r5
 80088a2:	9a08      	ldr	r2, [sp, #32]
 80088a4:	f7f7 fdd8 	bl	8000458 <__aeabi_dcmplt>
 80088a8:	2800      	cmp	r0, #0
 80088aa:	d000      	beq.n	80088ae <_dtoa_r+0x496>
 80088ac:	e29f      	b.n	8008dee <_dtoa_r+0x9d6>
 80088ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80088b0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80088b2:	9308      	str	r3, [sp, #32]
 80088b4:	9409      	str	r4, [sp, #36]	; 0x24
 80088b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	da00      	bge.n	80088be <_dtoa_r+0x4a6>
 80088bc:	e172      	b.n	8008ba4 <_dtoa_r+0x78c>
 80088be:	9a02      	ldr	r2, [sp, #8]
 80088c0:	2a0e      	cmp	r2, #14
 80088c2:	dd00      	ble.n	80088c6 <_dtoa_r+0x4ae>
 80088c4:	e16e      	b.n	8008ba4 <_dtoa_r+0x78c>
 80088c6:	4b78      	ldr	r3, [pc, #480]	; (8008aa8 <_dtoa_r+0x690>)
 80088c8:	00d2      	lsls	r2, r2, #3
 80088ca:	189b      	adds	r3, r3, r2
 80088cc:	685c      	ldr	r4, [r3, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	930a      	str	r3, [sp, #40]	; 0x28
 80088d2:	940b      	str	r4, [sp, #44]	; 0x2c
 80088d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	db00      	blt.n	80088dc <_dtoa_r+0x4c4>
 80088da:	e0f7      	b.n	8008acc <_dtoa_r+0x6b4>
 80088dc:	9b07      	ldr	r3, [sp, #28]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	dd00      	ble.n	80088e4 <_dtoa_r+0x4cc>
 80088e2:	e0f3      	b.n	8008acc <_dtoa_r+0x6b4>
 80088e4:	d000      	beq.n	80088e8 <_dtoa_r+0x4d0>
 80088e6:	e282      	b.n	8008dee <_dtoa_r+0x9d6>
 80088e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80088ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80088ec:	2200      	movs	r2, #0
 80088ee:	4b74      	ldr	r3, [pc, #464]	; (8008ac0 <_dtoa_r+0x6a8>)
 80088f0:	f7f9 fb74 	bl	8001fdc <__aeabi_dmul>
 80088f4:	9a08      	ldr	r2, [sp, #32]
 80088f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088f8:	f7f7 fdcc 	bl	8000494 <__aeabi_dcmpge>
 80088fc:	9e07      	ldr	r6, [sp, #28]
 80088fe:	0035      	movs	r5, r6
 8008900:	2800      	cmp	r0, #0
 8008902:	d000      	beq.n	8008906 <_dtoa_r+0x4ee>
 8008904:	e259      	b.n	8008dba <_dtoa_r+0x9a2>
 8008906:	9b06      	ldr	r3, [sp, #24]
 8008908:	9a06      	ldr	r2, [sp, #24]
 800890a:	3301      	adds	r3, #1
 800890c:	9308      	str	r3, [sp, #32]
 800890e:	2331      	movs	r3, #49	; 0x31
 8008910:	7013      	strb	r3, [r2, #0]
 8008912:	9b02      	ldr	r3, [sp, #8]
 8008914:	3301      	adds	r3, #1
 8008916:	9302      	str	r3, [sp, #8]
 8008918:	e254      	b.n	8008dc4 <_dtoa_r+0x9ac>
 800891a:	4234      	tst	r4, r6
 800891c:	d007      	beq.n	800892e <_dtoa_r+0x516>
 800891e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008920:	3301      	adds	r3, #1
 8008922:	9310      	str	r3, [sp, #64]	; 0x40
 8008924:	682a      	ldr	r2, [r5, #0]
 8008926:	686b      	ldr	r3, [r5, #4]
 8008928:	f7f9 fb58 	bl	8001fdc <__aeabi_dmul>
 800892c:	0033      	movs	r3, r6
 800892e:	1064      	asrs	r4, r4, #1
 8008930:	3508      	adds	r5, #8
 8008932:	e75a      	b.n	80087ea <_dtoa_r+0x3d2>
 8008934:	9e02      	ldr	r6, [sp, #8]
 8008936:	9b07      	ldr	r3, [sp, #28]
 8008938:	e780      	b.n	800883c <_dtoa_r+0x424>
 800893a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800893c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800893e:	1e5a      	subs	r2, r3, #1
 8008940:	4b59      	ldr	r3, [pc, #356]	; (8008aa8 <_dtoa_r+0x690>)
 8008942:	00d2      	lsls	r2, r2, #3
 8008944:	189b      	adds	r3, r3, r2
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	2900      	cmp	r1, #0
 800894c:	d051      	beq.n	80089f2 <_dtoa_r+0x5da>
 800894e:	2000      	movs	r0, #0
 8008950:	495d      	ldr	r1, [pc, #372]	; (8008ac8 <_dtoa_r+0x6b0>)
 8008952:	f7f8 ff41 	bl	80017d8 <__aeabi_ddiv>
 8008956:	9a08      	ldr	r2, [sp, #32]
 8008958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800895a:	f7f9 fdab 	bl	80024b4 <__aeabi_dsub>
 800895e:	9a06      	ldr	r2, [sp, #24]
 8008960:	9b06      	ldr	r3, [sp, #24]
 8008962:	4694      	mov	ip, r2
 8008964:	9317      	str	r3, [sp, #92]	; 0x5c
 8008966:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008968:	9010      	str	r0, [sp, #64]	; 0x40
 800896a:	9111      	str	r1, [sp, #68]	; 0x44
 800896c:	4463      	add	r3, ip
 800896e:	9319      	str	r3, [sp, #100]	; 0x64
 8008970:	0029      	movs	r1, r5
 8008972:	0020      	movs	r0, r4
 8008974:	f7fa f94e 	bl	8002c14 <__aeabi_d2iz>
 8008978:	9014      	str	r0, [sp, #80]	; 0x50
 800897a:	f7fa f981 	bl	8002c80 <__aeabi_i2d>
 800897e:	0002      	movs	r2, r0
 8008980:	000b      	movs	r3, r1
 8008982:	0020      	movs	r0, r4
 8008984:	0029      	movs	r1, r5
 8008986:	f7f9 fd95 	bl	80024b4 <__aeabi_dsub>
 800898a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800898c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800898e:	3301      	adds	r3, #1
 8008990:	9308      	str	r3, [sp, #32]
 8008992:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008994:	0004      	movs	r4, r0
 8008996:	3330      	adds	r3, #48	; 0x30
 8008998:	7013      	strb	r3, [r2, #0]
 800899a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800899c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800899e:	000d      	movs	r5, r1
 80089a0:	f7f7 fd5a 	bl	8000458 <__aeabi_dcmplt>
 80089a4:	2800      	cmp	r0, #0
 80089a6:	d175      	bne.n	8008a94 <_dtoa_r+0x67c>
 80089a8:	0022      	movs	r2, r4
 80089aa:	002b      	movs	r3, r5
 80089ac:	2000      	movs	r0, #0
 80089ae:	4940      	ldr	r1, [pc, #256]	; (8008ab0 <_dtoa_r+0x698>)
 80089b0:	f7f9 fd80 	bl	80024b4 <__aeabi_dsub>
 80089b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80089b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80089b8:	f7f7 fd4e 	bl	8000458 <__aeabi_dcmplt>
 80089bc:	2800      	cmp	r0, #0
 80089be:	d000      	beq.n	80089c2 <_dtoa_r+0x5aa>
 80089c0:	e0d2      	b.n	8008b68 <_dtoa_r+0x750>
 80089c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80089c4:	9a08      	ldr	r2, [sp, #32]
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d100      	bne.n	80089cc <_dtoa_r+0x5b4>
 80089ca:	e770      	b.n	80088ae <_dtoa_r+0x496>
 80089cc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80089ce:	9911      	ldr	r1, [sp, #68]	; 0x44
 80089d0:	2200      	movs	r2, #0
 80089d2:	4b38      	ldr	r3, [pc, #224]	; (8008ab4 <_dtoa_r+0x69c>)
 80089d4:	f7f9 fb02 	bl	8001fdc <__aeabi_dmul>
 80089d8:	4b36      	ldr	r3, [pc, #216]	; (8008ab4 <_dtoa_r+0x69c>)
 80089da:	9010      	str	r0, [sp, #64]	; 0x40
 80089dc:	9111      	str	r1, [sp, #68]	; 0x44
 80089de:	2200      	movs	r2, #0
 80089e0:	0020      	movs	r0, r4
 80089e2:	0029      	movs	r1, r5
 80089e4:	f7f9 fafa 	bl	8001fdc <__aeabi_dmul>
 80089e8:	9b08      	ldr	r3, [sp, #32]
 80089ea:	0004      	movs	r4, r0
 80089ec:	000d      	movs	r5, r1
 80089ee:	9317      	str	r3, [sp, #92]	; 0x5c
 80089f0:	e7be      	b.n	8008970 <_dtoa_r+0x558>
 80089f2:	9808      	ldr	r0, [sp, #32]
 80089f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089f6:	f7f9 faf1 	bl	8001fdc <__aeabi_dmul>
 80089fa:	9a06      	ldr	r2, [sp, #24]
 80089fc:	9b06      	ldr	r3, [sp, #24]
 80089fe:	4694      	mov	ip, r2
 8008a00:	9308      	str	r3, [sp, #32]
 8008a02:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008a04:	9010      	str	r0, [sp, #64]	; 0x40
 8008a06:	9111      	str	r1, [sp, #68]	; 0x44
 8008a08:	4463      	add	r3, ip
 8008a0a:	9319      	str	r3, [sp, #100]	; 0x64
 8008a0c:	0029      	movs	r1, r5
 8008a0e:	0020      	movs	r0, r4
 8008a10:	f7fa f900 	bl	8002c14 <__aeabi_d2iz>
 8008a14:	9017      	str	r0, [sp, #92]	; 0x5c
 8008a16:	f7fa f933 	bl	8002c80 <__aeabi_i2d>
 8008a1a:	0002      	movs	r2, r0
 8008a1c:	000b      	movs	r3, r1
 8008a1e:	0020      	movs	r0, r4
 8008a20:	0029      	movs	r1, r5
 8008a22:	f7f9 fd47 	bl	80024b4 <__aeabi_dsub>
 8008a26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a28:	9a08      	ldr	r2, [sp, #32]
 8008a2a:	3330      	adds	r3, #48	; 0x30
 8008a2c:	7013      	strb	r3, [r2, #0]
 8008a2e:	0013      	movs	r3, r2
 8008a30:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008a32:	3301      	adds	r3, #1
 8008a34:	0004      	movs	r4, r0
 8008a36:	000d      	movs	r5, r1
 8008a38:	9308      	str	r3, [sp, #32]
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d12c      	bne.n	8008a98 <_dtoa_r+0x680>
 8008a3e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008a40:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008a42:	9a06      	ldr	r2, [sp, #24]
 8008a44:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008a46:	4694      	mov	ip, r2
 8008a48:	4463      	add	r3, ip
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	9308      	str	r3, [sp, #32]
 8008a4e:	4b1e      	ldr	r3, [pc, #120]	; (8008ac8 <_dtoa_r+0x6b0>)
 8008a50:	f7f8 fb86 	bl	8001160 <__aeabi_dadd>
 8008a54:	0002      	movs	r2, r0
 8008a56:	000b      	movs	r3, r1
 8008a58:	0020      	movs	r0, r4
 8008a5a:	0029      	movs	r1, r5
 8008a5c:	f7f7 fd10 	bl	8000480 <__aeabi_dcmpgt>
 8008a60:	2800      	cmp	r0, #0
 8008a62:	d000      	beq.n	8008a66 <_dtoa_r+0x64e>
 8008a64:	e080      	b.n	8008b68 <_dtoa_r+0x750>
 8008a66:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008a68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a6a:	2000      	movs	r0, #0
 8008a6c:	4916      	ldr	r1, [pc, #88]	; (8008ac8 <_dtoa_r+0x6b0>)
 8008a6e:	f7f9 fd21 	bl	80024b4 <__aeabi_dsub>
 8008a72:	0002      	movs	r2, r0
 8008a74:	000b      	movs	r3, r1
 8008a76:	0020      	movs	r0, r4
 8008a78:	0029      	movs	r1, r5
 8008a7a:	f7f7 fced 	bl	8000458 <__aeabi_dcmplt>
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	d100      	bne.n	8008a84 <_dtoa_r+0x66c>
 8008a82:	e714      	b.n	80088ae <_dtoa_r+0x496>
 8008a84:	9b08      	ldr	r3, [sp, #32]
 8008a86:	001a      	movs	r2, r3
 8008a88:	3a01      	subs	r2, #1
 8008a8a:	9208      	str	r2, [sp, #32]
 8008a8c:	7812      	ldrb	r2, [r2, #0]
 8008a8e:	2a30      	cmp	r2, #48	; 0x30
 8008a90:	d0f8      	beq.n	8008a84 <_dtoa_r+0x66c>
 8008a92:	9308      	str	r3, [sp, #32]
 8008a94:	9602      	str	r6, [sp, #8]
 8008a96:	e055      	b.n	8008b44 <_dtoa_r+0x72c>
 8008a98:	2200      	movs	r2, #0
 8008a9a:	4b06      	ldr	r3, [pc, #24]	; (8008ab4 <_dtoa_r+0x69c>)
 8008a9c:	f7f9 fa9e 	bl	8001fdc <__aeabi_dmul>
 8008aa0:	0004      	movs	r4, r0
 8008aa2:	000d      	movs	r5, r1
 8008aa4:	e7b2      	b.n	8008a0c <_dtoa_r+0x5f4>
 8008aa6:	46c0      	nop			; (mov r8, r8)
 8008aa8:	0800bf80 	.word	0x0800bf80
 8008aac:	0800bf58 	.word	0x0800bf58
 8008ab0:	3ff00000 	.word	0x3ff00000
 8008ab4:	40240000 	.word	0x40240000
 8008ab8:	401c0000 	.word	0x401c0000
 8008abc:	fcc00000 	.word	0xfcc00000
 8008ac0:	40140000 	.word	0x40140000
 8008ac4:	7cc00000 	.word	0x7cc00000
 8008ac8:	3fe00000 	.word	0x3fe00000
 8008acc:	9b07      	ldr	r3, [sp, #28]
 8008ace:	9e06      	ldr	r6, [sp, #24]
 8008ad0:	3b01      	subs	r3, #1
 8008ad2:	199b      	adds	r3, r3, r6
 8008ad4:	930c      	str	r3, [sp, #48]	; 0x30
 8008ad6:	9c08      	ldr	r4, [sp, #32]
 8008ad8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008ada:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008adc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ade:	0020      	movs	r0, r4
 8008ae0:	0029      	movs	r1, r5
 8008ae2:	f7f8 fe79 	bl	80017d8 <__aeabi_ddiv>
 8008ae6:	f7fa f895 	bl	8002c14 <__aeabi_d2iz>
 8008aea:	9007      	str	r0, [sp, #28]
 8008aec:	f7fa f8c8 	bl	8002c80 <__aeabi_i2d>
 8008af0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008af2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008af4:	f7f9 fa72 	bl	8001fdc <__aeabi_dmul>
 8008af8:	0002      	movs	r2, r0
 8008afa:	000b      	movs	r3, r1
 8008afc:	0020      	movs	r0, r4
 8008afe:	0029      	movs	r1, r5
 8008b00:	f7f9 fcd8 	bl	80024b4 <__aeabi_dsub>
 8008b04:	0033      	movs	r3, r6
 8008b06:	9a07      	ldr	r2, [sp, #28]
 8008b08:	3601      	adds	r6, #1
 8008b0a:	3230      	adds	r2, #48	; 0x30
 8008b0c:	701a      	strb	r2, [r3, #0]
 8008b0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b10:	9608      	str	r6, [sp, #32]
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d139      	bne.n	8008b8a <_dtoa_r+0x772>
 8008b16:	0002      	movs	r2, r0
 8008b18:	000b      	movs	r3, r1
 8008b1a:	f7f8 fb21 	bl	8001160 <__aeabi_dadd>
 8008b1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b22:	0004      	movs	r4, r0
 8008b24:	000d      	movs	r5, r1
 8008b26:	f7f7 fcab 	bl	8000480 <__aeabi_dcmpgt>
 8008b2a:	2800      	cmp	r0, #0
 8008b2c:	d11b      	bne.n	8008b66 <_dtoa_r+0x74e>
 8008b2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b32:	0020      	movs	r0, r4
 8008b34:	0029      	movs	r1, r5
 8008b36:	f7f7 fc89 	bl	800044c <__aeabi_dcmpeq>
 8008b3a:	2800      	cmp	r0, #0
 8008b3c:	d002      	beq.n	8008b44 <_dtoa_r+0x72c>
 8008b3e:	9b07      	ldr	r3, [sp, #28]
 8008b40:	07db      	lsls	r3, r3, #31
 8008b42:	d410      	bmi.n	8008b66 <_dtoa_r+0x74e>
 8008b44:	0038      	movs	r0, r7
 8008b46:	9905      	ldr	r1, [sp, #20]
 8008b48:	f000 fe80 	bl	800984c <_Bfree>
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	9a08      	ldr	r2, [sp, #32]
 8008b50:	9802      	ldr	r0, [sp, #8]
 8008b52:	7013      	strb	r3, [r2, #0]
 8008b54:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008b56:	3001      	adds	r0, #1
 8008b58:	6018      	str	r0, [r3, #0]
 8008b5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d100      	bne.n	8008b62 <_dtoa_r+0x74a>
 8008b60:	e4a6      	b.n	80084b0 <_dtoa_r+0x98>
 8008b62:	601a      	str	r2, [r3, #0]
 8008b64:	e4a4      	b.n	80084b0 <_dtoa_r+0x98>
 8008b66:	9e02      	ldr	r6, [sp, #8]
 8008b68:	9b08      	ldr	r3, [sp, #32]
 8008b6a:	9308      	str	r3, [sp, #32]
 8008b6c:	3b01      	subs	r3, #1
 8008b6e:	781a      	ldrb	r2, [r3, #0]
 8008b70:	2a39      	cmp	r2, #57	; 0x39
 8008b72:	d106      	bne.n	8008b82 <_dtoa_r+0x76a>
 8008b74:	9a06      	ldr	r2, [sp, #24]
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d1f7      	bne.n	8008b6a <_dtoa_r+0x752>
 8008b7a:	2230      	movs	r2, #48	; 0x30
 8008b7c:	9906      	ldr	r1, [sp, #24]
 8008b7e:	3601      	adds	r6, #1
 8008b80:	700a      	strb	r2, [r1, #0]
 8008b82:	781a      	ldrb	r2, [r3, #0]
 8008b84:	3201      	adds	r2, #1
 8008b86:	701a      	strb	r2, [r3, #0]
 8008b88:	e784      	b.n	8008a94 <_dtoa_r+0x67c>
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	4baa      	ldr	r3, [pc, #680]	; (8008e38 <_dtoa_r+0xa20>)
 8008b8e:	f7f9 fa25 	bl	8001fdc <__aeabi_dmul>
 8008b92:	2200      	movs	r2, #0
 8008b94:	2300      	movs	r3, #0
 8008b96:	0004      	movs	r4, r0
 8008b98:	000d      	movs	r5, r1
 8008b9a:	f7f7 fc57 	bl	800044c <__aeabi_dcmpeq>
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	d09b      	beq.n	8008ada <_dtoa_r+0x6c2>
 8008ba2:	e7cf      	b.n	8008b44 <_dtoa_r+0x72c>
 8008ba4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008ba6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008ba8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008baa:	2d00      	cmp	r5, #0
 8008bac:	d012      	beq.n	8008bd4 <_dtoa_r+0x7bc>
 8008bae:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008bb0:	2a01      	cmp	r2, #1
 8008bb2:	dc66      	bgt.n	8008c82 <_dtoa_r+0x86a>
 8008bb4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008bb6:	2a00      	cmp	r2, #0
 8008bb8:	d05d      	beq.n	8008c76 <_dtoa_r+0x85e>
 8008bba:	4aa0      	ldr	r2, [pc, #640]	; (8008e3c <_dtoa_r+0xa24>)
 8008bbc:	189b      	adds	r3, r3, r2
 8008bbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bc0:	2101      	movs	r1, #1
 8008bc2:	18d2      	adds	r2, r2, r3
 8008bc4:	920a      	str	r2, [sp, #40]	; 0x28
 8008bc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008bc8:	0038      	movs	r0, r7
 8008bca:	18d3      	adds	r3, r2, r3
 8008bcc:	930d      	str	r3, [sp, #52]	; 0x34
 8008bce:	f000 ff39 	bl	8009a44 <__i2b>
 8008bd2:	0005      	movs	r5, r0
 8008bd4:	2c00      	cmp	r4, #0
 8008bd6:	dd0e      	ble.n	8008bf6 <_dtoa_r+0x7de>
 8008bd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	dd0b      	ble.n	8008bf6 <_dtoa_r+0x7de>
 8008bde:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008be0:	0023      	movs	r3, r4
 8008be2:	4294      	cmp	r4, r2
 8008be4:	dd00      	ble.n	8008be8 <_dtoa_r+0x7d0>
 8008be6:	0013      	movs	r3, r2
 8008be8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bea:	1ae4      	subs	r4, r4, r3
 8008bec:	1ad2      	subs	r2, r2, r3
 8008bee:	920a      	str	r2, [sp, #40]	; 0x28
 8008bf0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008bf2:	1ad3      	subs	r3, r2, r3
 8008bf4:	930d      	str	r3, [sp, #52]	; 0x34
 8008bf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d01f      	beq.n	8008c3c <_dtoa_r+0x824>
 8008bfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d054      	beq.n	8008cac <_dtoa_r+0x894>
 8008c02:	2e00      	cmp	r6, #0
 8008c04:	dd11      	ble.n	8008c2a <_dtoa_r+0x812>
 8008c06:	0029      	movs	r1, r5
 8008c08:	0032      	movs	r2, r6
 8008c0a:	0038      	movs	r0, r7
 8008c0c:	f000 ffe0 	bl	8009bd0 <__pow5mult>
 8008c10:	9a05      	ldr	r2, [sp, #20]
 8008c12:	0001      	movs	r1, r0
 8008c14:	0005      	movs	r5, r0
 8008c16:	0038      	movs	r0, r7
 8008c18:	f000 ff2a 	bl	8009a70 <__multiply>
 8008c1c:	9905      	ldr	r1, [sp, #20]
 8008c1e:	9014      	str	r0, [sp, #80]	; 0x50
 8008c20:	0038      	movs	r0, r7
 8008c22:	f000 fe13 	bl	800984c <_Bfree>
 8008c26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c28:	9305      	str	r3, [sp, #20]
 8008c2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c2c:	1b9a      	subs	r2, r3, r6
 8008c2e:	42b3      	cmp	r3, r6
 8008c30:	d004      	beq.n	8008c3c <_dtoa_r+0x824>
 8008c32:	0038      	movs	r0, r7
 8008c34:	9905      	ldr	r1, [sp, #20]
 8008c36:	f000 ffcb 	bl	8009bd0 <__pow5mult>
 8008c3a:	9005      	str	r0, [sp, #20]
 8008c3c:	2101      	movs	r1, #1
 8008c3e:	0038      	movs	r0, r7
 8008c40:	f000 ff00 	bl	8009a44 <__i2b>
 8008c44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c46:	0006      	movs	r6, r0
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	dd31      	ble.n	8008cb0 <_dtoa_r+0x898>
 8008c4c:	001a      	movs	r2, r3
 8008c4e:	0001      	movs	r1, r0
 8008c50:	0038      	movs	r0, r7
 8008c52:	f000 ffbd 	bl	8009bd0 <__pow5mult>
 8008c56:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c58:	0006      	movs	r6, r0
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	dd2d      	ble.n	8008cba <_dtoa_r+0x8a2>
 8008c5e:	2300      	movs	r3, #0
 8008c60:	930e      	str	r3, [sp, #56]	; 0x38
 8008c62:	6933      	ldr	r3, [r6, #16]
 8008c64:	3303      	adds	r3, #3
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	18f3      	adds	r3, r6, r3
 8008c6a:	6858      	ldr	r0, [r3, #4]
 8008c6c:	f000 fea2 	bl	80099b4 <__hi0bits>
 8008c70:	2320      	movs	r3, #32
 8008c72:	1a18      	subs	r0, r3, r0
 8008c74:	e039      	b.n	8008cea <_dtoa_r+0x8d2>
 8008c76:	2336      	movs	r3, #54	; 0x36
 8008c78:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008c7a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008c7c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008c7e:	1a9b      	subs	r3, r3, r2
 8008c80:	e79d      	b.n	8008bbe <_dtoa_r+0x7a6>
 8008c82:	9b07      	ldr	r3, [sp, #28]
 8008c84:	1e5e      	subs	r6, r3, #1
 8008c86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c88:	42b3      	cmp	r3, r6
 8008c8a:	db07      	blt.n	8008c9c <_dtoa_r+0x884>
 8008c8c:	1b9e      	subs	r6, r3, r6
 8008c8e:	9b07      	ldr	r3, [sp, #28]
 8008c90:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	da93      	bge.n	8008bbe <_dtoa_r+0x7a6>
 8008c96:	1ae4      	subs	r4, r4, r3
 8008c98:	2300      	movs	r3, #0
 8008c9a:	e790      	b.n	8008bbe <_dtoa_r+0x7a6>
 8008c9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c9e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008ca0:	1af3      	subs	r3, r6, r3
 8008ca2:	18d3      	adds	r3, r2, r3
 8008ca4:	960e      	str	r6, [sp, #56]	; 0x38
 8008ca6:	9315      	str	r3, [sp, #84]	; 0x54
 8008ca8:	2600      	movs	r6, #0
 8008caa:	e7f0      	b.n	8008c8e <_dtoa_r+0x876>
 8008cac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008cae:	e7c0      	b.n	8008c32 <_dtoa_r+0x81a>
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	930e      	str	r3, [sp, #56]	; 0x38
 8008cb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	dc13      	bgt.n	8008ce2 <_dtoa_r+0x8ca>
 8008cba:	2300      	movs	r3, #0
 8008cbc:	930e      	str	r3, [sp, #56]	; 0x38
 8008cbe:	9b08      	ldr	r3, [sp, #32]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d10e      	bne.n	8008ce2 <_dtoa_r+0x8ca>
 8008cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cc6:	031b      	lsls	r3, r3, #12
 8008cc8:	d10b      	bne.n	8008ce2 <_dtoa_r+0x8ca>
 8008cca:	4b5d      	ldr	r3, [pc, #372]	; (8008e40 <_dtoa_r+0xa28>)
 8008ccc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cce:	4213      	tst	r3, r2
 8008cd0:	d007      	beq.n	8008ce2 <_dtoa_r+0x8ca>
 8008cd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	930a      	str	r3, [sp, #40]	; 0x28
 8008cd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008cda:	3301      	adds	r3, #1
 8008cdc:	930d      	str	r3, [sp, #52]	; 0x34
 8008cde:	2301      	movs	r3, #1
 8008ce0:	930e      	str	r3, [sp, #56]	; 0x38
 8008ce2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ce4:	2001      	movs	r0, #1
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d1bb      	bne.n	8008c62 <_dtoa_r+0x84a>
 8008cea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008cec:	221f      	movs	r2, #31
 8008cee:	1818      	adds	r0, r3, r0
 8008cf0:	0003      	movs	r3, r0
 8008cf2:	4013      	ands	r3, r2
 8008cf4:	4210      	tst	r0, r2
 8008cf6:	d046      	beq.n	8008d86 <_dtoa_r+0x96e>
 8008cf8:	3201      	adds	r2, #1
 8008cfa:	1ad2      	subs	r2, r2, r3
 8008cfc:	2a04      	cmp	r2, #4
 8008cfe:	dd3f      	ble.n	8008d80 <_dtoa_r+0x968>
 8008d00:	221c      	movs	r2, #28
 8008d02:	1ad3      	subs	r3, r2, r3
 8008d04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d06:	18e4      	adds	r4, r4, r3
 8008d08:	18d2      	adds	r2, r2, r3
 8008d0a:	920a      	str	r2, [sp, #40]	; 0x28
 8008d0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d0e:	18d3      	adds	r3, r2, r3
 8008d10:	930d      	str	r3, [sp, #52]	; 0x34
 8008d12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	dd05      	ble.n	8008d24 <_dtoa_r+0x90c>
 8008d18:	001a      	movs	r2, r3
 8008d1a:	0038      	movs	r0, r7
 8008d1c:	9905      	ldr	r1, [sp, #20]
 8008d1e:	f000 ffb3 	bl	8009c88 <__lshift>
 8008d22:	9005      	str	r0, [sp, #20]
 8008d24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	dd05      	ble.n	8008d36 <_dtoa_r+0x91e>
 8008d2a:	0031      	movs	r1, r6
 8008d2c:	001a      	movs	r2, r3
 8008d2e:	0038      	movs	r0, r7
 8008d30:	f000 ffaa 	bl	8009c88 <__lshift>
 8008d34:	0006      	movs	r6, r0
 8008d36:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d026      	beq.n	8008d8a <_dtoa_r+0x972>
 8008d3c:	0031      	movs	r1, r6
 8008d3e:	9805      	ldr	r0, [sp, #20]
 8008d40:	f001 f810 	bl	8009d64 <__mcmp>
 8008d44:	2800      	cmp	r0, #0
 8008d46:	da20      	bge.n	8008d8a <_dtoa_r+0x972>
 8008d48:	9b02      	ldr	r3, [sp, #8]
 8008d4a:	220a      	movs	r2, #10
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	9302      	str	r3, [sp, #8]
 8008d50:	0038      	movs	r0, r7
 8008d52:	2300      	movs	r3, #0
 8008d54:	9905      	ldr	r1, [sp, #20]
 8008d56:	f000 fd9d 	bl	8009894 <__multadd>
 8008d5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d5c:	9005      	str	r0, [sp, #20]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d100      	bne.n	8008d64 <_dtoa_r+0x94c>
 8008d62:	e166      	b.n	8009032 <_dtoa_r+0xc1a>
 8008d64:	2300      	movs	r3, #0
 8008d66:	0029      	movs	r1, r5
 8008d68:	220a      	movs	r2, #10
 8008d6a:	0038      	movs	r0, r7
 8008d6c:	f000 fd92 	bl	8009894 <__multadd>
 8008d70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d72:	0005      	movs	r5, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	dc47      	bgt.n	8008e08 <_dtoa_r+0x9f0>
 8008d78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d7a:	2b02      	cmp	r3, #2
 8008d7c:	dc0d      	bgt.n	8008d9a <_dtoa_r+0x982>
 8008d7e:	e043      	b.n	8008e08 <_dtoa_r+0x9f0>
 8008d80:	2a04      	cmp	r2, #4
 8008d82:	d0c6      	beq.n	8008d12 <_dtoa_r+0x8fa>
 8008d84:	0013      	movs	r3, r2
 8008d86:	331c      	adds	r3, #28
 8008d88:	e7bc      	b.n	8008d04 <_dtoa_r+0x8ec>
 8008d8a:	9b07      	ldr	r3, [sp, #28]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	dc35      	bgt.n	8008dfc <_dtoa_r+0x9e4>
 8008d90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d92:	2b02      	cmp	r3, #2
 8008d94:	dd32      	ble.n	8008dfc <_dtoa_r+0x9e4>
 8008d96:	9b07      	ldr	r3, [sp, #28]
 8008d98:	930c      	str	r3, [sp, #48]	; 0x30
 8008d9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d10c      	bne.n	8008dba <_dtoa_r+0x9a2>
 8008da0:	0031      	movs	r1, r6
 8008da2:	2205      	movs	r2, #5
 8008da4:	0038      	movs	r0, r7
 8008da6:	f000 fd75 	bl	8009894 <__multadd>
 8008daa:	0006      	movs	r6, r0
 8008dac:	0001      	movs	r1, r0
 8008dae:	9805      	ldr	r0, [sp, #20]
 8008db0:	f000 ffd8 	bl	8009d64 <__mcmp>
 8008db4:	2800      	cmp	r0, #0
 8008db6:	dd00      	ble.n	8008dba <_dtoa_r+0x9a2>
 8008db8:	e5a5      	b.n	8008906 <_dtoa_r+0x4ee>
 8008dba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008dbc:	43db      	mvns	r3, r3
 8008dbe:	9302      	str	r3, [sp, #8]
 8008dc0:	9b06      	ldr	r3, [sp, #24]
 8008dc2:	9308      	str	r3, [sp, #32]
 8008dc4:	2400      	movs	r4, #0
 8008dc6:	0031      	movs	r1, r6
 8008dc8:	0038      	movs	r0, r7
 8008dca:	f000 fd3f 	bl	800984c <_Bfree>
 8008dce:	2d00      	cmp	r5, #0
 8008dd0:	d100      	bne.n	8008dd4 <_dtoa_r+0x9bc>
 8008dd2:	e6b7      	b.n	8008b44 <_dtoa_r+0x72c>
 8008dd4:	2c00      	cmp	r4, #0
 8008dd6:	d005      	beq.n	8008de4 <_dtoa_r+0x9cc>
 8008dd8:	42ac      	cmp	r4, r5
 8008dda:	d003      	beq.n	8008de4 <_dtoa_r+0x9cc>
 8008ddc:	0021      	movs	r1, r4
 8008dde:	0038      	movs	r0, r7
 8008de0:	f000 fd34 	bl	800984c <_Bfree>
 8008de4:	0029      	movs	r1, r5
 8008de6:	0038      	movs	r0, r7
 8008de8:	f000 fd30 	bl	800984c <_Bfree>
 8008dec:	e6aa      	b.n	8008b44 <_dtoa_r+0x72c>
 8008dee:	2600      	movs	r6, #0
 8008df0:	0035      	movs	r5, r6
 8008df2:	e7e2      	b.n	8008dba <_dtoa_r+0x9a2>
 8008df4:	9602      	str	r6, [sp, #8]
 8008df6:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8008df8:	0035      	movs	r5, r6
 8008dfa:	e584      	b.n	8008906 <_dtoa_r+0x4ee>
 8008dfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d100      	bne.n	8008e04 <_dtoa_r+0x9ec>
 8008e02:	e0ce      	b.n	8008fa2 <_dtoa_r+0xb8a>
 8008e04:	9b07      	ldr	r3, [sp, #28]
 8008e06:	930c      	str	r3, [sp, #48]	; 0x30
 8008e08:	2c00      	cmp	r4, #0
 8008e0a:	dd05      	ble.n	8008e18 <_dtoa_r+0xa00>
 8008e0c:	0029      	movs	r1, r5
 8008e0e:	0022      	movs	r2, r4
 8008e10:	0038      	movs	r0, r7
 8008e12:	f000 ff39 	bl	8009c88 <__lshift>
 8008e16:	0005      	movs	r5, r0
 8008e18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e1a:	0028      	movs	r0, r5
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d022      	beq.n	8008e66 <_dtoa_r+0xa4e>
 8008e20:	0038      	movs	r0, r7
 8008e22:	6869      	ldr	r1, [r5, #4]
 8008e24:	f000 fcce 	bl	80097c4 <_Balloc>
 8008e28:	1e04      	subs	r4, r0, #0
 8008e2a:	d10f      	bne.n	8008e4c <_dtoa_r+0xa34>
 8008e2c:	0002      	movs	r2, r0
 8008e2e:	4b05      	ldr	r3, [pc, #20]	; (8008e44 <_dtoa_r+0xa2c>)
 8008e30:	4905      	ldr	r1, [pc, #20]	; (8008e48 <_dtoa_r+0xa30>)
 8008e32:	f7ff fb06 	bl	8008442 <_dtoa_r+0x2a>
 8008e36:	46c0      	nop			; (mov r8, r8)
 8008e38:	40240000 	.word	0x40240000
 8008e3c:	00000433 	.word	0x00000433
 8008e40:	7ff00000 	.word	0x7ff00000
 8008e44:	0800be70 	.word	0x0800be70
 8008e48:	000002ea 	.word	0x000002ea
 8008e4c:	0029      	movs	r1, r5
 8008e4e:	692b      	ldr	r3, [r5, #16]
 8008e50:	310c      	adds	r1, #12
 8008e52:	1c9a      	adds	r2, r3, #2
 8008e54:	0092      	lsls	r2, r2, #2
 8008e56:	300c      	adds	r0, #12
 8008e58:	f000 fcab 	bl	80097b2 <memcpy>
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	0021      	movs	r1, r4
 8008e60:	0038      	movs	r0, r7
 8008e62:	f000 ff11 	bl	8009c88 <__lshift>
 8008e66:	9b06      	ldr	r3, [sp, #24]
 8008e68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e6a:	930a      	str	r3, [sp, #40]	; 0x28
 8008e6c:	3b01      	subs	r3, #1
 8008e6e:	189b      	adds	r3, r3, r2
 8008e70:	2201      	movs	r2, #1
 8008e72:	002c      	movs	r4, r5
 8008e74:	0005      	movs	r5, r0
 8008e76:	9314      	str	r3, [sp, #80]	; 0x50
 8008e78:	9b08      	ldr	r3, [sp, #32]
 8008e7a:	4013      	ands	r3, r2
 8008e7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e7e:	0031      	movs	r1, r6
 8008e80:	9805      	ldr	r0, [sp, #20]
 8008e82:	f7ff fa3d 	bl	8008300 <quorem>
 8008e86:	0003      	movs	r3, r0
 8008e88:	0021      	movs	r1, r4
 8008e8a:	3330      	adds	r3, #48	; 0x30
 8008e8c:	900d      	str	r0, [sp, #52]	; 0x34
 8008e8e:	9805      	ldr	r0, [sp, #20]
 8008e90:	9307      	str	r3, [sp, #28]
 8008e92:	f000 ff67 	bl	8009d64 <__mcmp>
 8008e96:	002a      	movs	r2, r5
 8008e98:	900e      	str	r0, [sp, #56]	; 0x38
 8008e9a:	0031      	movs	r1, r6
 8008e9c:	0038      	movs	r0, r7
 8008e9e:	f000 ff7d 	bl	8009d9c <__mdiff>
 8008ea2:	68c3      	ldr	r3, [r0, #12]
 8008ea4:	9008      	str	r0, [sp, #32]
 8008ea6:	9310      	str	r3, [sp, #64]	; 0x40
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	930c      	str	r3, [sp, #48]	; 0x30
 8008eac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d104      	bne.n	8008ebc <_dtoa_r+0xaa4>
 8008eb2:	0001      	movs	r1, r0
 8008eb4:	9805      	ldr	r0, [sp, #20]
 8008eb6:	f000 ff55 	bl	8009d64 <__mcmp>
 8008eba:	900c      	str	r0, [sp, #48]	; 0x30
 8008ebc:	0038      	movs	r0, r7
 8008ebe:	9908      	ldr	r1, [sp, #32]
 8008ec0:	f000 fcc4 	bl	800984c <_Bfree>
 8008ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ec6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ec8:	3301      	adds	r3, #1
 8008eca:	9308      	str	r3, [sp, #32]
 8008ecc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	d10c      	bne.n	8008ef0 <_dtoa_r+0xad8>
 8008ed6:	9b07      	ldr	r3, [sp, #28]
 8008ed8:	2b39      	cmp	r3, #57	; 0x39
 8008eda:	d026      	beq.n	8008f2a <_dtoa_r+0xb12>
 8008edc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	dd02      	ble.n	8008ee8 <_dtoa_r+0xad0>
 8008ee2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ee4:	3331      	adds	r3, #49	; 0x31
 8008ee6:	9307      	str	r3, [sp, #28]
 8008ee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008eea:	9a07      	ldr	r2, [sp, #28]
 8008eec:	701a      	strb	r2, [r3, #0]
 8008eee:	e76a      	b.n	8008dc6 <_dtoa_r+0x9ae>
 8008ef0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	db04      	blt.n	8008f00 <_dtoa_r+0xae8>
 8008ef6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008efc:	4313      	orrs	r3, r2
 8008efe:	d11f      	bne.n	8008f40 <_dtoa_r+0xb28>
 8008f00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	ddf0      	ble.n	8008ee8 <_dtoa_r+0xad0>
 8008f06:	9905      	ldr	r1, [sp, #20]
 8008f08:	2201      	movs	r2, #1
 8008f0a:	0038      	movs	r0, r7
 8008f0c:	f000 febc 	bl	8009c88 <__lshift>
 8008f10:	0031      	movs	r1, r6
 8008f12:	9005      	str	r0, [sp, #20]
 8008f14:	f000 ff26 	bl	8009d64 <__mcmp>
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	dc03      	bgt.n	8008f24 <_dtoa_r+0xb0c>
 8008f1c:	d1e4      	bne.n	8008ee8 <_dtoa_r+0xad0>
 8008f1e:	9b07      	ldr	r3, [sp, #28]
 8008f20:	07db      	lsls	r3, r3, #31
 8008f22:	d5e1      	bpl.n	8008ee8 <_dtoa_r+0xad0>
 8008f24:	9b07      	ldr	r3, [sp, #28]
 8008f26:	2b39      	cmp	r3, #57	; 0x39
 8008f28:	d1db      	bne.n	8008ee2 <_dtoa_r+0xaca>
 8008f2a:	2339      	movs	r3, #57	; 0x39
 8008f2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f2e:	7013      	strb	r3, [r2, #0]
 8008f30:	9b08      	ldr	r3, [sp, #32]
 8008f32:	9308      	str	r3, [sp, #32]
 8008f34:	3b01      	subs	r3, #1
 8008f36:	781a      	ldrb	r2, [r3, #0]
 8008f38:	2a39      	cmp	r2, #57	; 0x39
 8008f3a:	d068      	beq.n	800900e <_dtoa_r+0xbf6>
 8008f3c:	3201      	adds	r2, #1
 8008f3e:	e7d5      	b.n	8008eec <_dtoa_r+0xad4>
 8008f40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	dd07      	ble.n	8008f56 <_dtoa_r+0xb3e>
 8008f46:	9b07      	ldr	r3, [sp, #28]
 8008f48:	2b39      	cmp	r3, #57	; 0x39
 8008f4a:	d0ee      	beq.n	8008f2a <_dtoa_r+0xb12>
 8008f4c:	9b07      	ldr	r3, [sp, #28]
 8008f4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f50:	3301      	adds	r3, #1
 8008f52:	7013      	strb	r3, [r2, #0]
 8008f54:	e737      	b.n	8008dc6 <_dtoa_r+0x9ae>
 8008f56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f58:	9a07      	ldr	r2, [sp, #28]
 8008f5a:	701a      	strb	r2, [r3, #0]
 8008f5c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d03e      	beq.n	8008fe2 <_dtoa_r+0xbca>
 8008f64:	2300      	movs	r3, #0
 8008f66:	220a      	movs	r2, #10
 8008f68:	9905      	ldr	r1, [sp, #20]
 8008f6a:	0038      	movs	r0, r7
 8008f6c:	f000 fc92 	bl	8009894 <__multadd>
 8008f70:	2300      	movs	r3, #0
 8008f72:	9005      	str	r0, [sp, #20]
 8008f74:	220a      	movs	r2, #10
 8008f76:	0021      	movs	r1, r4
 8008f78:	0038      	movs	r0, r7
 8008f7a:	42ac      	cmp	r4, r5
 8008f7c:	d106      	bne.n	8008f8c <_dtoa_r+0xb74>
 8008f7e:	f000 fc89 	bl	8009894 <__multadd>
 8008f82:	0004      	movs	r4, r0
 8008f84:	0005      	movs	r5, r0
 8008f86:	9b08      	ldr	r3, [sp, #32]
 8008f88:	930a      	str	r3, [sp, #40]	; 0x28
 8008f8a:	e778      	b.n	8008e7e <_dtoa_r+0xa66>
 8008f8c:	f000 fc82 	bl	8009894 <__multadd>
 8008f90:	0029      	movs	r1, r5
 8008f92:	0004      	movs	r4, r0
 8008f94:	2300      	movs	r3, #0
 8008f96:	220a      	movs	r2, #10
 8008f98:	0038      	movs	r0, r7
 8008f9a:	f000 fc7b 	bl	8009894 <__multadd>
 8008f9e:	0005      	movs	r5, r0
 8008fa0:	e7f1      	b.n	8008f86 <_dtoa_r+0xb6e>
 8008fa2:	9b07      	ldr	r3, [sp, #28]
 8008fa4:	930c      	str	r3, [sp, #48]	; 0x30
 8008fa6:	2400      	movs	r4, #0
 8008fa8:	0031      	movs	r1, r6
 8008faa:	9805      	ldr	r0, [sp, #20]
 8008fac:	f7ff f9a8 	bl	8008300 <quorem>
 8008fb0:	9b06      	ldr	r3, [sp, #24]
 8008fb2:	3030      	adds	r0, #48	; 0x30
 8008fb4:	5518      	strb	r0, [r3, r4]
 8008fb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fb8:	3401      	adds	r4, #1
 8008fba:	9007      	str	r0, [sp, #28]
 8008fbc:	42a3      	cmp	r3, r4
 8008fbe:	dd07      	ble.n	8008fd0 <_dtoa_r+0xbb8>
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	220a      	movs	r2, #10
 8008fc4:	0038      	movs	r0, r7
 8008fc6:	9905      	ldr	r1, [sp, #20]
 8008fc8:	f000 fc64 	bl	8009894 <__multadd>
 8008fcc:	9005      	str	r0, [sp, #20]
 8008fce:	e7eb      	b.n	8008fa8 <_dtoa_r+0xb90>
 8008fd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fd2:	2001      	movs	r0, #1
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	dd00      	ble.n	8008fda <_dtoa_r+0xbc2>
 8008fd8:	0018      	movs	r0, r3
 8008fda:	2400      	movs	r4, #0
 8008fdc:	9b06      	ldr	r3, [sp, #24]
 8008fde:	181b      	adds	r3, r3, r0
 8008fe0:	9308      	str	r3, [sp, #32]
 8008fe2:	9905      	ldr	r1, [sp, #20]
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	0038      	movs	r0, r7
 8008fe8:	f000 fe4e 	bl	8009c88 <__lshift>
 8008fec:	0031      	movs	r1, r6
 8008fee:	9005      	str	r0, [sp, #20]
 8008ff0:	f000 feb8 	bl	8009d64 <__mcmp>
 8008ff4:	2800      	cmp	r0, #0
 8008ff6:	dc9b      	bgt.n	8008f30 <_dtoa_r+0xb18>
 8008ff8:	d102      	bne.n	8009000 <_dtoa_r+0xbe8>
 8008ffa:	9b07      	ldr	r3, [sp, #28]
 8008ffc:	07db      	lsls	r3, r3, #31
 8008ffe:	d497      	bmi.n	8008f30 <_dtoa_r+0xb18>
 8009000:	9b08      	ldr	r3, [sp, #32]
 8009002:	9308      	str	r3, [sp, #32]
 8009004:	3b01      	subs	r3, #1
 8009006:	781a      	ldrb	r2, [r3, #0]
 8009008:	2a30      	cmp	r2, #48	; 0x30
 800900a:	d0fa      	beq.n	8009002 <_dtoa_r+0xbea>
 800900c:	e6db      	b.n	8008dc6 <_dtoa_r+0x9ae>
 800900e:	9a06      	ldr	r2, [sp, #24]
 8009010:	429a      	cmp	r2, r3
 8009012:	d18e      	bne.n	8008f32 <_dtoa_r+0xb1a>
 8009014:	9b02      	ldr	r3, [sp, #8]
 8009016:	3301      	adds	r3, #1
 8009018:	9302      	str	r3, [sp, #8]
 800901a:	2331      	movs	r3, #49	; 0x31
 800901c:	e799      	b.n	8008f52 <_dtoa_r+0xb3a>
 800901e:	4b09      	ldr	r3, [pc, #36]	; (8009044 <_dtoa_r+0xc2c>)
 8009020:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009022:	9306      	str	r3, [sp, #24]
 8009024:	4b08      	ldr	r3, [pc, #32]	; (8009048 <_dtoa_r+0xc30>)
 8009026:	2a00      	cmp	r2, #0
 8009028:	d001      	beq.n	800902e <_dtoa_r+0xc16>
 800902a:	f7ff fa3f 	bl	80084ac <_dtoa_r+0x94>
 800902e:	f7ff fa3f 	bl	80084b0 <_dtoa_r+0x98>
 8009032:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009034:	2b00      	cmp	r3, #0
 8009036:	dcb6      	bgt.n	8008fa6 <_dtoa_r+0xb8e>
 8009038:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800903a:	2b02      	cmp	r3, #2
 800903c:	dd00      	ble.n	8009040 <_dtoa_r+0xc28>
 800903e:	e6ac      	b.n	8008d9a <_dtoa_r+0x982>
 8009040:	e7b1      	b.n	8008fa6 <_dtoa_r+0xb8e>
 8009042:	46c0      	nop			; (mov r8, r8)
 8009044:	0800bdf1 	.word	0x0800bdf1
 8009048:	0800bdf9 	.word	0x0800bdf9

0800904c <rshift>:
 800904c:	0002      	movs	r2, r0
 800904e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009050:	6904      	ldr	r4, [r0, #16]
 8009052:	3214      	adds	r2, #20
 8009054:	0013      	movs	r3, r2
 8009056:	b085      	sub	sp, #20
 8009058:	114f      	asrs	r7, r1, #5
 800905a:	42bc      	cmp	r4, r7
 800905c:	dd31      	ble.n	80090c2 <rshift+0x76>
 800905e:	00bb      	lsls	r3, r7, #2
 8009060:	18d3      	adds	r3, r2, r3
 8009062:	261f      	movs	r6, #31
 8009064:	9301      	str	r3, [sp, #4]
 8009066:	000b      	movs	r3, r1
 8009068:	00a5      	lsls	r5, r4, #2
 800906a:	4033      	ands	r3, r6
 800906c:	1955      	adds	r5, r2, r5
 800906e:	9302      	str	r3, [sp, #8]
 8009070:	4231      	tst	r1, r6
 8009072:	d10c      	bne.n	800908e <rshift+0x42>
 8009074:	0016      	movs	r6, r2
 8009076:	9901      	ldr	r1, [sp, #4]
 8009078:	428d      	cmp	r5, r1
 800907a:	d838      	bhi.n	80090ee <rshift+0xa2>
 800907c:	9901      	ldr	r1, [sp, #4]
 800907e:	2300      	movs	r3, #0
 8009080:	3903      	subs	r1, #3
 8009082:	428d      	cmp	r5, r1
 8009084:	d301      	bcc.n	800908a <rshift+0x3e>
 8009086:	1be3      	subs	r3, r4, r7
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	18d3      	adds	r3, r2, r3
 800908c:	e019      	b.n	80090c2 <rshift+0x76>
 800908e:	2120      	movs	r1, #32
 8009090:	9b02      	ldr	r3, [sp, #8]
 8009092:	9e01      	ldr	r6, [sp, #4]
 8009094:	1acb      	subs	r3, r1, r3
 8009096:	9303      	str	r3, [sp, #12]
 8009098:	ce02      	ldmia	r6!, {r1}
 800909a:	9b02      	ldr	r3, [sp, #8]
 800909c:	4694      	mov	ip, r2
 800909e:	40d9      	lsrs	r1, r3
 80090a0:	9100      	str	r1, [sp, #0]
 80090a2:	42b5      	cmp	r5, r6
 80090a4:	d816      	bhi.n	80090d4 <rshift+0x88>
 80090a6:	9e01      	ldr	r6, [sp, #4]
 80090a8:	2300      	movs	r3, #0
 80090aa:	3601      	adds	r6, #1
 80090ac:	42b5      	cmp	r5, r6
 80090ae:	d302      	bcc.n	80090b6 <rshift+0x6a>
 80090b0:	1be3      	subs	r3, r4, r7
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	3b04      	subs	r3, #4
 80090b6:	9900      	ldr	r1, [sp, #0]
 80090b8:	18d3      	adds	r3, r2, r3
 80090ba:	6019      	str	r1, [r3, #0]
 80090bc:	2900      	cmp	r1, #0
 80090be:	d000      	beq.n	80090c2 <rshift+0x76>
 80090c0:	3304      	adds	r3, #4
 80090c2:	1a99      	subs	r1, r3, r2
 80090c4:	1089      	asrs	r1, r1, #2
 80090c6:	6101      	str	r1, [r0, #16]
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d101      	bne.n	80090d0 <rshift+0x84>
 80090cc:	2300      	movs	r3, #0
 80090ce:	6143      	str	r3, [r0, #20]
 80090d0:	b005      	add	sp, #20
 80090d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090d4:	6833      	ldr	r3, [r6, #0]
 80090d6:	9903      	ldr	r1, [sp, #12]
 80090d8:	408b      	lsls	r3, r1
 80090da:	9900      	ldr	r1, [sp, #0]
 80090dc:	4319      	orrs	r1, r3
 80090de:	4663      	mov	r3, ip
 80090e0:	c302      	stmia	r3!, {r1}
 80090e2:	469c      	mov	ip, r3
 80090e4:	ce02      	ldmia	r6!, {r1}
 80090e6:	9b02      	ldr	r3, [sp, #8]
 80090e8:	40d9      	lsrs	r1, r3
 80090ea:	9100      	str	r1, [sp, #0]
 80090ec:	e7d9      	b.n	80090a2 <rshift+0x56>
 80090ee:	c908      	ldmia	r1!, {r3}
 80090f0:	c608      	stmia	r6!, {r3}
 80090f2:	e7c1      	b.n	8009078 <rshift+0x2c>

080090f4 <__hexdig_fun>:
 80090f4:	0002      	movs	r2, r0
 80090f6:	3a30      	subs	r2, #48	; 0x30
 80090f8:	0003      	movs	r3, r0
 80090fa:	2a09      	cmp	r2, #9
 80090fc:	d802      	bhi.n	8009104 <__hexdig_fun+0x10>
 80090fe:	3b20      	subs	r3, #32
 8009100:	b2d8      	uxtb	r0, r3
 8009102:	4770      	bx	lr
 8009104:	0002      	movs	r2, r0
 8009106:	3a61      	subs	r2, #97	; 0x61
 8009108:	2a05      	cmp	r2, #5
 800910a:	d801      	bhi.n	8009110 <__hexdig_fun+0x1c>
 800910c:	3b47      	subs	r3, #71	; 0x47
 800910e:	e7f7      	b.n	8009100 <__hexdig_fun+0xc>
 8009110:	001a      	movs	r2, r3
 8009112:	3a41      	subs	r2, #65	; 0x41
 8009114:	2000      	movs	r0, #0
 8009116:	2a05      	cmp	r2, #5
 8009118:	d8f3      	bhi.n	8009102 <__hexdig_fun+0xe>
 800911a:	3b27      	subs	r3, #39	; 0x27
 800911c:	e7f0      	b.n	8009100 <__hexdig_fun+0xc>
	...

08009120 <__gethex>:
 8009120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009122:	b08d      	sub	sp, #52	; 0x34
 8009124:	930a      	str	r3, [sp, #40]	; 0x28
 8009126:	4bbf      	ldr	r3, [pc, #764]	; (8009424 <__gethex+0x304>)
 8009128:	9005      	str	r0, [sp, #20]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	9109      	str	r1, [sp, #36]	; 0x24
 800912e:	0018      	movs	r0, r3
 8009130:	9202      	str	r2, [sp, #8]
 8009132:	9307      	str	r3, [sp, #28]
 8009134:	f7f6 ffe8 	bl	8000108 <strlen>
 8009138:	2202      	movs	r2, #2
 800913a:	9b07      	ldr	r3, [sp, #28]
 800913c:	4252      	negs	r2, r2
 800913e:	181b      	adds	r3, r3, r0
 8009140:	3b01      	subs	r3, #1
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	9003      	str	r0, [sp, #12]
 8009146:	930b      	str	r3, [sp, #44]	; 0x2c
 8009148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800914a:	6819      	ldr	r1, [r3, #0]
 800914c:	1c8b      	adds	r3, r1, #2
 800914e:	1a52      	subs	r2, r2, r1
 8009150:	18d1      	adds	r1, r2, r3
 8009152:	9301      	str	r3, [sp, #4]
 8009154:	9108      	str	r1, [sp, #32]
 8009156:	9901      	ldr	r1, [sp, #4]
 8009158:	3301      	adds	r3, #1
 800915a:	7808      	ldrb	r0, [r1, #0]
 800915c:	2830      	cmp	r0, #48	; 0x30
 800915e:	d0f7      	beq.n	8009150 <__gethex+0x30>
 8009160:	f7ff ffc8 	bl	80090f4 <__hexdig_fun>
 8009164:	2300      	movs	r3, #0
 8009166:	001c      	movs	r4, r3
 8009168:	9304      	str	r3, [sp, #16]
 800916a:	4298      	cmp	r0, r3
 800916c:	d11f      	bne.n	80091ae <__gethex+0x8e>
 800916e:	9a03      	ldr	r2, [sp, #12]
 8009170:	9907      	ldr	r1, [sp, #28]
 8009172:	9801      	ldr	r0, [sp, #4]
 8009174:	f7fe f9c6 	bl	8007504 <strncmp>
 8009178:	0007      	movs	r7, r0
 800917a:	42a0      	cmp	r0, r4
 800917c:	d000      	beq.n	8009180 <__gethex+0x60>
 800917e:	e06b      	b.n	8009258 <__gethex+0x138>
 8009180:	9b01      	ldr	r3, [sp, #4]
 8009182:	9a03      	ldr	r2, [sp, #12]
 8009184:	5c98      	ldrb	r0, [r3, r2]
 8009186:	189d      	adds	r5, r3, r2
 8009188:	f7ff ffb4 	bl	80090f4 <__hexdig_fun>
 800918c:	2301      	movs	r3, #1
 800918e:	9304      	str	r3, [sp, #16]
 8009190:	42a0      	cmp	r0, r4
 8009192:	d030      	beq.n	80091f6 <__gethex+0xd6>
 8009194:	9501      	str	r5, [sp, #4]
 8009196:	9b01      	ldr	r3, [sp, #4]
 8009198:	7818      	ldrb	r0, [r3, #0]
 800919a:	2830      	cmp	r0, #48	; 0x30
 800919c:	d009      	beq.n	80091b2 <__gethex+0x92>
 800919e:	f7ff ffa9 	bl	80090f4 <__hexdig_fun>
 80091a2:	4242      	negs	r2, r0
 80091a4:	4142      	adcs	r2, r0
 80091a6:	2301      	movs	r3, #1
 80091a8:	002c      	movs	r4, r5
 80091aa:	9204      	str	r2, [sp, #16]
 80091ac:	9308      	str	r3, [sp, #32]
 80091ae:	9d01      	ldr	r5, [sp, #4]
 80091b0:	e004      	b.n	80091bc <__gethex+0x9c>
 80091b2:	9b01      	ldr	r3, [sp, #4]
 80091b4:	3301      	adds	r3, #1
 80091b6:	9301      	str	r3, [sp, #4]
 80091b8:	e7ed      	b.n	8009196 <__gethex+0x76>
 80091ba:	3501      	adds	r5, #1
 80091bc:	7828      	ldrb	r0, [r5, #0]
 80091be:	f7ff ff99 	bl	80090f4 <__hexdig_fun>
 80091c2:	1e07      	subs	r7, r0, #0
 80091c4:	d1f9      	bne.n	80091ba <__gethex+0x9a>
 80091c6:	0028      	movs	r0, r5
 80091c8:	9a03      	ldr	r2, [sp, #12]
 80091ca:	9907      	ldr	r1, [sp, #28]
 80091cc:	f7fe f99a 	bl	8007504 <strncmp>
 80091d0:	2800      	cmp	r0, #0
 80091d2:	d10e      	bne.n	80091f2 <__gethex+0xd2>
 80091d4:	2c00      	cmp	r4, #0
 80091d6:	d107      	bne.n	80091e8 <__gethex+0xc8>
 80091d8:	9b03      	ldr	r3, [sp, #12]
 80091da:	18ed      	adds	r5, r5, r3
 80091dc:	002c      	movs	r4, r5
 80091de:	7828      	ldrb	r0, [r5, #0]
 80091e0:	f7ff ff88 	bl	80090f4 <__hexdig_fun>
 80091e4:	2800      	cmp	r0, #0
 80091e6:	d102      	bne.n	80091ee <__gethex+0xce>
 80091e8:	1b64      	subs	r4, r4, r5
 80091ea:	00a7      	lsls	r7, r4, #2
 80091ec:	e003      	b.n	80091f6 <__gethex+0xd6>
 80091ee:	3501      	adds	r5, #1
 80091f0:	e7f5      	b.n	80091de <__gethex+0xbe>
 80091f2:	2c00      	cmp	r4, #0
 80091f4:	d1f8      	bne.n	80091e8 <__gethex+0xc8>
 80091f6:	2220      	movs	r2, #32
 80091f8:	782b      	ldrb	r3, [r5, #0]
 80091fa:	002e      	movs	r6, r5
 80091fc:	4393      	bics	r3, r2
 80091fe:	2b50      	cmp	r3, #80	; 0x50
 8009200:	d11d      	bne.n	800923e <__gethex+0x11e>
 8009202:	786b      	ldrb	r3, [r5, #1]
 8009204:	2b2b      	cmp	r3, #43	; 0x2b
 8009206:	d02c      	beq.n	8009262 <__gethex+0x142>
 8009208:	2b2d      	cmp	r3, #45	; 0x2d
 800920a:	d02e      	beq.n	800926a <__gethex+0x14a>
 800920c:	2300      	movs	r3, #0
 800920e:	1c6e      	adds	r6, r5, #1
 8009210:	9306      	str	r3, [sp, #24]
 8009212:	7830      	ldrb	r0, [r6, #0]
 8009214:	f7ff ff6e 	bl	80090f4 <__hexdig_fun>
 8009218:	1e43      	subs	r3, r0, #1
 800921a:	b2db      	uxtb	r3, r3
 800921c:	2b18      	cmp	r3, #24
 800921e:	d82b      	bhi.n	8009278 <__gethex+0x158>
 8009220:	3810      	subs	r0, #16
 8009222:	0004      	movs	r4, r0
 8009224:	7870      	ldrb	r0, [r6, #1]
 8009226:	f7ff ff65 	bl	80090f4 <__hexdig_fun>
 800922a:	1e43      	subs	r3, r0, #1
 800922c:	b2db      	uxtb	r3, r3
 800922e:	3601      	adds	r6, #1
 8009230:	2b18      	cmp	r3, #24
 8009232:	d91c      	bls.n	800926e <__gethex+0x14e>
 8009234:	9b06      	ldr	r3, [sp, #24]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d000      	beq.n	800923c <__gethex+0x11c>
 800923a:	4264      	negs	r4, r4
 800923c:	193f      	adds	r7, r7, r4
 800923e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009240:	601e      	str	r6, [r3, #0]
 8009242:	9b04      	ldr	r3, [sp, #16]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d019      	beq.n	800927c <__gethex+0x15c>
 8009248:	2600      	movs	r6, #0
 800924a:	9b08      	ldr	r3, [sp, #32]
 800924c:	42b3      	cmp	r3, r6
 800924e:	d100      	bne.n	8009252 <__gethex+0x132>
 8009250:	3606      	adds	r6, #6
 8009252:	0030      	movs	r0, r6
 8009254:	b00d      	add	sp, #52	; 0x34
 8009256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009258:	2301      	movs	r3, #1
 800925a:	2700      	movs	r7, #0
 800925c:	9d01      	ldr	r5, [sp, #4]
 800925e:	9304      	str	r3, [sp, #16]
 8009260:	e7c9      	b.n	80091f6 <__gethex+0xd6>
 8009262:	2300      	movs	r3, #0
 8009264:	9306      	str	r3, [sp, #24]
 8009266:	1cae      	adds	r6, r5, #2
 8009268:	e7d3      	b.n	8009212 <__gethex+0xf2>
 800926a:	2301      	movs	r3, #1
 800926c:	e7fa      	b.n	8009264 <__gethex+0x144>
 800926e:	230a      	movs	r3, #10
 8009270:	435c      	muls	r4, r3
 8009272:	1824      	adds	r4, r4, r0
 8009274:	3c10      	subs	r4, #16
 8009276:	e7d5      	b.n	8009224 <__gethex+0x104>
 8009278:	002e      	movs	r6, r5
 800927a:	e7e0      	b.n	800923e <__gethex+0x11e>
 800927c:	9b01      	ldr	r3, [sp, #4]
 800927e:	9904      	ldr	r1, [sp, #16]
 8009280:	1aeb      	subs	r3, r5, r3
 8009282:	3b01      	subs	r3, #1
 8009284:	2b07      	cmp	r3, #7
 8009286:	dc0a      	bgt.n	800929e <__gethex+0x17e>
 8009288:	9805      	ldr	r0, [sp, #20]
 800928a:	f000 fa9b 	bl	80097c4 <_Balloc>
 800928e:	1e04      	subs	r4, r0, #0
 8009290:	d108      	bne.n	80092a4 <__gethex+0x184>
 8009292:	0002      	movs	r2, r0
 8009294:	21de      	movs	r1, #222	; 0xde
 8009296:	4b64      	ldr	r3, [pc, #400]	; (8009428 <__gethex+0x308>)
 8009298:	4864      	ldr	r0, [pc, #400]	; (800942c <__gethex+0x30c>)
 800929a:	f001 fe4b 	bl	800af34 <__assert_func>
 800929e:	3101      	adds	r1, #1
 80092a0:	105b      	asrs	r3, r3, #1
 80092a2:	e7ef      	b.n	8009284 <__gethex+0x164>
 80092a4:	0003      	movs	r3, r0
 80092a6:	3314      	adds	r3, #20
 80092a8:	9304      	str	r3, [sp, #16]
 80092aa:	9309      	str	r3, [sp, #36]	; 0x24
 80092ac:	2300      	movs	r3, #0
 80092ae:	001e      	movs	r6, r3
 80092b0:	9306      	str	r3, [sp, #24]
 80092b2:	9b01      	ldr	r3, [sp, #4]
 80092b4:	42ab      	cmp	r3, r5
 80092b6:	d340      	bcc.n	800933a <__gethex+0x21a>
 80092b8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80092ba:	9b04      	ldr	r3, [sp, #16]
 80092bc:	c540      	stmia	r5!, {r6}
 80092be:	1aed      	subs	r5, r5, r3
 80092c0:	10ad      	asrs	r5, r5, #2
 80092c2:	0030      	movs	r0, r6
 80092c4:	6125      	str	r5, [r4, #16]
 80092c6:	f000 fb75 	bl	80099b4 <__hi0bits>
 80092ca:	9b02      	ldr	r3, [sp, #8]
 80092cc:	016d      	lsls	r5, r5, #5
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	1a2e      	subs	r6, r5, r0
 80092d2:	9301      	str	r3, [sp, #4]
 80092d4:	429e      	cmp	r6, r3
 80092d6:	dd5a      	ble.n	800938e <__gethex+0x26e>
 80092d8:	1af6      	subs	r6, r6, r3
 80092da:	0031      	movs	r1, r6
 80092dc:	0020      	movs	r0, r4
 80092de:	f000 ff17 	bl	800a110 <__any_on>
 80092e2:	1e05      	subs	r5, r0, #0
 80092e4:	d016      	beq.n	8009314 <__gethex+0x1f4>
 80092e6:	2501      	movs	r5, #1
 80092e8:	211f      	movs	r1, #31
 80092ea:	0028      	movs	r0, r5
 80092ec:	1e73      	subs	r3, r6, #1
 80092ee:	4019      	ands	r1, r3
 80092f0:	4088      	lsls	r0, r1
 80092f2:	0001      	movs	r1, r0
 80092f4:	115a      	asrs	r2, r3, #5
 80092f6:	9804      	ldr	r0, [sp, #16]
 80092f8:	0092      	lsls	r2, r2, #2
 80092fa:	5812      	ldr	r2, [r2, r0]
 80092fc:	420a      	tst	r2, r1
 80092fe:	d009      	beq.n	8009314 <__gethex+0x1f4>
 8009300:	42ab      	cmp	r3, r5
 8009302:	dd06      	ble.n	8009312 <__gethex+0x1f2>
 8009304:	0020      	movs	r0, r4
 8009306:	1eb1      	subs	r1, r6, #2
 8009308:	f000 ff02 	bl	800a110 <__any_on>
 800930c:	3502      	adds	r5, #2
 800930e:	2800      	cmp	r0, #0
 8009310:	d100      	bne.n	8009314 <__gethex+0x1f4>
 8009312:	2502      	movs	r5, #2
 8009314:	0031      	movs	r1, r6
 8009316:	0020      	movs	r0, r4
 8009318:	f7ff fe98 	bl	800904c <rshift>
 800931c:	19bf      	adds	r7, r7, r6
 800931e:	9b02      	ldr	r3, [sp, #8]
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	9303      	str	r3, [sp, #12]
 8009324:	42bb      	cmp	r3, r7
 8009326:	da42      	bge.n	80093ae <__gethex+0x28e>
 8009328:	0021      	movs	r1, r4
 800932a:	9805      	ldr	r0, [sp, #20]
 800932c:	f000 fa8e 	bl	800984c <_Bfree>
 8009330:	2300      	movs	r3, #0
 8009332:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009334:	26a3      	movs	r6, #163	; 0xa3
 8009336:	6013      	str	r3, [r2, #0]
 8009338:	e78b      	b.n	8009252 <__gethex+0x132>
 800933a:	1e6b      	subs	r3, r5, #1
 800933c:	9308      	str	r3, [sp, #32]
 800933e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	4293      	cmp	r3, r2
 8009344:	d014      	beq.n	8009370 <__gethex+0x250>
 8009346:	9b06      	ldr	r3, [sp, #24]
 8009348:	2b20      	cmp	r3, #32
 800934a:	d104      	bne.n	8009356 <__gethex+0x236>
 800934c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800934e:	c340      	stmia	r3!, {r6}
 8009350:	2600      	movs	r6, #0
 8009352:	9309      	str	r3, [sp, #36]	; 0x24
 8009354:	9606      	str	r6, [sp, #24]
 8009356:	9b08      	ldr	r3, [sp, #32]
 8009358:	7818      	ldrb	r0, [r3, #0]
 800935a:	f7ff fecb 	bl	80090f4 <__hexdig_fun>
 800935e:	230f      	movs	r3, #15
 8009360:	4018      	ands	r0, r3
 8009362:	9b06      	ldr	r3, [sp, #24]
 8009364:	9d08      	ldr	r5, [sp, #32]
 8009366:	4098      	lsls	r0, r3
 8009368:	3304      	adds	r3, #4
 800936a:	4306      	orrs	r6, r0
 800936c:	9306      	str	r3, [sp, #24]
 800936e:	e7a0      	b.n	80092b2 <__gethex+0x192>
 8009370:	2301      	movs	r3, #1
 8009372:	9a03      	ldr	r2, [sp, #12]
 8009374:	1a9d      	subs	r5, r3, r2
 8009376:	9b08      	ldr	r3, [sp, #32]
 8009378:	195d      	adds	r5, r3, r5
 800937a:	9b01      	ldr	r3, [sp, #4]
 800937c:	429d      	cmp	r5, r3
 800937e:	d3e2      	bcc.n	8009346 <__gethex+0x226>
 8009380:	0028      	movs	r0, r5
 8009382:	9907      	ldr	r1, [sp, #28]
 8009384:	f7fe f8be 	bl	8007504 <strncmp>
 8009388:	2800      	cmp	r0, #0
 800938a:	d1dc      	bne.n	8009346 <__gethex+0x226>
 800938c:	e791      	b.n	80092b2 <__gethex+0x192>
 800938e:	9b01      	ldr	r3, [sp, #4]
 8009390:	2500      	movs	r5, #0
 8009392:	429e      	cmp	r6, r3
 8009394:	dac3      	bge.n	800931e <__gethex+0x1fe>
 8009396:	1b9e      	subs	r6, r3, r6
 8009398:	0021      	movs	r1, r4
 800939a:	0032      	movs	r2, r6
 800939c:	9805      	ldr	r0, [sp, #20]
 800939e:	f000 fc73 	bl	8009c88 <__lshift>
 80093a2:	0003      	movs	r3, r0
 80093a4:	3314      	adds	r3, #20
 80093a6:	0004      	movs	r4, r0
 80093a8:	1bbf      	subs	r7, r7, r6
 80093aa:	9304      	str	r3, [sp, #16]
 80093ac:	e7b7      	b.n	800931e <__gethex+0x1fe>
 80093ae:	9b02      	ldr	r3, [sp, #8]
 80093b0:	685e      	ldr	r6, [r3, #4]
 80093b2:	42be      	cmp	r6, r7
 80093b4:	dd71      	ble.n	800949a <__gethex+0x37a>
 80093b6:	9b01      	ldr	r3, [sp, #4]
 80093b8:	1bf6      	subs	r6, r6, r7
 80093ba:	42b3      	cmp	r3, r6
 80093bc:	dc38      	bgt.n	8009430 <__gethex+0x310>
 80093be:	9b02      	ldr	r3, [sp, #8]
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	2b02      	cmp	r3, #2
 80093c4:	d026      	beq.n	8009414 <__gethex+0x2f4>
 80093c6:	2b03      	cmp	r3, #3
 80093c8:	d028      	beq.n	800941c <__gethex+0x2fc>
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d119      	bne.n	8009402 <__gethex+0x2e2>
 80093ce:	9b01      	ldr	r3, [sp, #4]
 80093d0:	42b3      	cmp	r3, r6
 80093d2:	d116      	bne.n	8009402 <__gethex+0x2e2>
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d10d      	bne.n	80093f4 <__gethex+0x2d4>
 80093d8:	9b02      	ldr	r3, [sp, #8]
 80093da:	2662      	movs	r6, #98	; 0x62
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	9301      	str	r3, [sp, #4]
 80093e0:	9a01      	ldr	r2, [sp, #4]
 80093e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093e4:	601a      	str	r2, [r3, #0]
 80093e6:	2301      	movs	r3, #1
 80093e8:	9a04      	ldr	r2, [sp, #16]
 80093ea:	6123      	str	r3, [r4, #16]
 80093ec:	6013      	str	r3, [r2, #0]
 80093ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80093f0:	601c      	str	r4, [r3, #0]
 80093f2:	e72e      	b.n	8009252 <__gethex+0x132>
 80093f4:	9901      	ldr	r1, [sp, #4]
 80093f6:	0020      	movs	r0, r4
 80093f8:	3901      	subs	r1, #1
 80093fa:	f000 fe89 	bl	800a110 <__any_on>
 80093fe:	2800      	cmp	r0, #0
 8009400:	d1ea      	bne.n	80093d8 <__gethex+0x2b8>
 8009402:	0021      	movs	r1, r4
 8009404:	9805      	ldr	r0, [sp, #20]
 8009406:	f000 fa21 	bl	800984c <_Bfree>
 800940a:	2300      	movs	r3, #0
 800940c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800940e:	2650      	movs	r6, #80	; 0x50
 8009410:	6013      	str	r3, [r2, #0]
 8009412:	e71e      	b.n	8009252 <__gethex+0x132>
 8009414:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009416:	2b00      	cmp	r3, #0
 8009418:	d1f3      	bne.n	8009402 <__gethex+0x2e2>
 800941a:	e7dd      	b.n	80093d8 <__gethex+0x2b8>
 800941c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800941e:	2b00      	cmp	r3, #0
 8009420:	d1da      	bne.n	80093d8 <__gethex+0x2b8>
 8009422:	e7ee      	b.n	8009402 <__gethex+0x2e2>
 8009424:	0800bee8 	.word	0x0800bee8
 8009428:	0800be70 	.word	0x0800be70
 800942c:	0800be81 	.word	0x0800be81
 8009430:	1e77      	subs	r7, r6, #1
 8009432:	2d00      	cmp	r5, #0
 8009434:	d12f      	bne.n	8009496 <__gethex+0x376>
 8009436:	2f00      	cmp	r7, #0
 8009438:	d004      	beq.n	8009444 <__gethex+0x324>
 800943a:	0039      	movs	r1, r7
 800943c:	0020      	movs	r0, r4
 800943e:	f000 fe67 	bl	800a110 <__any_on>
 8009442:	0005      	movs	r5, r0
 8009444:	231f      	movs	r3, #31
 8009446:	117a      	asrs	r2, r7, #5
 8009448:	401f      	ands	r7, r3
 800944a:	3b1e      	subs	r3, #30
 800944c:	40bb      	lsls	r3, r7
 800944e:	9904      	ldr	r1, [sp, #16]
 8009450:	0092      	lsls	r2, r2, #2
 8009452:	5852      	ldr	r2, [r2, r1]
 8009454:	421a      	tst	r2, r3
 8009456:	d001      	beq.n	800945c <__gethex+0x33c>
 8009458:	2302      	movs	r3, #2
 800945a:	431d      	orrs	r5, r3
 800945c:	9b01      	ldr	r3, [sp, #4]
 800945e:	0031      	movs	r1, r6
 8009460:	1b9b      	subs	r3, r3, r6
 8009462:	2602      	movs	r6, #2
 8009464:	0020      	movs	r0, r4
 8009466:	9301      	str	r3, [sp, #4]
 8009468:	f7ff fdf0 	bl	800904c <rshift>
 800946c:	9b02      	ldr	r3, [sp, #8]
 800946e:	685f      	ldr	r7, [r3, #4]
 8009470:	2d00      	cmp	r5, #0
 8009472:	d041      	beq.n	80094f8 <__gethex+0x3d8>
 8009474:	9b02      	ldr	r3, [sp, #8]
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	2b02      	cmp	r3, #2
 800947a:	d010      	beq.n	800949e <__gethex+0x37e>
 800947c:	2b03      	cmp	r3, #3
 800947e:	d012      	beq.n	80094a6 <__gethex+0x386>
 8009480:	2b01      	cmp	r3, #1
 8009482:	d106      	bne.n	8009492 <__gethex+0x372>
 8009484:	07aa      	lsls	r2, r5, #30
 8009486:	d504      	bpl.n	8009492 <__gethex+0x372>
 8009488:	9a04      	ldr	r2, [sp, #16]
 800948a:	6810      	ldr	r0, [r2, #0]
 800948c:	4305      	orrs	r5, r0
 800948e:	421d      	tst	r5, r3
 8009490:	d10c      	bne.n	80094ac <__gethex+0x38c>
 8009492:	2310      	movs	r3, #16
 8009494:	e02f      	b.n	80094f6 <__gethex+0x3d6>
 8009496:	2501      	movs	r5, #1
 8009498:	e7d4      	b.n	8009444 <__gethex+0x324>
 800949a:	2601      	movs	r6, #1
 800949c:	e7e8      	b.n	8009470 <__gethex+0x350>
 800949e:	2301      	movs	r3, #1
 80094a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80094a2:	1a9b      	subs	r3, r3, r2
 80094a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80094a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d0f2      	beq.n	8009492 <__gethex+0x372>
 80094ac:	6923      	ldr	r3, [r4, #16]
 80094ae:	2000      	movs	r0, #0
 80094b0:	9303      	str	r3, [sp, #12]
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	9304      	str	r3, [sp, #16]
 80094b6:	0023      	movs	r3, r4
 80094b8:	9a04      	ldr	r2, [sp, #16]
 80094ba:	3314      	adds	r3, #20
 80094bc:	1899      	adds	r1, r3, r2
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	1c55      	adds	r5, r2, #1
 80094c2:	d01e      	beq.n	8009502 <__gethex+0x3e2>
 80094c4:	3201      	adds	r2, #1
 80094c6:	601a      	str	r2, [r3, #0]
 80094c8:	0023      	movs	r3, r4
 80094ca:	3314      	adds	r3, #20
 80094cc:	2e02      	cmp	r6, #2
 80094ce:	d140      	bne.n	8009552 <__gethex+0x432>
 80094d0:	9a02      	ldr	r2, [sp, #8]
 80094d2:	9901      	ldr	r1, [sp, #4]
 80094d4:	6812      	ldr	r2, [r2, #0]
 80094d6:	3a01      	subs	r2, #1
 80094d8:	428a      	cmp	r2, r1
 80094da:	d10b      	bne.n	80094f4 <__gethex+0x3d4>
 80094dc:	114a      	asrs	r2, r1, #5
 80094de:	211f      	movs	r1, #31
 80094e0:	9801      	ldr	r0, [sp, #4]
 80094e2:	0092      	lsls	r2, r2, #2
 80094e4:	4001      	ands	r1, r0
 80094e6:	2001      	movs	r0, #1
 80094e8:	0005      	movs	r5, r0
 80094ea:	408d      	lsls	r5, r1
 80094ec:	58d3      	ldr	r3, [r2, r3]
 80094ee:	422b      	tst	r3, r5
 80094f0:	d000      	beq.n	80094f4 <__gethex+0x3d4>
 80094f2:	2601      	movs	r6, #1
 80094f4:	2320      	movs	r3, #32
 80094f6:	431e      	orrs	r6, r3
 80094f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80094fa:	601c      	str	r4, [r3, #0]
 80094fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094fe:	601f      	str	r7, [r3, #0]
 8009500:	e6a7      	b.n	8009252 <__gethex+0x132>
 8009502:	c301      	stmia	r3!, {r0}
 8009504:	4299      	cmp	r1, r3
 8009506:	d8da      	bhi.n	80094be <__gethex+0x39e>
 8009508:	9b03      	ldr	r3, [sp, #12]
 800950a:	68a2      	ldr	r2, [r4, #8]
 800950c:	4293      	cmp	r3, r2
 800950e:	db17      	blt.n	8009540 <__gethex+0x420>
 8009510:	6863      	ldr	r3, [r4, #4]
 8009512:	9805      	ldr	r0, [sp, #20]
 8009514:	1c59      	adds	r1, r3, #1
 8009516:	f000 f955 	bl	80097c4 <_Balloc>
 800951a:	1e05      	subs	r5, r0, #0
 800951c:	d103      	bne.n	8009526 <__gethex+0x406>
 800951e:	0002      	movs	r2, r0
 8009520:	2184      	movs	r1, #132	; 0x84
 8009522:	4b1c      	ldr	r3, [pc, #112]	; (8009594 <__gethex+0x474>)
 8009524:	e6b8      	b.n	8009298 <__gethex+0x178>
 8009526:	0021      	movs	r1, r4
 8009528:	6923      	ldr	r3, [r4, #16]
 800952a:	310c      	adds	r1, #12
 800952c:	1c9a      	adds	r2, r3, #2
 800952e:	0092      	lsls	r2, r2, #2
 8009530:	300c      	adds	r0, #12
 8009532:	f000 f93e 	bl	80097b2 <memcpy>
 8009536:	0021      	movs	r1, r4
 8009538:	9805      	ldr	r0, [sp, #20]
 800953a:	f000 f987 	bl	800984c <_Bfree>
 800953e:	002c      	movs	r4, r5
 8009540:	6923      	ldr	r3, [r4, #16]
 8009542:	1c5a      	adds	r2, r3, #1
 8009544:	6122      	str	r2, [r4, #16]
 8009546:	2201      	movs	r2, #1
 8009548:	3304      	adds	r3, #4
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	18e3      	adds	r3, r4, r3
 800954e:	605a      	str	r2, [r3, #4]
 8009550:	e7ba      	b.n	80094c8 <__gethex+0x3a8>
 8009552:	6922      	ldr	r2, [r4, #16]
 8009554:	9903      	ldr	r1, [sp, #12]
 8009556:	428a      	cmp	r2, r1
 8009558:	dd09      	ble.n	800956e <__gethex+0x44e>
 800955a:	2101      	movs	r1, #1
 800955c:	0020      	movs	r0, r4
 800955e:	f7ff fd75 	bl	800904c <rshift>
 8009562:	9b02      	ldr	r3, [sp, #8]
 8009564:	3701      	adds	r7, #1
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	42bb      	cmp	r3, r7
 800956a:	dac2      	bge.n	80094f2 <__gethex+0x3d2>
 800956c:	e6dc      	b.n	8009328 <__gethex+0x208>
 800956e:	221f      	movs	r2, #31
 8009570:	9d01      	ldr	r5, [sp, #4]
 8009572:	9901      	ldr	r1, [sp, #4]
 8009574:	2601      	movs	r6, #1
 8009576:	4015      	ands	r5, r2
 8009578:	4211      	tst	r1, r2
 800957a:	d0bb      	beq.n	80094f4 <__gethex+0x3d4>
 800957c:	9a04      	ldr	r2, [sp, #16]
 800957e:	189b      	adds	r3, r3, r2
 8009580:	3b04      	subs	r3, #4
 8009582:	6818      	ldr	r0, [r3, #0]
 8009584:	f000 fa16 	bl	80099b4 <__hi0bits>
 8009588:	2320      	movs	r3, #32
 800958a:	1b5d      	subs	r5, r3, r5
 800958c:	42a8      	cmp	r0, r5
 800958e:	dbe4      	blt.n	800955a <__gethex+0x43a>
 8009590:	e7b0      	b.n	80094f4 <__gethex+0x3d4>
 8009592:	46c0      	nop			; (mov r8, r8)
 8009594:	0800be70 	.word	0x0800be70

08009598 <L_shift>:
 8009598:	2308      	movs	r3, #8
 800959a:	b570      	push	{r4, r5, r6, lr}
 800959c:	2520      	movs	r5, #32
 800959e:	1a9a      	subs	r2, r3, r2
 80095a0:	0092      	lsls	r2, r2, #2
 80095a2:	1aad      	subs	r5, r5, r2
 80095a4:	6843      	ldr	r3, [r0, #4]
 80095a6:	6806      	ldr	r6, [r0, #0]
 80095a8:	001c      	movs	r4, r3
 80095aa:	40ac      	lsls	r4, r5
 80095ac:	40d3      	lsrs	r3, r2
 80095ae:	4334      	orrs	r4, r6
 80095b0:	6004      	str	r4, [r0, #0]
 80095b2:	6043      	str	r3, [r0, #4]
 80095b4:	3004      	adds	r0, #4
 80095b6:	4288      	cmp	r0, r1
 80095b8:	d3f4      	bcc.n	80095a4 <L_shift+0xc>
 80095ba:	bd70      	pop	{r4, r5, r6, pc}

080095bc <__match>:
 80095bc:	b530      	push	{r4, r5, lr}
 80095be:	6803      	ldr	r3, [r0, #0]
 80095c0:	780c      	ldrb	r4, [r1, #0]
 80095c2:	3301      	adds	r3, #1
 80095c4:	2c00      	cmp	r4, #0
 80095c6:	d102      	bne.n	80095ce <__match+0x12>
 80095c8:	6003      	str	r3, [r0, #0]
 80095ca:	2001      	movs	r0, #1
 80095cc:	bd30      	pop	{r4, r5, pc}
 80095ce:	781a      	ldrb	r2, [r3, #0]
 80095d0:	0015      	movs	r5, r2
 80095d2:	3d41      	subs	r5, #65	; 0x41
 80095d4:	2d19      	cmp	r5, #25
 80095d6:	d800      	bhi.n	80095da <__match+0x1e>
 80095d8:	3220      	adds	r2, #32
 80095da:	3101      	adds	r1, #1
 80095dc:	42a2      	cmp	r2, r4
 80095de:	d0ef      	beq.n	80095c0 <__match+0x4>
 80095e0:	2000      	movs	r0, #0
 80095e2:	e7f3      	b.n	80095cc <__match+0x10>

080095e4 <__hexnan>:
 80095e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095e6:	680b      	ldr	r3, [r1, #0]
 80095e8:	b08b      	sub	sp, #44	; 0x2c
 80095ea:	9201      	str	r2, [sp, #4]
 80095ec:	9901      	ldr	r1, [sp, #4]
 80095ee:	115a      	asrs	r2, r3, #5
 80095f0:	0092      	lsls	r2, r2, #2
 80095f2:	188a      	adds	r2, r1, r2
 80095f4:	9202      	str	r2, [sp, #8]
 80095f6:	0019      	movs	r1, r3
 80095f8:	221f      	movs	r2, #31
 80095fa:	4011      	ands	r1, r2
 80095fc:	9008      	str	r0, [sp, #32]
 80095fe:	9106      	str	r1, [sp, #24]
 8009600:	4213      	tst	r3, r2
 8009602:	d002      	beq.n	800960a <__hexnan+0x26>
 8009604:	9b02      	ldr	r3, [sp, #8]
 8009606:	3304      	adds	r3, #4
 8009608:	9302      	str	r3, [sp, #8]
 800960a:	9b02      	ldr	r3, [sp, #8]
 800960c:	2500      	movs	r5, #0
 800960e:	1f1e      	subs	r6, r3, #4
 8009610:	0037      	movs	r7, r6
 8009612:	0034      	movs	r4, r6
 8009614:	9b08      	ldr	r3, [sp, #32]
 8009616:	6035      	str	r5, [r6, #0]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	9507      	str	r5, [sp, #28]
 800961c:	9305      	str	r3, [sp, #20]
 800961e:	9503      	str	r5, [sp, #12]
 8009620:	9b05      	ldr	r3, [sp, #20]
 8009622:	3301      	adds	r3, #1
 8009624:	9309      	str	r3, [sp, #36]	; 0x24
 8009626:	9b05      	ldr	r3, [sp, #20]
 8009628:	785b      	ldrb	r3, [r3, #1]
 800962a:	9304      	str	r3, [sp, #16]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d028      	beq.n	8009682 <__hexnan+0x9e>
 8009630:	9804      	ldr	r0, [sp, #16]
 8009632:	f7ff fd5f 	bl	80090f4 <__hexdig_fun>
 8009636:	2800      	cmp	r0, #0
 8009638:	d154      	bne.n	80096e4 <__hexnan+0x100>
 800963a:	9b04      	ldr	r3, [sp, #16]
 800963c:	2b20      	cmp	r3, #32
 800963e:	d819      	bhi.n	8009674 <__hexnan+0x90>
 8009640:	9b03      	ldr	r3, [sp, #12]
 8009642:	9a07      	ldr	r2, [sp, #28]
 8009644:	4293      	cmp	r3, r2
 8009646:	dd12      	ble.n	800966e <__hexnan+0x8a>
 8009648:	42bc      	cmp	r4, r7
 800964a:	d206      	bcs.n	800965a <__hexnan+0x76>
 800964c:	2d07      	cmp	r5, #7
 800964e:	dc04      	bgt.n	800965a <__hexnan+0x76>
 8009650:	002a      	movs	r2, r5
 8009652:	0039      	movs	r1, r7
 8009654:	0020      	movs	r0, r4
 8009656:	f7ff ff9f 	bl	8009598 <L_shift>
 800965a:	9b01      	ldr	r3, [sp, #4]
 800965c:	2508      	movs	r5, #8
 800965e:	429c      	cmp	r4, r3
 8009660:	d905      	bls.n	800966e <__hexnan+0x8a>
 8009662:	1f27      	subs	r7, r4, #4
 8009664:	2500      	movs	r5, #0
 8009666:	003c      	movs	r4, r7
 8009668:	9b03      	ldr	r3, [sp, #12]
 800966a:	603d      	str	r5, [r7, #0]
 800966c:	9307      	str	r3, [sp, #28]
 800966e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009670:	9305      	str	r3, [sp, #20]
 8009672:	e7d5      	b.n	8009620 <__hexnan+0x3c>
 8009674:	9b04      	ldr	r3, [sp, #16]
 8009676:	2b29      	cmp	r3, #41	; 0x29
 8009678:	d159      	bne.n	800972e <__hexnan+0x14a>
 800967a:	9b05      	ldr	r3, [sp, #20]
 800967c:	9a08      	ldr	r2, [sp, #32]
 800967e:	3302      	adds	r3, #2
 8009680:	6013      	str	r3, [r2, #0]
 8009682:	9b03      	ldr	r3, [sp, #12]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d052      	beq.n	800972e <__hexnan+0x14a>
 8009688:	42bc      	cmp	r4, r7
 800968a:	d206      	bcs.n	800969a <__hexnan+0xb6>
 800968c:	2d07      	cmp	r5, #7
 800968e:	dc04      	bgt.n	800969a <__hexnan+0xb6>
 8009690:	002a      	movs	r2, r5
 8009692:	0039      	movs	r1, r7
 8009694:	0020      	movs	r0, r4
 8009696:	f7ff ff7f 	bl	8009598 <L_shift>
 800969a:	9b01      	ldr	r3, [sp, #4]
 800969c:	429c      	cmp	r4, r3
 800969e:	d935      	bls.n	800970c <__hexnan+0x128>
 80096a0:	001a      	movs	r2, r3
 80096a2:	0023      	movs	r3, r4
 80096a4:	cb02      	ldmia	r3!, {r1}
 80096a6:	c202      	stmia	r2!, {r1}
 80096a8:	429e      	cmp	r6, r3
 80096aa:	d2fb      	bcs.n	80096a4 <__hexnan+0xc0>
 80096ac:	9b02      	ldr	r3, [sp, #8]
 80096ae:	1c61      	adds	r1, r4, #1
 80096b0:	1eda      	subs	r2, r3, #3
 80096b2:	2304      	movs	r3, #4
 80096b4:	4291      	cmp	r1, r2
 80096b6:	d805      	bhi.n	80096c4 <__hexnan+0xe0>
 80096b8:	9b02      	ldr	r3, [sp, #8]
 80096ba:	3b04      	subs	r3, #4
 80096bc:	1b1b      	subs	r3, r3, r4
 80096be:	089b      	lsrs	r3, r3, #2
 80096c0:	3301      	adds	r3, #1
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	9a01      	ldr	r2, [sp, #4]
 80096c6:	18d3      	adds	r3, r2, r3
 80096c8:	2200      	movs	r2, #0
 80096ca:	c304      	stmia	r3!, {r2}
 80096cc:	429e      	cmp	r6, r3
 80096ce:	d2fc      	bcs.n	80096ca <__hexnan+0xe6>
 80096d0:	6833      	ldr	r3, [r6, #0]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d104      	bne.n	80096e0 <__hexnan+0xfc>
 80096d6:	9b01      	ldr	r3, [sp, #4]
 80096d8:	429e      	cmp	r6, r3
 80096da:	d126      	bne.n	800972a <__hexnan+0x146>
 80096dc:	2301      	movs	r3, #1
 80096de:	6033      	str	r3, [r6, #0]
 80096e0:	2005      	movs	r0, #5
 80096e2:	e025      	b.n	8009730 <__hexnan+0x14c>
 80096e4:	9b03      	ldr	r3, [sp, #12]
 80096e6:	3501      	adds	r5, #1
 80096e8:	3301      	adds	r3, #1
 80096ea:	9303      	str	r3, [sp, #12]
 80096ec:	2d08      	cmp	r5, #8
 80096ee:	dd06      	ble.n	80096fe <__hexnan+0x11a>
 80096f0:	9b01      	ldr	r3, [sp, #4]
 80096f2:	429c      	cmp	r4, r3
 80096f4:	d9bb      	bls.n	800966e <__hexnan+0x8a>
 80096f6:	2300      	movs	r3, #0
 80096f8:	2501      	movs	r5, #1
 80096fa:	3c04      	subs	r4, #4
 80096fc:	6023      	str	r3, [r4, #0]
 80096fe:	220f      	movs	r2, #15
 8009700:	6823      	ldr	r3, [r4, #0]
 8009702:	4010      	ands	r0, r2
 8009704:	011b      	lsls	r3, r3, #4
 8009706:	4318      	orrs	r0, r3
 8009708:	6020      	str	r0, [r4, #0]
 800970a:	e7b0      	b.n	800966e <__hexnan+0x8a>
 800970c:	9b06      	ldr	r3, [sp, #24]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d0de      	beq.n	80096d0 <__hexnan+0xec>
 8009712:	2120      	movs	r1, #32
 8009714:	9a06      	ldr	r2, [sp, #24]
 8009716:	9b02      	ldr	r3, [sp, #8]
 8009718:	1a89      	subs	r1, r1, r2
 800971a:	2201      	movs	r2, #1
 800971c:	4252      	negs	r2, r2
 800971e:	40ca      	lsrs	r2, r1
 8009720:	3b04      	subs	r3, #4
 8009722:	6819      	ldr	r1, [r3, #0]
 8009724:	400a      	ands	r2, r1
 8009726:	601a      	str	r2, [r3, #0]
 8009728:	e7d2      	b.n	80096d0 <__hexnan+0xec>
 800972a:	3e04      	subs	r6, #4
 800972c:	e7d0      	b.n	80096d0 <__hexnan+0xec>
 800972e:	2004      	movs	r0, #4
 8009730:	b00b      	add	sp, #44	; 0x2c
 8009732:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009734 <_localeconv_r>:
 8009734:	4800      	ldr	r0, [pc, #0]	; (8009738 <_localeconv_r+0x4>)
 8009736:	4770      	bx	lr
 8009738:	20000164 	.word	0x20000164

0800973c <_lseek_r>:
 800973c:	b570      	push	{r4, r5, r6, lr}
 800973e:	0004      	movs	r4, r0
 8009740:	0008      	movs	r0, r1
 8009742:	0011      	movs	r1, r2
 8009744:	001a      	movs	r2, r3
 8009746:	2300      	movs	r3, #0
 8009748:	4d05      	ldr	r5, [pc, #20]	; (8009760 <_lseek_r+0x24>)
 800974a:	602b      	str	r3, [r5, #0]
 800974c:	f7fa f84c 	bl	80037e8 <_lseek>
 8009750:	1c43      	adds	r3, r0, #1
 8009752:	d103      	bne.n	800975c <_lseek_r+0x20>
 8009754:	682b      	ldr	r3, [r5, #0]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d000      	beq.n	800975c <_lseek_r+0x20>
 800975a:	6023      	str	r3, [r4, #0]
 800975c:	bd70      	pop	{r4, r5, r6, pc}
 800975e:	46c0      	nop			; (mov r8, r8)
 8009760:	200003fc 	.word	0x200003fc

08009764 <malloc>:
 8009764:	b510      	push	{r4, lr}
 8009766:	4b03      	ldr	r3, [pc, #12]	; (8009774 <malloc+0x10>)
 8009768:	0001      	movs	r1, r0
 800976a:	6818      	ldr	r0, [r3, #0]
 800976c:	f000 fd8c 	bl	800a288 <_malloc_r>
 8009770:	bd10      	pop	{r4, pc}
 8009772:	46c0      	nop			; (mov r8, r8)
 8009774:	2000000c 	.word	0x2000000c

08009778 <__ascii_mbtowc>:
 8009778:	b082      	sub	sp, #8
 800977a:	2900      	cmp	r1, #0
 800977c:	d100      	bne.n	8009780 <__ascii_mbtowc+0x8>
 800977e:	a901      	add	r1, sp, #4
 8009780:	1e10      	subs	r0, r2, #0
 8009782:	d006      	beq.n	8009792 <__ascii_mbtowc+0x1a>
 8009784:	2b00      	cmp	r3, #0
 8009786:	d006      	beq.n	8009796 <__ascii_mbtowc+0x1e>
 8009788:	7813      	ldrb	r3, [r2, #0]
 800978a:	600b      	str	r3, [r1, #0]
 800978c:	7810      	ldrb	r0, [r2, #0]
 800978e:	1e43      	subs	r3, r0, #1
 8009790:	4198      	sbcs	r0, r3
 8009792:	b002      	add	sp, #8
 8009794:	4770      	bx	lr
 8009796:	2002      	movs	r0, #2
 8009798:	4240      	negs	r0, r0
 800979a:	e7fa      	b.n	8009792 <__ascii_mbtowc+0x1a>

0800979c <memchr>:
 800979c:	b2c9      	uxtb	r1, r1
 800979e:	1882      	adds	r2, r0, r2
 80097a0:	4290      	cmp	r0, r2
 80097a2:	d101      	bne.n	80097a8 <memchr+0xc>
 80097a4:	2000      	movs	r0, #0
 80097a6:	4770      	bx	lr
 80097a8:	7803      	ldrb	r3, [r0, #0]
 80097aa:	428b      	cmp	r3, r1
 80097ac:	d0fb      	beq.n	80097a6 <memchr+0xa>
 80097ae:	3001      	adds	r0, #1
 80097b0:	e7f6      	b.n	80097a0 <memchr+0x4>

080097b2 <memcpy>:
 80097b2:	2300      	movs	r3, #0
 80097b4:	b510      	push	{r4, lr}
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d100      	bne.n	80097bc <memcpy+0xa>
 80097ba:	bd10      	pop	{r4, pc}
 80097bc:	5ccc      	ldrb	r4, [r1, r3]
 80097be:	54c4      	strb	r4, [r0, r3]
 80097c0:	3301      	adds	r3, #1
 80097c2:	e7f8      	b.n	80097b6 <memcpy+0x4>

080097c4 <_Balloc>:
 80097c4:	b570      	push	{r4, r5, r6, lr}
 80097c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80097c8:	0006      	movs	r6, r0
 80097ca:	000c      	movs	r4, r1
 80097cc:	2d00      	cmp	r5, #0
 80097ce:	d10e      	bne.n	80097ee <_Balloc+0x2a>
 80097d0:	2010      	movs	r0, #16
 80097d2:	f7ff ffc7 	bl	8009764 <malloc>
 80097d6:	1e02      	subs	r2, r0, #0
 80097d8:	6270      	str	r0, [r6, #36]	; 0x24
 80097da:	d104      	bne.n	80097e6 <_Balloc+0x22>
 80097dc:	2166      	movs	r1, #102	; 0x66
 80097de:	4b19      	ldr	r3, [pc, #100]	; (8009844 <_Balloc+0x80>)
 80097e0:	4819      	ldr	r0, [pc, #100]	; (8009848 <_Balloc+0x84>)
 80097e2:	f001 fba7 	bl	800af34 <__assert_func>
 80097e6:	6045      	str	r5, [r0, #4]
 80097e8:	6085      	str	r5, [r0, #8]
 80097ea:	6005      	str	r5, [r0, #0]
 80097ec:	60c5      	str	r5, [r0, #12]
 80097ee:	6a75      	ldr	r5, [r6, #36]	; 0x24
 80097f0:	68eb      	ldr	r3, [r5, #12]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d013      	beq.n	800981e <_Balloc+0x5a>
 80097f6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80097f8:	00a2      	lsls	r2, r4, #2
 80097fa:	68db      	ldr	r3, [r3, #12]
 80097fc:	189b      	adds	r3, r3, r2
 80097fe:	6818      	ldr	r0, [r3, #0]
 8009800:	2800      	cmp	r0, #0
 8009802:	d118      	bne.n	8009836 <_Balloc+0x72>
 8009804:	2101      	movs	r1, #1
 8009806:	000d      	movs	r5, r1
 8009808:	40a5      	lsls	r5, r4
 800980a:	1d6a      	adds	r2, r5, #5
 800980c:	0030      	movs	r0, r6
 800980e:	0092      	lsls	r2, r2, #2
 8009810:	f000 fca1 	bl	800a156 <_calloc_r>
 8009814:	2800      	cmp	r0, #0
 8009816:	d00c      	beq.n	8009832 <_Balloc+0x6e>
 8009818:	6044      	str	r4, [r0, #4]
 800981a:	6085      	str	r5, [r0, #8]
 800981c:	e00d      	b.n	800983a <_Balloc+0x76>
 800981e:	2221      	movs	r2, #33	; 0x21
 8009820:	2104      	movs	r1, #4
 8009822:	0030      	movs	r0, r6
 8009824:	f000 fc97 	bl	800a156 <_calloc_r>
 8009828:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800982a:	60e8      	str	r0, [r5, #12]
 800982c:	68db      	ldr	r3, [r3, #12]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d1e1      	bne.n	80097f6 <_Balloc+0x32>
 8009832:	2000      	movs	r0, #0
 8009834:	bd70      	pop	{r4, r5, r6, pc}
 8009836:	6802      	ldr	r2, [r0, #0]
 8009838:	601a      	str	r2, [r3, #0]
 800983a:	2300      	movs	r3, #0
 800983c:	6103      	str	r3, [r0, #16]
 800983e:	60c3      	str	r3, [r0, #12]
 8009840:	e7f8      	b.n	8009834 <_Balloc+0x70>
 8009842:	46c0      	nop			; (mov r8, r8)
 8009844:	0800bdfe 	.word	0x0800bdfe
 8009848:	0800befc 	.word	0x0800befc

0800984c <_Bfree>:
 800984c:	b570      	push	{r4, r5, r6, lr}
 800984e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009850:	0005      	movs	r5, r0
 8009852:	000c      	movs	r4, r1
 8009854:	2e00      	cmp	r6, #0
 8009856:	d10e      	bne.n	8009876 <_Bfree+0x2a>
 8009858:	2010      	movs	r0, #16
 800985a:	f7ff ff83 	bl	8009764 <malloc>
 800985e:	1e02      	subs	r2, r0, #0
 8009860:	6268      	str	r0, [r5, #36]	; 0x24
 8009862:	d104      	bne.n	800986e <_Bfree+0x22>
 8009864:	218a      	movs	r1, #138	; 0x8a
 8009866:	4b09      	ldr	r3, [pc, #36]	; (800988c <_Bfree+0x40>)
 8009868:	4809      	ldr	r0, [pc, #36]	; (8009890 <_Bfree+0x44>)
 800986a:	f001 fb63 	bl	800af34 <__assert_func>
 800986e:	6046      	str	r6, [r0, #4]
 8009870:	6086      	str	r6, [r0, #8]
 8009872:	6006      	str	r6, [r0, #0]
 8009874:	60c6      	str	r6, [r0, #12]
 8009876:	2c00      	cmp	r4, #0
 8009878:	d007      	beq.n	800988a <_Bfree+0x3e>
 800987a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800987c:	6862      	ldr	r2, [r4, #4]
 800987e:	68db      	ldr	r3, [r3, #12]
 8009880:	0092      	lsls	r2, r2, #2
 8009882:	189b      	adds	r3, r3, r2
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	6022      	str	r2, [r4, #0]
 8009888:	601c      	str	r4, [r3, #0]
 800988a:	bd70      	pop	{r4, r5, r6, pc}
 800988c:	0800bdfe 	.word	0x0800bdfe
 8009890:	0800befc 	.word	0x0800befc

08009894 <__multadd>:
 8009894:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009896:	000e      	movs	r6, r1
 8009898:	9001      	str	r0, [sp, #4]
 800989a:	000c      	movs	r4, r1
 800989c:	001d      	movs	r5, r3
 800989e:	2000      	movs	r0, #0
 80098a0:	690f      	ldr	r7, [r1, #16]
 80098a2:	3614      	adds	r6, #20
 80098a4:	6833      	ldr	r3, [r6, #0]
 80098a6:	3001      	adds	r0, #1
 80098a8:	b299      	uxth	r1, r3
 80098aa:	4351      	muls	r1, r2
 80098ac:	0c1b      	lsrs	r3, r3, #16
 80098ae:	4353      	muls	r3, r2
 80098b0:	1949      	adds	r1, r1, r5
 80098b2:	0c0d      	lsrs	r5, r1, #16
 80098b4:	195b      	adds	r3, r3, r5
 80098b6:	0c1d      	lsrs	r5, r3, #16
 80098b8:	b289      	uxth	r1, r1
 80098ba:	041b      	lsls	r3, r3, #16
 80098bc:	185b      	adds	r3, r3, r1
 80098be:	c608      	stmia	r6!, {r3}
 80098c0:	4287      	cmp	r7, r0
 80098c2:	dcef      	bgt.n	80098a4 <__multadd+0x10>
 80098c4:	2d00      	cmp	r5, #0
 80098c6:	d022      	beq.n	800990e <__multadd+0x7a>
 80098c8:	68a3      	ldr	r3, [r4, #8]
 80098ca:	42bb      	cmp	r3, r7
 80098cc:	dc19      	bgt.n	8009902 <__multadd+0x6e>
 80098ce:	6863      	ldr	r3, [r4, #4]
 80098d0:	9801      	ldr	r0, [sp, #4]
 80098d2:	1c59      	adds	r1, r3, #1
 80098d4:	f7ff ff76 	bl	80097c4 <_Balloc>
 80098d8:	1e06      	subs	r6, r0, #0
 80098da:	d105      	bne.n	80098e8 <__multadd+0x54>
 80098dc:	0002      	movs	r2, r0
 80098de:	21b5      	movs	r1, #181	; 0xb5
 80098e0:	4b0c      	ldr	r3, [pc, #48]	; (8009914 <__multadd+0x80>)
 80098e2:	480d      	ldr	r0, [pc, #52]	; (8009918 <__multadd+0x84>)
 80098e4:	f001 fb26 	bl	800af34 <__assert_func>
 80098e8:	0021      	movs	r1, r4
 80098ea:	6923      	ldr	r3, [r4, #16]
 80098ec:	310c      	adds	r1, #12
 80098ee:	1c9a      	adds	r2, r3, #2
 80098f0:	0092      	lsls	r2, r2, #2
 80098f2:	300c      	adds	r0, #12
 80098f4:	f7ff ff5d 	bl	80097b2 <memcpy>
 80098f8:	0021      	movs	r1, r4
 80098fa:	9801      	ldr	r0, [sp, #4]
 80098fc:	f7ff ffa6 	bl	800984c <_Bfree>
 8009900:	0034      	movs	r4, r6
 8009902:	1d3b      	adds	r3, r7, #4
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	18e3      	adds	r3, r4, r3
 8009908:	605d      	str	r5, [r3, #4]
 800990a:	1c7b      	adds	r3, r7, #1
 800990c:	6123      	str	r3, [r4, #16]
 800990e:	0020      	movs	r0, r4
 8009910:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009912:	46c0      	nop			; (mov r8, r8)
 8009914:	0800be70 	.word	0x0800be70
 8009918:	0800befc 	.word	0x0800befc

0800991c <__s2b>:
 800991c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800991e:	0006      	movs	r6, r0
 8009920:	0018      	movs	r0, r3
 8009922:	000c      	movs	r4, r1
 8009924:	3008      	adds	r0, #8
 8009926:	2109      	movs	r1, #9
 8009928:	9301      	str	r3, [sp, #4]
 800992a:	0015      	movs	r5, r2
 800992c:	f7f6 fc92 	bl	8000254 <__divsi3>
 8009930:	2301      	movs	r3, #1
 8009932:	2100      	movs	r1, #0
 8009934:	4283      	cmp	r3, r0
 8009936:	db0a      	blt.n	800994e <__s2b+0x32>
 8009938:	0030      	movs	r0, r6
 800993a:	f7ff ff43 	bl	80097c4 <_Balloc>
 800993e:	1e01      	subs	r1, r0, #0
 8009940:	d108      	bne.n	8009954 <__s2b+0x38>
 8009942:	0002      	movs	r2, r0
 8009944:	4b19      	ldr	r3, [pc, #100]	; (80099ac <__s2b+0x90>)
 8009946:	481a      	ldr	r0, [pc, #104]	; (80099b0 <__s2b+0x94>)
 8009948:	31ce      	adds	r1, #206	; 0xce
 800994a:	f001 faf3 	bl	800af34 <__assert_func>
 800994e:	005b      	lsls	r3, r3, #1
 8009950:	3101      	adds	r1, #1
 8009952:	e7ef      	b.n	8009934 <__s2b+0x18>
 8009954:	9b08      	ldr	r3, [sp, #32]
 8009956:	6143      	str	r3, [r0, #20]
 8009958:	2301      	movs	r3, #1
 800995a:	6103      	str	r3, [r0, #16]
 800995c:	2d09      	cmp	r5, #9
 800995e:	dd18      	ble.n	8009992 <__s2b+0x76>
 8009960:	0023      	movs	r3, r4
 8009962:	3309      	adds	r3, #9
 8009964:	001f      	movs	r7, r3
 8009966:	9300      	str	r3, [sp, #0]
 8009968:	1964      	adds	r4, r4, r5
 800996a:	783b      	ldrb	r3, [r7, #0]
 800996c:	220a      	movs	r2, #10
 800996e:	0030      	movs	r0, r6
 8009970:	3b30      	subs	r3, #48	; 0x30
 8009972:	f7ff ff8f 	bl	8009894 <__multadd>
 8009976:	3701      	adds	r7, #1
 8009978:	0001      	movs	r1, r0
 800997a:	42a7      	cmp	r7, r4
 800997c:	d1f5      	bne.n	800996a <__s2b+0x4e>
 800997e:	002c      	movs	r4, r5
 8009980:	9b00      	ldr	r3, [sp, #0]
 8009982:	3c08      	subs	r4, #8
 8009984:	191c      	adds	r4, r3, r4
 8009986:	002f      	movs	r7, r5
 8009988:	9b01      	ldr	r3, [sp, #4]
 800998a:	429f      	cmp	r7, r3
 800998c:	db04      	blt.n	8009998 <__s2b+0x7c>
 800998e:	0008      	movs	r0, r1
 8009990:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009992:	2509      	movs	r5, #9
 8009994:	340a      	adds	r4, #10
 8009996:	e7f6      	b.n	8009986 <__s2b+0x6a>
 8009998:	1b63      	subs	r3, r4, r5
 800999a:	5ddb      	ldrb	r3, [r3, r7]
 800999c:	220a      	movs	r2, #10
 800999e:	0030      	movs	r0, r6
 80099a0:	3b30      	subs	r3, #48	; 0x30
 80099a2:	f7ff ff77 	bl	8009894 <__multadd>
 80099a6:	3701      	adds	r7, #1
 80099a8:	0001      	movs	r1, r0
 80099aa:	e7ed      	b.n	8009988 <__s2b+0x6c>
 80099ac:	0800be70 	.word	0x0800be70
 80099b0:	0800befc 	.word	0x0800befc

080099b4 <__hi0bits>:
 80099b4:	0003      	movs	r3, r0
 80099b6:	0c02      	lsrs	r2, r0, #16
 80099b8:	2000      	movs	r0, #0
 80099ba:	4282      	cmp	r2, r0
 80099bc:	d101      	bne.n	80099c2 <__hi0bits+0xe>
 80099be:	041b      	lsls	r3, r3, #16
 80099c0:	3010      	adds	r0, #16
 80099c2:	0e1a      	lsrs	r2, r3, #24
 80099c4:	d101      	bne.n	80099ca <__hi0bits+0x16>
 80099c6:	3008      	adds	r0, #8
 80099c8:	021b      	lsls	r3, r3, #8
 80099ca:	0f1a      	lsrs	r2, r3, #28
 80099cc:	d101      	bne.n	80099d2 <__hi0bits+0x1e>
 80099ce:	3004      	adds	r0, #4
 80099d0:	011b      	lsls	r3, r3, #4
 80099d2:	0f9a      	lsrs	r2, r3, #30
 80099d4:	d101      	bne.n	80099da <__hi0bits+0x26>
 80099d6:	3002      	adds	r0, #2
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	2b00      	cmp	r3, #0
 80099dc:	db03      	blt.n	80099e6 <__hi0bits+0x32>
 80099de:	3001      	adds	r0, #1
 80099e0:	005b      	lsls	r3, r3, #1
 80099e2:	d400      	bmi.n	80099e6 <__hi0bits+0x32>
 80099e4:	2020      	movs	r0, #32
 80099e6:	4770      	bx	lr

080099e8 <__lo0bits>:
 80099e8:	6803      	ldr	r3, [r0, #0]
 80099ea:	0002      	movs	r2, r0
 80099ec:	2107      	movs	r1, #7
 80099ee:	0018      	movs	r0, r3
 80099f0:	4008      	ands	r0, r1
 80099f2:	420b      	tst	r3, r1
 80099f4:	d00d      	beq.n	8009a12 <__lo0bits+0x2a>
 80099f6:	3906      	subs	r1, #6
 80099f8:	2000      	movs	r0, #0
 80099fa:	420b      	tst	r3, r1
 80099fc:	d105      	bne.n	8009a0a <__lo0bits+0x22>
 80099fe:	3002      	adds	r0, #2
 8009a00:	4203      	tst	r3, r0
 8009a02:	d003      	beq.n	8009a0c <__lo0bits+0x24>
 8009a04:	40cb      	lsrs	r3, r1
 8009a06:	0008      	movs	r0, r1
 8009a08:	6013      	str	r3, [r2, #0]
 8009a0a:	4770      	bx	lr
 8009a0c:	089b      	lsrs	r3, r3, #2
 8009a0e:	6013      	str	r3, [r2, #0]
 8009a10:	e7fb      	b.n	8009a0a <__lo0bits+0x22>
 8009a12:	b299      	uxth	r1, r3
 8009a14:	2900      	cmp	r1, #0
 8009a16:	d101      	bne.n	8009a1c <__lo0bits+0x34>
 8009a18:	2010      	movs	r0, #16
 8009a1a:	0c1b      	lsrs	r3, r3, #16
 8009a1c:	b2d9      	uxtb	r1, r3
 8009a1e:	2900      	cmp	r1, #0
 8009a20:	d101      	bne.n	8009a26 <__lo0bits+0x3e>
 8009a22:	3008      	adds	r0, #8
 8009a24:	0a1b      	lsrs	r3, r3, #8
 8009a26:	0719      	lsls	r1, r3, #28
 8009a28:	d101      	bne.n	8009a2e <__lo0bits+0x46>
 8009a2a:	3004      	adds	r0, #4
 8009a2c:	091b      	lsrs	r3, r3, #4
 8009a2e:	0799      	lsls	r1, r3, #30
 8009a30:	d101      	bne.n	8009a36 <__lo0bits+0x4e>
 8009a32:	3002      	adds	r0, #2
 8009a34:	089b      	lsrs	r3, r3, #2
 8009a36:	07d9      	lsls	r1, r3, #31
 8009a38:	d4e9      	bmi.n	8009a0e <__lo0bits+0x26>
 8009a3a:	3001      	adds	r0, #1
 8009a3c:	085b      	lsrs	r3, r3, #1
 8009a3e:	d1e6      	bne.n	8009a0e <__lo0bits+0x26>
 8009a40:	2020      	movs	r0, #32
 8009a42:	e7e2      	b.n	8009a0a <__lo0bits+0x22>

08009a44 <__i2b>:
 8009a44:	b510      	push	{r4, lr}
 8009a46:	000c      	movs	r4, r1
 8009a48:	2101      	movs	r1, #1
 8009a4a:	f7ff febb 	bl	80097c4 <_Balloc>
 8009a4e:	2800      	cmp	r0, #0
 8009a50:	d106      	bne.n	8009a60 <__i2b+0x1c>
 8009a52:	21a0      	movs	r1, #160	; 0xa0
 8009a54:	0002      	movs	r2, r0
 8009a56:	4b04      	ldr	r3, [pc, #16]	; (8009a68 <__i2b+0x24>)
 8009a58:	4804      	ldr	r0, [pc, #16]	; (8009a6c <__i2b+0x28>)
 8009a5a:	0049      	lsls	r1, r1, #1
 8009a5c:	f001 fa6a 	bl	800af34 <__assert_func>
 8009a60:	2301      	movs	r3, #1
 8009a62:	6144      	str	r4, [r0, #20]
 8009a64:	6103      	str	r3, [r0, #16]
 8009a66:	bd10      	pop	{r4, pc}
 8009a68:	0800be70 	.word	0x0800be70
 8009a6c:	0800befc 	.word	0x0800befc

08009a70 <__multiply>:
 8009a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a72:	690b      	ldr	r3, [r1, #16]
 8009a74:	0014      	movs	r4, r2
 8009a76:	6912      	ldr	r2, [r2, #16]
 8009a78:	000d      	movs	r5, r1
 8009a7a:	b089      	sub	sp, #36	; 0x24
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	da01      	bge.n	8009a84 <__multiply+0x14>
 8009a80:	0025      	movs	r5, r4
 8009a82:	000c      	movs	r4, r1
 8009a84:	692f      	ldr	r7, [r5, #16]
 8009a86:	6926      	ldr	r6, [r4, #16]
 8009a88:	6869      	ldr	r1, [r5, #4]
 8009a8a:	19bb      	adds	r3, r7, r6
 8009a8c:	9302      	str	r3, [sp, #8]
 8009a8e:	68ab      	ldr	r3, [r5, #8]
 8009a90:	19ba      	adds	r2, r7, r6
 8009a92:	4293      	cmp	r3, r2
 8009a94:	da00      	bge.n	8009a98 <__multiply+0x28>
 8009a96:	3101      	adds	r1, #1
 8009a98:	f7ff fe94 	bl	80097c4 <_Balloc>
 8009a9c:	9001      	str	r0, [sp, #4]
 8009a9e:	2800      	cmp	r0, #0
 8009aa0:	d106      	bne.n	8009ab0 <__multiply+0x40>
 8009aa2:	215e      	movs	r1, #94	; 0x5e
 8009aa4:	0002      	movs	r2, r0
 8009aa6:	4b48      	ldr	r3, [pc, #288]	; (8009bc8 <__multiply+0x158>)
 8009aa8:	4848      	ldr	r0, [pc, #288]	; (8009bcc <__multiply+0x15c>)
 8009aaa:	31ff      	adds	r1, #255	; 0xff
 8009aac:	f001 fa42 	bl	800af34 <__assert_func>
 8009ab0:	9b01      	ldr	r3, [sp, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	3314      	adds	r3, #20
 8009ab6:	469c      	mov	ip, r3
 8009ab8:	19bb      	adds	r3, r7, r6
 8009aba:	009b      	lsls	r3, r3, #2
 8009abc:	4463      	add	r3, ip
 8009abe:	9303      	str	r3, [sp, #12]
 8009ac0:	4663      	mov	r3, ip
 8009ac2:	9903      	ldr	r1, [sp, #12]
 8009ac4:	428b      	cmp	r3, r1
 8009ac6:	d32c      	bcc.n	8009b22 <__multiply+0xb2>
 8009ac8:	002b      	movs	r3, r5
 8009aca:	0022      	movs	r2, r4
 8009acc:	3314      	adds	r3, #20
 8009ace:	00bf      	lsls	r7, r7, #2
 8009ad0:	3214      	adds	r2, #20
 8009ad2:	9306      	str	r3, [sp, #24]
 8009ad4:	00b6      	lsls	r6, r6, #2
 8009ad6:	19db      	adds	r3, r3, r7
 8009ad8:	9304      	str	r3, [sp, #16]
 8009ada:	1993      	adds	r3, r2, r6
 8009adc:	9307      	str	r3, [sp, #28]
 8009ade:	2304      	movs	r3, #4
 8009ae0:	9305      	str	r3, [sp, #20]
 8009ae2:	002b      	movs	r3, r5
 8009ae4:	9904      	ldr	r1, [sp, #16]
 8009ae6:	3315      	adds	r3, #21
 8009ae8:	9200      	str	r2, [sp, #0]
 8009aea:	4299      	cmp	r1, r3
 8009aec:	d305      	bcc.n	8009afa <__multiply+0x8a>
 8009aee:	1b4b      	subs	r3, r1, r5
 8009af0:	3b15      	subs	r3, #21
 8009af2:	089b      	lsrs	r3, r3, #2
 8009af4:	3301      	adds	r3, #1
 8009af6:	009b      	lsls	r3, r3, #2
 8009af8:	9305      	str	r3, [sp, #20]
 8009afa:	9b07      	ldr	r3, [sp, #28]
 8009afc:	9a00      	ldr	r2, [sp, #0]
 8009afe:	429a      	cmp	r2, r3
 8009b00:	d311      	bcc.n	8009b26 <__multiply+0xb6>
 8009b02:	9b02      	ldr	r3, [sp, #8]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	dd06      	ble.n	8009b16 <__multiply+0xa6>
 8009b08:	9b03      	ldr	r3, [sp, #12]
 8009b0a:	3b04      	subs	r3, #4
 8009b0c:	9303      	str	r3, [sp, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	9300      	str	r3, [sp, #0]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d053      	beq.n	8009bbe <__multiply+0x14e>
 8009b16:	9b01      	ldr	r3, [sp, #4]
 8009b18:	9a02      	ldr	r2, [sp, #8]
 8009b1a:	0018      	movs	r0, r3
 8009b1c:	611a      	str	r2, [r3, #16]
 8009b1e:	b009      	add	sp, #36	; 0x24
 8009b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b22:	c304      	stmia	r3!, {r2}
 8009b24:	e7cd      	b.n	8009ac2 <__multiply+0x52>
 8009b26:	9b00      	ldr	r3, [sp, #0]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	b298      	uxth	r0, r3
 8009b2c:	2800      	cmp	r0, #0
 8009b2e:	d01b      	beq.n	8009b68 <__multiply+0xf8>
 8009b30:	4667      	mov	r7, ip
 8009b32:	2400      	movs	r4, #0
 8009b34:	9e06      	ldr	r6, [sp, #24]
 8009b36:	ce02      	ldmia	r6!, {r1}
 8009b38:	683a      	ldr	r2, [r7, #0]
 8009b3a:	b28b      	uxth	r3, r1
 8009b3c:	4343      	muls	r3, r0
 8009b3e:	b292      	uxth	r2, r2
 8009b40:	189b      	adds	r3, r3, r2
 8009b42:	191b      	adds	r3, r3, r4
 8009b44:	0c0c      	lsrs	r4, r1, #16
 8009b46:	4344      	muls	r4, r0
 8009b48:	683a      	ldr	r2, [r7, #0]
 8009b4a:	0c11      	lsrs	r1, r2, #16
 8009b4c:	1861      	adds	r1, r4, r1
 8009b4e:	0c1c      	lsrs	r4, r3, #16
 8009b50:	1909      	adds	r1, r1, r4
 8009b52:	0c0c      	lsrs	r4, r1, #16
 8009b54:	b29b      	uxth	r3, r3
 8009b56:	0409      	lsls	r1, r1, #16
 8009b58:	430b      	orrs	r3, r1
 8009b5a:	c708      	stmia	r7!, {r3}
 8009b5c:	9b04      	ldr	r3, [sp, #16]
 8009b5e:	42b3      	cmp	r3, r6
 8009b60:	d8e9      	bhi.n	8009b36 <__multiply+0xc6>
 8009b62:	4663      	mov	r3, ip
 8009b64:	9a05      	ldr	r2, [sp, #20]
 8009b66:	509c      	str	r4, [r3, r2]
 8009b68:	9b00      	ldr	r3, [sp, #0]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	0c1e      	lsrs	r6, r3, #16
 8009b6e:	d020      	beq.n	8009bb2 <__multiply+0x142>
 8009b70:	4663      	mov	r3, ip
 8009b72:	002c      	movs	r4, r5
 8009b74:	4660      	mov	r0, ip
 8009b76:	2700      	movs	r7, #0
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	3414      	adds	r4, #20
 8009b7c:	6822      	ldr	r2, [r4, #0]
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	b291      	uxth	r1, r2
 8009b82:	4371      	muls	r1, r6
 8009b84:	6802      	ldr	r2, [r0, #0]
 8009b86:	0c12      	lsrs	r2, r2, #16
 8009b88:	1889      	adds	r1, r1, r2
 8009b8a:	19cf      	adds	r7, r1, r7
 8009b8c:	0439      	lsls	r1, r7, #16
 8009b8e:	430b      	orrs	r3, r1
 8009b90:	6003      	str	r3, [r0, #0]
 8009b92:	cc02      	ldmia	r4!, {r1}
 8009b94:	6843      	ldr	r3, [r0, #4]
 8009b96:	0c09      	lsrs	r1, r1, #16
 8009b98:	4371      	muls	r1, r6
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	0c3f      	lsrs	r7, r7, #16
 8009b9e:	18cb      	adds	r3, r1, r3
 8009ba0:	9a04      	ldr	r2, [sp, #16]
 8009ba2:	19db      	adds	r3, r3, r7
 8009ba4:	0c1f      	lsrs	r7, r3, #16
 8009ba6:	3004      	adds	r0, #4
 8009ba8:	42a2      	cmp	r2, r4
 8009baa:	d8e7      	bhi.n	8009b7c <__multiply+0x10c>
 8009bac:	4662      	mov	r2, ip
 8009bae:	9905      	ldr	r1, [sp, #20]
 8009bb0:	5053      	str	r3, [r2, r1]
 8009bb2:	9b00      	ldr	r3, [sp, #0]
 8009bb4:	3304      	adds	r3, #4
 8009bb6:	9300      	str	r3, [sp, #0]
 8009bb8:	2304      	movs	r3, #4
 8009bba:	449c      	add	ip, r3
 8009bbc:	e79d      	b.n	8009afa <__multiply+0x8a>
 8009bbe:	9b02      	ldr	r3, [sp, #8]
 8009bc0:	3b01      	subs	r3, #1
 8009bc2:	9302      	str	r3, [sp, #8]
 8009bc4:	e79d      	b.n	8009b02 <__multiply+0x92>
 8009bc6:	46c0      	nop			; (mov r8, r8)
 8009bc8:	0800be70 	.word	0x0800be70
 8009bcc:	0800befc 	.word	0x0800befc

08009bd0 <__pow5mult>:
 8009bd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bd2:	2303      	movs	r3, #3
 8009bd4:	0015      	movs	r5, r2
 8009bd6:	0007      	movs	r7, r0
 8009bd8:	000e      	movs	r6, r1
 8009bda:	401a      	ands	r2, r3
 8009bdc:	421d      	tst	r5, r3
 8009bde:	d008      	beq.n	8009bf2 <__pow5mult+0x22>
 8009be0:	4925      	ldr	r1, [pc, #148]	; (8009c78 <__pow5mult+0xa8>)
 8009be2:	3a01      	subs	r2, #1
 8009be4:	0092      	lsls	r2, r2, #2
 8009be6:	5852      	ldr	r2, [r2, r1]
 8009be8:	2300      	movs	r3, #0
 8009bea:	0031      	movs	r1, r6
 8009bec:	f7ff fe52 	bl	8009894 <__multadd>
 8009bf0:	0006      	movs	r6, r0
 8009bf2:	10ad      	asrs	r5, r5, #2
 8009bf4:	d03d      	beq.n	8009c72 <__pow5mult+0xa2>
 8009bf6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8009bf8:	2c00      	cmp	r4, #0
 8009bfa:	d10f      	bne.n	8009c1c <__pow5mult+0x4c>
 8009bfc:	2010      	movs	r0, #16
 8009bfe:	f7ff fdb1 	bl	8009764 <malloc>
 8009c02:	1e02      	subs	r2, r0, #0
 8009c04:	6278      	str	r0, [r7, #36]	; 0x24
 8009c06:	d105      	bne.n	8009c14 <__pow5mult+0x44>
 8009c08:	21d7      	movs	r1, #215	; 0xd7
 8009c0a:	4b1c      	ldr	r3, [pc, #112]	; (8009c7c <__pow5mult+0xac>)
 8009c0c:	481c      	ldr	r0, [pc, #112]	; (8009c80 <__pow5mult+0xb0>)
 8009c0e:	0049      	lsls	r1, r1, #1
 8009c10:	f001 f990 	bl	800af34 <__assert_func>
 8009c14:	6044      	str	r4, [r0, #4]
 8009c16:	6084      	str	r4, [r0, #8]
 8009c18:	6004      	str	r4, [r0, #0]
 8009c1a:	60c4      	str	r4, [r0, #12]
 8009c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1e:	689c      	ldr	r4, [r3, #8]
 8009c20:	9301      	str	r3, [sp, #4]
 8009c22:	2c00      	cmp	r4, #0
 8009c24:	d108      	bne.n	8009c38 <__pow5mult+0x68>
 8009c26:	0038      	movs	r0, r7
 8009c28:	4916      	ldr	r1, [pc, #88]	; (8009c84 <__pow5mult+0xb4>)
 8009c2a:	f7ff ff0b 	bl	8009a44 <__i2b>
 8009c2e:	9b01      	ldr	r3, [sp, #4]
 8009c30:	0004      	movs	r4, r0
 8009c32:	6098      	str	r0, [r3, #8]
 8009c34:	2300      	movs	r3, #0
 8009c36:	6003      	str	r3, [r0, #0]
 8009c38:	2301      	movs	r3, #1
 8009c3a:	421d      	tst	r5, r3
 8009c3c:	d00a      	beq.n	8009c54 <__pow5mult+0x84>
 8009c3e:	0031      	movs	r1, r6
 8009c40:	0022      	movs	r2, r4
 8009c42:	0038      	movs	r0, r7
 8009c44:	f7ff ff14 	bl	8009a70 <__multiply>
 8009c48:	0031      	movs	r1, r6
 8009c4a:	9001      	str	r0, [sp, #4]
 8009c4c:	0038      	movs	r0, r7
 8009c4e:	f7ff fdfd 	bl	800984c <_Bfree>
 8009c52:	9e01      	ldr	r6, [sp, #4]
 8009c54:	106d      	asrs	r5, r5, #1
 8009c56:	d00c      	beq.n	8009c72 <__pow5mult+0xa2>
 8009c58:	6820      	ldr	r0, [r4, #0]
 8009c5a:	2800      	cmp	r0, #0
 8009c5c:	d107      	bne.n	8009c6e <__pow5mult+0x9e>
 8009c5e:	0022      	movs	r2, r4
 8009c60:	0021      	movs	r1, r4
 8009c62:	0038      	movs	r0, r7
 8009c64:	f7ff ff04 	bl	8009a70 <__multiply>
 8009c68:	2300      	movs	r3, #0
 8009c6a:	6020      	str	r0, [r4, #0]
 8009c6c:	6003      	str	r3, [r0, #0]
 8009c6e:	0004      	movs	r4, r0
 8009c70:	e7e2      	b.n	8009c38 <__pow5mult+0x68>
 8009c72:	0030      	movs	r0, r6
 8009c74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009c76:	46c0      	nop			; (mov r8, r8)
 8009c78:	0800c048 	.word	0x0800c048
 8009c7c:	0800bdfe 	.word	0x0800bdfe
 8009c80:	0800befc 	.word	0x0800befc
 8009c84:	00000271 	.word	0x00000271

08009c88 <__lshift>:
 8009c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c8a:	000c      	movs	r4, r1
 8009c8c:	0017      	movs	r7, r2
 8009c8e:	6923      	ldr	r3, [r4, #16]
 8009c90:	1155      	asrs	r5, r2, #5
 8009c92:	b087      	sub	sp, #28
 8009c94:	18eb      	adds	r3, r5, r3
 8009c96:	9302      	str	r3, [sp, #8]
 8009c98:	3301      	adds	r3, #1
 8009c9a:	9301      	str	r3, [sp, #4]
 8009c9c:	6849      	ldr	r1, [r1, #4]
 8009c9e:	68a3      	ldr	r3, [r4, #8]
 8009ca0:	9004      	str	r0, [sp, #16]
 8009ca2:	9a01      	ldr	r2, [sp, #4]
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	db10      	blt.n	8009cca <__lshift+0x42>
 8009ca8:	9804      	ldr	r0, [sp, #16]
 8009caa:	f7ff fd8b 	bl	80097c4 <_Balloc>
 8009cae:	2300      	movs	r3, #0
 8009cb0:	0002      	movs	r2, r0
 8009cb2:	0006      	movs	r6, r0
 8009cb4:	0019      	movs	r1, r3
 8009cb6:	3214      	adds	r2, #20
 8009cb8:	4298      	cmp	r0, r3
 8009cba:	d10c      	bne.n	8009cd6 <__lshift+0x4e>
 8009cbc:	21da      	movs	r1, #218	; 0xda
 8009cbe:	0002      	movs	r2, r0
 8009cc0:	4b26      	ldr	r3, [pc, #152]	; (8009d5c <__lshift+0xd4>)
 8009cc2:	4827      	ldr	r0, [pc, #156]	; (8009d60 <__lshift+0xd8>)
 8009cc4:	31ff      	adds	r1, #255	; 0xff
 8009cc6:	f001 f935 	bl	800af34 <__assert_func>
 8009cca:	3101      	adds	r1, #1
 8009ccc:	005b      	lsls	r3, r3, #1
 8009cce:	e7e8      	b.n	8009ca2 <__lshift+0x1a>
 8009cd0:	0098      	lsls	r0, r3, #2
 8009cd2:	5011      	str	r1, [r2, r0]
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	42ab      	cmp	r3, r5
 8009cd8:	dbfa      	blt.n	8009cd0 <__lshift+0x48>
 8009cda:	43eb      	mvns	r3, r5
 8009cdc:	17db      	asrs	r3, r3, #31
 8009cde:	401d      	ands	r5, r3
 8009ce0:	211f      	movs	r1, #31
 8009ce2:	0023      	movs	r3, r4
 8009ce4:	0038      	movs	r0, r7
 8009ce6:	00ad      	lsls	r5, r5, #2
 8009ce8:	1955      	adds	r5, r2, r5
 8009cea:	6922      	ldr	r2, [r4, #16]
 8009cec:	3314      	adds	r3, #20
 8009cee:	0092      	lsls	r2, r2, #2
 8009cf0:	4008      	ands	r0, r1
 8009cf2:	4684      	mov	ip, r0
 8009cf4:	189a      	adds	r2, r3, r2
 8009cf6:	420f      	tst	r7, r1
 8009cf8:	d02a      	beq.n	8009d50 <__lshift+0xc8>
 8009cfa:	3101      	adds	r1, #1
 8009cfc:	1a09      	subs	r1, r1, r0
 8009cfe:	9105      	str	r1, [sp, #20]
 8009d00:	2100      	movs	r1, #0
 8009d02:	9503      	str	r5, [sp, #12]
 8009d04:	4667      	mov	r7, ip
 8009d06:	6818      	ldr	r0, [r3, #0]
 8009d08:	40b8      	lsls	r0, r7
 8009d0a:	4301      	orrs	r1, r0
 8009d0c:	9803      	ldr	r0, [sp, #12]
 8009d0e:	c002      	stmia	r0!, {r1}
 8009d10:	cb02      	ldmia	r3!, {r1}
 8009d12:	9003      	str	r0, [sp, #12]
 8009d14:	9805      	ldr	r0, [sp, #20]
 8009d16:	40c1      	lsrs	r1, r0
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d8f3      	bhi.n	8009d04 <__lshift+0x7c>
 8009d1c:	0020      	movs	r0, r4
 8009d1e:	3015      	adds	r0, #21
 8009d20:	2304      	movs	r3, #4
 8009d22:	4282      	cmp	r2, r0
 8009d24:	d304      	bcc.n	8009d30 <__lshift+0xa8>
 8009d26:	1b13      	subs	r3, r2, r4
 8009d28:	3b15      	subs	r3, #21
 8009d2a:	089b      	lsrs	r3, r3, #2
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	009b      	lsls	r3, r3, #2
 8009d30:	50e9      	str	r1, [r5, r3]
 8009d32:	2900      	cmp	r1, #0
 8009d34:	d002      	beq.n	8009d3c <__lshift+0xb4>
 8009d36:	9b02      	ldr	r3, [sp, #8]
 8009d38:	3302      	adds	r3, #2
 8009d3a:	9301      	str	r3, [sp, #4]
 8009d3c:	9b01      	ldr	r3, [sp, #4]
 8009d3e:	9804      	ldr	r0, [sp, #16]
 8009d40:	3b01      	subs	r3, #1
 8009d42:	0021      	movs	r1, r4
 8009d44:	6133      	str	r3, [r6, #16]
 8009d46:	f7ff fd81 	bl	800984c <_Bfree>
 8009d4a:	0030      	movs	r0, r6
 8009d4c:	b007      	add	sp, #28
 8009d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d50:	cb02      	ldmia	r3!, {r1}
 8009d52:	c502      	stmia	r5!, {r1}
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d8fb      	bhi.n	8009d50 <__lshift+0xc8>
 8009d58:	e7f0      	b.n	8009d3c <__lshift+0xb4>
 8009d5a:	46c0      	nop			; (mov r8, r8)
 8009d5c:	0800be70 	.word	0x0800be70
 8009d60:	0800befc 	.word	0x0800befc

08009d64 <__mcmp>:
 8009d64:	6902      	ldr	r2, [r0, #16]
 8009d66:	690b      	ldr	r3, [r1, #16]
 8009d68:	b530      	push	{r4, r5, lr}
 8009d6a:	0004      	movs	r4, r0
 8009d6c:	1ad0      	subs	r0, r2, r3
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d10d      	bne.n	8009d8e <__mcmp+0x2a>
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	3414      	adds	r4, #20
 8009d76:	3114      	adds	r1, #20
 8009d78:	18e2      	adds	r2, r4, r3
 8009d7a:	18c9      	adds	r1, r1, r3
 8009d7c:	3a04      	subs	r2, #4
 8009d7e:	3904      	subs	r1, #4
 8009d80:	6815      	ldr	r5, [r2, #0]
 8009d82:	680b      	ldr	r3, [r1, #0]
 8009d84:	429d      	cmp	r5, r3
 8009d86:	d003      	beq.n	8009d90 <__mcmp+0x2c>
 8009d88:	2001      	movs	r0, #1
 8009d8a:	429d      	cmp	r5, r3
 8009d8c:	d303      	bcc.n	8009d96 <__mcmp+0x32>
 8009d8e:	bd30      	pop	{r4, r5, pc}
 8009d90:	4294      	cmp	r4, r2
 8009d92:	d3f3      	bcc.n	8009d7c <__mcmp+0x18>
 8009d94:	e7fb      	b.n	8009d8e <__mcmp+0x2a>
 8009d96:	4240      	negs	r0, r0
 8009d98:	e7f9      	b.n	8009d8e <__mcmp+0x2a>
	...

08009d9c <__mdiff>:
 8009d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d9e:	000e      	movs	r6, r1
 8009da0:	0007      	movs	r7, r0
 8009da2:	0011      	movs	r1, r2
 8009da4:	0030      	movs	r0, r6
 8009da6:	b087      	sub	sp, #28
 8009da8:	0014      	movs	r4, r2
 8009daa:	f7ff ffdb 	bl	8009d64 <__mcmp>
 8009dae:	1e05      	subs	r5, r0, #0
 8009db0:	d110      	bne.n	8009dd4 <__mdiff+0x38>
 8009db2:	0001      	movs	r1, r0
 8009db4:	0038      	movs	r0, r7
 8009db6:	f7ff fd05 	bl	80097c4 <_Balloc>
 8009dba:	1e02      	subs	r2, r0, #0
 8009dbc:	d104      	bne.n	8009dc8 <__mdiff+0x2c>
 8009dbe:	4b40      	ldr	r3, [pc, #256]	; (8009ec0 <__mdiff+0x124>)
 8009dc0:	4940      	ldr	r1, [pc, #256]	; (8009ec4 <__mdiff+0x128>)
 8009dc2:	4841      	ldr	r0, [pc, #260]	; (8009ec8 <__mdiff+0x12c>)
 8009dc4:	f001 f8b6 	bl	800af34 <__assert_func>
 8009dc8:	2301      	movs	r3, #1
 8009dca:	6145      	str	r5, [r0, #20]
 8009dcc:	6103      	str	r3, [r0, #16]
 8009dce:	0010      	movs	r0, r2
 8009dd0:	b007      	add	sp, #28
 8009dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	9301      	str	r3, [sp, #4]
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	db04      	blt.n	8009de6 <__mdiff+0x4a>
 8009ddc:	0023      	movs	r3, r4
 8009dde:	0034      	movs	r4, r6
 8009de0:	001e      	movs	r6, r3
 8009de2:	2300      	movs	r3, #0
 8009de4:	9301      	str	r3, [sp, #4]
 8009de6:	0038      	movs	r0, r7
 8009de8:	6861      	ldr	r1, [r4, #4]
 8009dea:	f7ff fceb 	bl	80097c4 <_Balloc>
 8009dee:	1e02      	subs	r2, r0, #0
 8009df0:	d103      	bne.n	8009dfa <__mdiff+0x5e>
 8009df2:	2190      	movs	r1, #144	; 0x90
 8009df4:	4b32      	ldr	r3, [pc, #200]	; (8009ec0 <__mdiff+0x124>)
 8009df6:	0089      	lsls	r1, r1, #2
 8009df8:	e7e3      	b.n	8009dc2 <__mdiff+0x26>
 8009dfa:	9b01      	ldr	r3, [sp, #4]
 8009dfc:	2700      	movs	r7, #0
 8009dfe:	60c3      	str	r3, [r0, #12]
 8009e00:	6920      	ldr	r0, [r4, #16]
 8009e02:	3414      	adds	r4, #20
 8009e04:	9401      	str	r4, [sp, #4]
 8009e06:	9b01      	ldr	r3, [sp, #4]
 8009e08:	0084      	lsls	r4, r0, #2
 8009e0a:	191b      	adds	r3, r3, r4
 8009e0c:	0034      	movs	r4, r6
 8009e0e:	9302      	str	r3, [sp, #8]
 8009e10:	6933      	ldr	r3, [r6, #16]
 8009e12:	3414      	adds	r4, #20
 8009e14:	0099      	lsls	r1, r3, #2
 8009e16:	1863      	adds	r3, r4, r1
 8009e18:	9303      	str	r3, [sp, #12]
 8009e1a:	0013      	movs	r3, r2
 8009e1c:	3314      	adds	r3, #20
 8009e1e:	469c      	mov	ip, r3
 8009e20:	9305      	str	r3, [sp, #20]
 8009e22:	9b01      	ldr	r3, [sp, #4]
 8009e24:	9304      	str	r3, [sp, #16]
 8009e26:	9b04      	ldr	r3, [sp, #16]
 8009e28:	cc02      	ldmia	r4!, {r1}
 8009e2a:	cb20      	ldmia	r3!, {r5}
 8009e2c:	9304      	str	r3, [sp, #16]
 8009e2e:	b2ab      	uxth	r3, r5
 8009e30:	19df      	adds	r7, r3, r7
 8009e32:	b28b      	uxth	r3, r1
 8009e34:	1afb      	subs	r3, r7, r3
 8009e36:	0c09      	lsrs	r1, r1, #16
 8009e38:	0c2d      	lsrs	r5, r5, #16
 8009e3a:	1a6d      	subs	r5, r5, r1
 8009e3c:	1419      	asrs	r1, r3, #16
 8009e3e:	186d      	adds	r5, r5, r1
 8009e40:	4661      	mov	r1, ip
 8009e42:	142f      	asrs	r7, r5, #16
 8009e44:	b29b      	uxth	r3, r3
 8009e46:	042d      	lsls	r5, r5, #16
 8009e48:	432b      	orrs	r3, r5
 8009e4a:	c108      	stmia	r1!, {r3}
 8009e4c:	9b03      	ldr	r3, [sp, #12]
 8009e4e:	468c      	mov	ip, r1
 8009e50:	42a3      	cmp	r3, r4
 8009e52:	d8e8      	bhi.n	8009e26 <__mdiff+0x8a>
 8009e54:	0031      	movs	r1, r6
 8009e56:	9c03      	ldr	r4, [sp, #12]
 8009e58:	3115      	adds	r1, #21
 8009e5a:	2304      	movs	r3, #4
 8009e5c:	428c      	cmp	r4, r1
 8009e5e:	d304      	bcc.n	8009e6a <__mdiff+0xce>
 8009e60:	1ba3      	subs	r3, r4, r6
 8009e62:	3b15      	subs	r3, #21
 8009e64:	089b      	lsrs	r3, r3, #2
 8009e66:	3301      	adds	r3, #1
 8009e68:	009b      	lsls	r3, r3, #2
 8009e6a:	9901      	ldr	r1, [sp, #4]
 8009e6c:	18cc      	adds	r4, r1, r3
 8009e6e:	9905      	ldr	r1, [sp, #20]
 8009e70:	0026      	movs	r6, r4
 8009e72:	18cb      	adds	r3, r1, r3
 8009e74:	469c      	mov	ip, r3
 8009e76:	9902      	ldr	r1, [sp, #8]
 8009e78:	428e      	cmp	r6, r1
 8009e7a:	d310      	bcc.n	8009e9e <__mdiff+0x102>
 8009e7c:	9e02      	ldr	r6, [sp, #8]
 8009e7e:	1ee1      	subs	r1, r4, #3
 8009e80:	2500      	movs	r5, #0
 8009e82:	428e      	cmp	r6, r1
 8009e84:	d304      	bcc.n	8009e90 <__mdiff+0xf4>
 8009e86:	0031      	movs	r1, r6
 8009e88:	3103      	adds	r1, #3
 8009e8a:	1b0c      	subs	r4, r1, r4
 8009e8c:	08a4      	lsrs	r4, r4, #2
 8009e8e:	00a5      	lsls	r5, r4, #2
 8009e90:	195b      	adds	r3, r3, r5
 8009e92:	3b04      	subs	r3, #4
 8009e94:	6819      	ldr	r1, [r3, #0]
 8009e96:	2900      	cmp	r1, #0
 8009e98:	d00f      	beq.n	8009eba <__mdiff+0x11e>
 8009e9a:	6110      	str	r0, [r2, #16]
 8009e9c:	e797      	b.n	8009dce <__mdiff+0x32>
 8009e9e:	ce02      	ldmia	r6!, {r1}
 8009ea0:	b28d      	uxth	r5, r1
 8009ea2:	19ed      	adds	r5, r5, r7
 8009ea4:	0c0f      	lsrs	r7, r1, #16
 8009ea6:	1429      	asrs	r1, r5, #16
 8009ea8:	1879      	adds	r1, r7, r1
 8009eaa:	140f      	asrs	r7, r1, #16
 8009eac:	b2ad      	uxth	r5, r5
 8009eae:	0409      	lsls	r1, r1, #16
 8009eb0:	430d      	orrs	r5, r1
 8009eb2:	4661      	mov	r1, ip
 8009eb4:	c120      	stmia	r1!, {r5}
 8009eb6:	468c      	mov	ip, r1
 8009eb8:	e7dd      	b.n	8009e76 <__mdiff+0xda>
 8009eba:	3801      	subs	r0, #1
 8009ebc:	e7e9      	b.n	8009e92 <__mdiff+0xf6>
 8009ebe:	46c0      	nop			; (mov r8, r8)
 8009ec0:	0800be70 	.word	0x0800be70
 8009ec4:	00000232 	.word	0x00000232
 8009ec8:	0800befc 	.word	0x0800befc

08009ecc <__ulp>:
 8009ecc:	4b0f      	ldr	r3, [pc, #60]	; (8009f0c <__ulp+0x40>)
 8009ece:	4019      	ands	r1, r3
 8009ed0:	4b0f      	ldr	r3, [pc, #60]	; (8009f10 <__ulp+0x44>)
 8009ed2:	18c9      	adds	r1, r1, r3
 8009ed4:	2900      	cmp	r1, #0
 8009ed6:	dd04      	ble.n	8009ee2 <__ulp+0x16>
 8009ed8:	2200      	movs	r2, #0
 8009eda:	000b      	movs	r3, r1
 8009edc:	0010      	movs	r0, r2
 8009ede:	0019      	movs	r1, r3
 8009ee0:	4770      	bx	lr
 8009ee2:	4249      	negs	r1, r1
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	1509      	asrs	r1, r1, #20
 8009eea:	2913      	cmp	r1, #19
 8009eec:	dc04      	bgt.n	8009ef8 <__ulp+0x2c>
 8009eee:	2080      	movs	r0, #128	; 0x80
 8009ef0:	0300      	lsls	r0, r0, #12
 8009ef2:	4108      	asrs	r0, r1
 8009ef4:	0003      	movs	r3, r0
 8009ef6:	e7f1      	b.n	8009edc <__ulp+0x10>
 8009ef8:	3914      	subs	r1, #20
 8009efa:	2001      	movs	r0, #1
 8009efc:	291e      	cmp	r1, #30
 8009efe:	dc02      	bgt.n	8009f06 <__ulp+0x3a>
 8009f00:	2080      	movs	r0, #128	; 0x80
 8009f02:	0600      	lsls	r0, r0, #24
 8009f04:	40c8      	lsrs	r0, r1
 8009f06:	0002      	movs	r2, r0
 8009f08:	e7e8      	b.n	8009edc <__ulp+0x10>
 8009f0a:	46c0      	nop			; (mov r8, r8)
 8009f0c:	7ff00000 	.word	0x7ff00000
 8009f10:	fcc00000 	.word	0xfcc00000

08009f14 <__b2d>:
 8009f14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f16:	0006      	movs	r6, r0
 8009f18:	6903      	ldr	r3, [r0, #16]
 8009f1a:	3614      	adds	r6, #20
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	18f3      	adds	r3, r6, r3
 8009f20:	1f1d      	subs	r5, r3, #4
 8009f22:	682c      	ldr	r4, [r5, #0]
 8009f24:	000f      	movs	r7, r1
 8009f26:	0020      	movs	r0, r4
 8009f28:	9301      	str	r3, [sp, #4]
 8009f2a:	f7ff fd43 	bl	80099b4 <__hi0bits>
 8009f2e:	2320      	movs	r3, #32
 8009f30:	1a1b      	subs	r3, r3, r0
 8009f32:	491f      	ldr	r1, [pc, #124]	; (8009fb0 <__b2d+0x9c>)
 8009f34:	603b      	str	r3, [r7, #0]
 8009f36:	280a      	cmp	r0, #10
 8009f38:	dc16      	bgt.n	8009f68 <__b2d+0x54>
 8009f3a:	230b      	movs	r3, #11
 8009f3c:	0027      	movs	r7, r4
 8009f3e:	1a1b      	subs	r3, r3, r0
 8009f40:	40df      	lsrs	r7, r3
 8009f42:	4339      	orrs	r1, r7
 8009f44:	469c      	mov	ip, r3
 8009f46:	000b      	movs	r3, r1
 8009f48:	2100      	movs	r1, #0
 8009f4a:	42ae      	cmp	r6, r5
 8009f4c:	d202      	bcs.n	8009f54 <__b2d+0x40>
 8009f4e:	9901      	ldr	r1, [sp, #4]
 8009f50:	3908      	subs	r1, #8
 8009f52:	6809      	ldr	r1, [r1, #0]
 8009f54:	3015      	adds	r0, #21
 8009f56:	4084      	lsls	r4, r0
 8009f58:	4660      	mov	r0, ip
 8009f5a:	40c1      	lsrs	r1, r0
 8009f5c:	430c      	orrs	r4, r1
 8009f5e:	0022      	movs	r2, r4
 8009f60:	0010      	movs	r0, r2
 8009f62:	0019      	movs	r1, r3
 8009f64:	b003      	add	sp, #12
 8009f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f68:	2700      	movs	r7, #0
 8009f6a:	42ae      	cmp	r6, r5
 8009f6c:	d202      	bcs.n	8009f74 <__b2d+0x60>
 8009f6e:	9d01      	ldr	r5, [sp, #4]
 8009f70:	3d08      	subs	r5, #8
 8009f72:	682f      	ldr	r7, [r5, #0]
 8009f74:	230b      	movs	r3, #11
 8009f76:	425b      	negs	r3, r3
 8009f78:	469c      	mov	ip, r3
 8009f7a:	4484      	add	ip, r0
 8009f7c:	280b      	cmp	r0, #11
 8009f7e:	d013      	beq.n	8009fa8 <__b2d+0x94>
 8009f80:	4663      	mov	r3, ip
 8009f82:	2020      	movs	r0, #32
 8009f84:	409c      	lsls	r4, r3
 8009f86:	1ac0      	subs	r0, r0, r3
 8009f88:	003b      	movs	r3, r7
 8009f8a:	40c3      	lsrs	r3, r0
 8009f8c:	431c      	orrs	r4, r3
 8009f8e:	4321      	orrs	r1, r4
 8009f90:	000b      	movs	r3, r1
 8009f92:	2100      	movs	r1, #0
 8009f94:	42b5      	cmp	r5, r6
 8009f96:	d901      	bls.n	8009f9c <__b2d+0x88>
 8009f98:	3d04      	subs	r5, #4
 8009f9a:	6829      	ldr	r1, [r5, #0]
 8009f9c:	4664      	mov	r4, ip
 8009f9e:	40c1      	lsrs	r1, r0
 8009fa0:	40a7      	lsls	r7, r4
 8009fa2:	430f      	orrs	r7, r1
 8009fa4:	003a      	movs	r2, r7
 8009fa6:	e7db      	b.n	8009f60 <__b2d+0x4c>
 8009fa8:	4321      	orrs	r1, r4
 8009faa:	000b      	movs	r3, r1
 8009fac:	e7fa      	b.n	8009fa4 <__b2d+0x90>
 8009fae:	46c0      	nop			; (mov r8, r8)
 8009fb0:	3ff00000 	.word	0x3ff00000

08009fb4 <__d2b>:
 8009fb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fb6:	2101      	movs	r1, #1
 8009fb8:	0014      	movs	r4, r2
 8009fba:	001e      	movs	r6, r3
 8009fbc:	9f08      	ldr	r7, [sp, #32]
 8009fbe:	f7ff fc01 	bl	80097c4 <_Balloc>
 8009fc2:	1e05      	subs	r5, r0, #0
 8009fc4:	d105      	bne.n	8009fd2 <__d2b+0x1e>
 8009fc6:	0002      	movs	r2, r0
 8009fc8:	4b26      	ldr	r3, [pc, #152]	; (800a064 <__d2b+0xb0>)
 8009fca:	4927      	ldr	r1, [pc, #156]	; (800a068 <__d2b+0xb4>)
 8009fcc:	4827      	ldr	r0, [pc, #156]	; (800a06c <__d2b+0xb8>)
 8009fce:	f000 ffb1 	bl	800af34 <__assert_func>
 8009fd2:	0333      	lsls	r3, r6, #12
 8009fd4:	0076      	lsls	r6, r6, #1
 8009fd6:	0b1b      	lsrs	r3, r3, #12
 8009fd8:	0d76      	lsrs	r6, r6, #21
 8009fda:	d124      	bne.n	800a026 <__d2b+0x72>
 8009fdc:	9301      	str	r3, [sp, #4]
 8009fde:	2c00      	cmp	r4, #0
 8009fe0:	d027      	beq.n	800a032 <__d2b+0x7e>
 8009fe2:	4668      	mov	r0, sp
 8009fe4:	9400      	str	r4, [sp, #0]
 8009fe6:	f7ff fcff 	bl	80099e8 <__lo0bits>
 8009fea:	9c00      	ldr	r4, [sp, #0]
 8009fec:	2800      	cmp	r0, #0
 8009fee:	d01e      	beq.n	800a02e <__d2b+0x7a>
 8009ff0:	9b01      	ldr	r3, [sp, #4]
 8009ff2:	2120      	movs	r1, #32
 8009ff4:	001a      	movs	r2, r3
 8009ff6:	1a09      	subs	r1, r1, r0
 8009ff8:	408a      	lsls	r2, r1
 8009ffa:	40c3      	lsrs	r3, r0
 8009ffc:	4322      	orrs	r2, r4
 8009ffe:	616a      	str	r2, [r5, #20]
 800a000:	9301      	str	r3, [sp, #4]
 800a002:	9c01      	ldr	r4, [sp, #4]
 800a004:	61ac      	str	r4, [r5, #24]
 800a006:	1e63      	subs	r3, r4, #1
 800a008:	419c      	sbcs	r4, r3
 800a00a:	3401      	adds	r4, #1
 800a00c:	612c      	str	r4, [r5, #16]
 800a00e:	2e00      	cmp	r6, #0
 800a010:	d018      	beq.n	800a044 <__d2b+0x90>
 800a012:	4b17      	ldr	r3, [pc, #92]	; (800a070 <__d2b+0xbc>)
 800a014:	18f6      	adds	r6, r6, r3
 800a016:	2335      	movs	r3, #53	; 0x35
 800a018:	1836      	adds	r6, r6, r0
 800a01a:	1a18      	subs	r0, r3, r0
 800a01c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a01e:	603e      	str	r6, [r7, #0]
 800a020:	6018      	str	r0, [r3, #0]
 800a022:	0028      	movs	r0, r5
 800a024:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a026:	2280      	movs	r2, #128	; 0x80
 800a028:	0352      	lsls	r2, r2, #13
 800a02a:	4313      	orrs	r3, r2
 800a02c:	e7d6      	b.n	8009fdc <__d2b+0x28>
 800a02e:	616c      	str	r4, [r5, #20]
 800a030:	e7e7      	b.n	800a002 <__d2b+0x4e>
 800a032:	a801      	add	r0, sp, #4
 800a034:	f7ff fcd8 	bl	80099e8 <__lo0bits>
 800a038:	2401      	movs	r4, #1
 800a03a:	9b01      	ldr	r3, [sp, #4]
 800a03c:	612c      	str	r4, [r5, #16]
 800a03e:	616b      	str	r3, [r5, #20]
 800a040:	3020      	adds	r0, #32
 800a042:	e7e4      	b.n	800a00e <__d2b+0x5a>
 800a044:	4b0b      	ldr	r3, [pc, #44]	; (800a074 <__d2b+0xc0>)
 800a046:	18c0      	adds	r0, r0, r3
 800a048:	4b0b      	ldr	r3, [pc, #44]	; (800a078 <__d2b+0xc4>)
 800a04a:	6038      	str	r0, [r7, #0]
 800a04c:	18e3      	adds	r3, r4, r3
 800a04e:	009b      	lsls	r3, r3, #2
 800a050:	18eb      	adds	r3, r5, r3
 800a052:	6958      	ldr	r0, [r3, #20]
 800a054:	f7ff fcae 	bl	80099b4 <__hi0bits>
 800a058:	0164      	lsls	r4, r4, #5
 800a05a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a05c:	1a24      	subs	r4, r4, r0
 800a05e:	601c      	str	r4, [r3, #0]
 800a060:	e7df      	b.n	800a022 <__d2b+0x6e>
 800a062:	46c0      	nop			; (mov r8, r8)
 800a064:	0800be70 	.word	0x0800be70
 800a068:	0000030a 	.word	0x0000030a
 800a06c:	0800befc 	.word	0x0800befc
 800a070:	fffffbcd 	.word	0xfffffbcd
 800a074:	fffffbce 	.word	0xfffffbce
 800a078:	3fffffff 	.word	0x3fffffff

0800a07c <__ratio>:
 800a07c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a07e:	b087      	sub	sp, #28
 800a080:	000f      	movs	r7, r1
 800a082:	a904      	add	r1, sp, #16
 800a084:	0006      	movs	r6, r0
 800a086:	f7ff ff45 	bl	8009f14 <__b2d>
 800a08a:	9000      	str	r0, [sp, #0]
 800a08c:	9101      	str	r1, [sp, #4]
 800a08e:	9c00      	ldr	r4, [sp, #0]
 800a090:	9d01      	ldr	r5, [sp, #4]
 800a092:	0038      	movs	r0, r7
 800a094:	a905      	add	r1, sp, #20
 800a096:	f7ff ff3d 	bl	8009f14 <__b2d>
 800a09a:	9002      	str	r0, [sp, #8]
 800a09c:	9103      	str	r1, [sp, #12]
 800a09e:	9a02      	ldr	r2, [sp, #8]
 800a0a0:	9b03      	ldr	r3, [sp, #12]
 800a0a2:	6931      	ldr	r1, [r6, #16]
 800a0a4:	6938      	ldr	r0, [r7, #16]
 800a0a6:	9e05      	ldr	r6, [sp, #20]
 800a0a8:	1a08      	subs	r0, r1, r0
 800a0aa:	9904      	ldr	r1, [sp, #16]
 800a0ac:	0140      	lsls	r0, r0, #5
 800a0ae:	1b89      	subs	r1, r1, r6
 800a0b0:	1841      	adds	r1, r0, r1
 800a0b2:	0508      	lsls	r0, r1, #20
 800a0b4:	2900      	cmp	r1, #0
 800a0b6:	dd07      	ble.n	800a0c8 <__ratio+0x4c>
 800a0b8:	9901      	ldr	r1, [sp, #4]
 800a0ba:	1845      	adds	r5, r0, r1
 800a0bc:	0020      	movs	r0, r4
 800a0be:	0029      	movs	r1, r5
 800a0c0:	f7f7 fb8a 	bl	80017d8 <__aeabi_ddiv>
 800a0c4:	b007      	add	sp, #28
 800a0c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0c8:	9903      	ldr	r1, [sp, #12]
 800a0ca:	1a0b      	subs	r3, r1, r0
 800a0cc:	e7f6      	b.n	800a0bc <__ratio+0x40>

0800a0ce <__copybits>:
 800a0ce:	b570      	push	{r4, r5, r6, lr}
 800a0d0:	0014      	movs	r4, r2
 800a0d2:	0005      	movs	r5, r0
 800a0d4:	3901      	subs	r1, #1
 800a0d6:	6913      	ldr	r3, [r2, #16]
 800a0d8:	1149      	asrs	r1, r1, #5
 800a0da:	3101      	adds	r1, #1
 800a0dc:	0089      	lsls	r1, r1, #2
 800a0de:	3414      	adds	r4, #20
 800a0e0:	009b      	lsls	r3, r3, #2
 800a0e2:	1841      	adds	r1, r0, r1
 800a0e4:	18e3      	adds	r3, r4, r3
 800a0e6:	42a3      	cmp	r3, r4
 800a0e8:	d80d      	bhi.n	800a106 <__copybits+0x38>
 800a0ea:	0014      	movs	r4, r2
 800a0ec:	3411      	adds	r4, #17
 800a0ee:	2500      	movs	r5, #0
 800a0f0:	429c      	cmp	r4, r3
 800a0f2:	d803      	bhi.n	800a0fc <__copybits+0x2e>
 800a0f4:	1a9b      	subs	r3, r3, r2
 800a0f6:	3b11      	subs	r3, #17
 800a0f8:	089b      	lsrs	r3, r3, #2
 800a0fa:	009d      	lsls	r5, r3, #2
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	1940      	adds	r0, r0, r5
 800a100:	4281      	cmp	r1, r0
 800a102:	d803      	bhi.n	800a10c <__copybits+0x3e>
 800a104:	bd70      	pop	{r4, r5, r6, pc}
 800a106:	cc40      	ldmia	r4!, {r6}
 800a108:	c540      	stmia	r5!, {r6}
 800a10a:	e7ec      	b.n	800a0e6 <__copybits+0x18>
 800a10c:	c008      	stmia	r0!, {r3}
 800a10e:	e7f7      	b.n	800a100 <__copybits+0x32>

0800a110 <__any_on>:
 800a110:	0002      	movs	r2, r0
 800a112:	6900      	ldr	r0, [r0, #16]
 800a114:	b510      	push	{r4, lr}
 800a116:	3214      	adds	r2, #20
 800a118:	114b      	asrs	r3, r1, #5
 800a11a:	4298      	cmp	r0, r3
 800a11c:	db13      	blt.n	800a146 <__any_on+0x36>
 800a11e:	dd0c      	ble.n	800a13a <__any_on+0x2a>
 800a120:	241f      	movs	r4, #31
 800a122:	0008      	movs	r0, r1
 800a124:	4020      	ands	r0, r4
 800a126:	4221      	tst	r1, r4
 800a128:	d007      	beq.n	800a13a <__any_on+0x2a>
 800a12a:	0099      	lsls	r1, r3, #2
 800a12c:	588c      	ldr	r4, [r1, r2]
 800a12e:	0021      	movs	r1, r4
 800a130:	40c1      	lsrs	r1, r0
 800a132:	4081      	lsls	r1, r0
 800a134:	2001      	movs	r0, #1
 800a136:	428c      	cmp	r4, r1
 800a138:	d104      	bne.n	800a144 <__any_on+0x34>
 800a13a:	009b      	lsls	r3, r3, #2
 800a13c:	18d3      	adds	r3, r2, r3
 800a13e:	4293      	cmp	r3, r2
 800a140:	d803      	bhi.n	800a14a <__any_on+0x3a>
 800a142:	2000      	movs	r0, #0
 800a144:	bd10      	pop	{r4, pc}
 800a146:	0003      	movs	r3, r0
 800a148:	e7f7      	b.n	800a13a <__any_on+0x2a>
 800a14a:	3b04      	subs	r3, #4
 800a14c:	6819      	ldr	r1, [r3, #0]
 800a14e:	2900      	cmp	r1, #0
 800a150:	d0f5      	beq.n	800a13e <__any_on+0x2e>
 800a152:	2001      	movs	r0, #1
 800a154:	e7f6      	b.n	800a144 <__any_on+0x34>

0800a156 <_calloc_r>:
 800a156:	b570      	push	{r4, r5, r6, lr}
 800a158:	0c13      	lsrs	r3, r2, #16
 800a15a:	0c0d      	lsrs	r5, r1, #16
 800a15c:	d11e      	bne.n	800a19c <_calloc_r+0x46>
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d10c      	bne.n	800a17c <_calloc_r+0x26>
 800a162:	b289      	uxth	r1, r1
 800a164:	b294      	uxth	r4, r2
 800a166:	434c      	muls	r4, r1
 800a168:	0021      	movs	r1, r4
 800a16a:	f000 f88d 	bl	800a288 <_malloc_r>
 800a16e:	1e05      	subs	r5, r0, #0
 800a170:	d01b      	beq.n	800a1aa <_calloc_r+0x54>
 800a172:	0022      	movs	r2, r4
 800a174:	2100      	movs	r1, #0
 800a176:	f7fc faad 	bl	80066d4 <memset>
 800a17a:	e016      	b.n	800a1aa <_calloc_r+0x54>
 800a17c:	1c1d      	adds	r5, r3, #0
 800a17e:	1c0b      	adds	r3, r1, #0
 800a180:	b292      	uxth	r2, r2
 800a182:	b289      	uxth	r1, r1
 800a184:	b29c      	uxth	r4, r3
 800a186:	4351      	muls	r1, r2
 800a188:	b2ab      	uxth	r3, r5
 800a18a:	4363      	muls	r3, r4
 800a18c:	0c0c      	lsrs	r4, r1, #16
 800a18e:	191c      	adds	r4, r3, r4
 800a190:	0c22      	lsrs	r2, r4, #16
 800a192:	d107      	bne.n	800a1a4 <_calloc_r+0x4e>
 800a194:	0424      	lsls	r4, r4, #16
 800a196:	b289      	uxth	r1, r1
 800a198:	430c      	orrs	r4, r1
 800a19a:	e7e5      	b.n	800a168 <_calloc_r+0x12>
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d101      	bne.n	800a1a4 <_calloc_r+0x4e>
 800a1a0:	1c13      	adds	r3, r2, #0
 800a1a2:	e7ed      	b.n	800a180 <_calloc_r+0x2a>
 800a1a4:	230c      	movs	r3, #12
 800a1a6:	2500      	movs	r5, #0
 800a1a8:	6003      	str	r3, [r0, #0]
 800a1aa:	0028      	movs	r0, r5
 800a1ac:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a1b0 <_free_r>:
 800a1b0:	b570      	push	{r4, r5, r6, lr}
 800a1b2:	0005      	movs	r5, r0
 800a1b4:	2900      	cmp	r1, #0
 800a1b6:	d010      	beq.n	800a1da <_free_r+0x2a>
 800a1b8:	1f0c      	subs	r4, r1, #4
 800a1ba:	6823      	ldr	r3, [r4, #0]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	da00      	bge.n	800a1c2 <_free_r+0x12>
 800a1c0:	18e4      	adds	r4, r4, r3
 800a1c2:	0028      	movs	r0, r5
 800a1c4:	f001 f8c8 	bl	800b358 <__malloc_lock>
 800a1c8:	4a1d      	ldr	r2, [pc, #116]	; (800a240 <_free_r+0x90>)
 800a1ca:	6813      	ldr	r3, [r2, #0]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d105      	bne.n	800a1dc <_free_r+0x2c>
 800a1d0:	6063      	str	r3, [r4, #4]
 800a1d2:	6014      	str	r4, [r2, #0]
 800a1d4:	0028      	movs	r0, r5
 800a1d6:	f001 f8c7 	bl	800b368 <__malloc_unlock>
 800a1da:	bd70      	pop	{r4, r5, r6, pc}
 800a1dc:	42a3      	cmp	r3, r4
 800a1de:	d908      	bls.n	800a1f2 <_free_r+0x42>
 800a1e0:	6821      	ldr	r1, [r4, #0]
 800a1e2:	1860      	adds	r0, r4, r1
 800a1e4:	4283      	cmp	r3, r0
 800a1e6:	d1f3      	bne.n	800a1d0 <_free_r+0x20>
 800a1e8:	6818      	ldr	r0, [r3, #0]
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	1841      	adds	r1, r0, r1
 800a1ee:	6021      	str	r1, [r4, #0]
 800a1f0:	e7ee      	b.n	800a1d0 <_free_r+0x20>
 800a1f2:	001a      	movs	r2, r3
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d001      	beq.n	800a1fe <_free_r+0x4e>
 800a1fa:	42a3      	cmp	r3, r4
 800a1fc:	d9f9      	bls.n	800a1f2 <_free_r+0x42>
 800a1fe:	6811      	ldr	r1, [r2, #0]
 800a200:	1850      	adds	r0, r2, r1
 800a202:	42a0      	cmp	r0, r4
 800a204:	d10b      	bne.n	800a21e <_free_r+0x6e>
 800a206:	6820      	ldr	r0, [r4, #0]
 800a208:	1809      	adds	r1, r1, r0
 800a20a:	1850      	adds	r0, r2, r1
 800a20c:	6011      	str	r1, [r2, #0]
 800a20e:	4283      	cmp	r3, r0
 800a210:	d1e0      	bne.n	800a1d4 <_free_r+0x24>
 800a212:	6818      	ldr	r0, [r3, #0]
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	1841      	adds	r1, r0, r1
 800a218:	6011      	str	r1, [r2, #0]
 800a21a:	6053      	str	r3, [r2, #4]
 800a21c:	e7da      	b.n	800a1d4 <_free_r+0x24>
 800a21e:	42a0      	cmp	r0, r4
 800a220:	d902      	bls.n	800a228 <_free_r+0x78>
 800a222:	230c      	movs	r3, #12
 800a224:	602b      	str	r3, [r5, #0]
 800a226:	e7d5      	b.n	800a1d4 <_free_r+0x24>
 800a228:	6821      	ldr	r1, [r4, #0]
 800a22a:	1860      	adds	r0, r4, r1
 800a22c:	4283      	cmp	r3, r0
 800a22e:	d103      	bne.n	800a238 <_free_r+0x88>
 800a230:	6818      	ldr	r0, [r3, #0]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	1841      	adds	r1, r0, r1
 800a236:	6021      	str	r1, [r4, #0]
 800a238:	6063      	str	r3, [r4, #4]
 800a23a:	6054      	str	r4, [r2, #4]
 800a23c:	e7ca      	b.n	800a1d4 <_free_r+0x24>
 800a23e:	46c0      	nop			; (mov r8, r8)
 800a240:	200003f4 	.word	0x200003f4

0800a244 <sbrk_aligned>:
 800a244:	b570      	push	{r4, r5, r6, lr}
 800a246:	4e0f      	ldr	r6, [pc, #60]	; (800a284 <sbrk_aligned+0x40>)
 800a248:	000d      	movs	r5, r1
 800a24a:	6831      	ldr	r1, [r6, #0]
 800a24c:	0004      	movs	r4, r0
 800a24e:	2900      	cmp	r1, #0
 800a250:	d102      	bne.n	800a258 <sbrk_aligned+0x14>
 800a252:	f000 fd47 	bl	800ace4 <_sbrk_r>
 800a256:	6030      	str	r0, [r6, #0]
 800a258:	0029      	movs	r1, r5
 800a25a:	0020      	movs	r0, r4
 800a25c:	f000 fd42 	bl	800ace4 <_sbrk_r>
 800a260:	1c43      	adds	r3, r0, #1
 800a262:	d00a      	beq.n	800a27a <sbrk_aligned+0x36>
 800a264:	2303      	movs	r3, #3
 800a266:	1cc5      	adds	r5, r0, #3
 800a268:	439d      	bics	r5, r3
 800a26a:	42a8      	cmp	r0, r5
 800a26c:	d007      	beq.n	800a27e <sbrk_aligned+0x3a>
 800a26e:	1a29      	subs	r1, r5, r0
 800a270:	0020      	movs	r0, r4
 800a272:	f000 fd37 	bl	800ace4 <_sbrk_r>
 800a276:	1c43      	adds	r3, r0, #1
 800a278:	d101      	bne.n	800a27e <sbrk_aligned+0x3a>
 800a27a:	2501      	movs	r5, #1
 800a27c:	426d      	negs	r5, r5
 800a27e:	0028      	movs	r0, r5
 800a280:	bd70      	pop	{r4, r5, r6, pc}
 800a282:	46c0      	nop			; (mov r8, r8)
 800a284:	200003f8 	.word	0x200003f8

0800a288 <_malloc_r>:
 800a288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a28a:	2203      	movs	r2, #3
 800a28c:	1ccb      	adds	r3, r1, #3
 800a28e:	4393      	bics	r3, r2
 800a290:	3308      	adds	r3, #8
 800a292:	0006      	movs	r6, r0
 800a294:	001f      	movs	r7, r3
 800a296:	2b0c      	cmp	r3, #12
 800a298:	d232      	bcs.n	800a300 <_malloc_r+0x78>
 800a29a:	270c      	movs	r7, #12
 800a29c:	42b9      	cmp	r1, r7
 800a29e:	d831      	bhi.n	800a304 <_malloc_r+0x7c>
 800a2a0:	0030      	movs	r0, r6
 800a2a2:	f001 f859 	bl	800b358 <__malloc_lock>
 800a2a6:	4d32      	ldr	r5, [pc, #200]	; (800a370 <_malloc_r+0xe8>)
 800a2a8:	682b      	ldr	r3, [r5, #0]
 800a2aa:	001c      	movs	r4, r3
 800a2ac:	2c00      	cmp	r4, #0
 800a2ae:	d12e      	bne.n	800a30e <_malloc_r+0x86>
 800a2b0:	0039      	movs	r1, r7
 800a2b2:	0030      	movs	r0, r6
 800a2b4:	f7ff ffc6 	bl	800a244 <sbrk_aligned>
 800a2b8:	0004      	movs	r4, r0
 800a2ba:	1c43      	adds	r3, r0, #1
 800a2bc:	d11e      	bne.n	800a2fc <_malloc_r+0x74>
 800a2be:	682c      	ldr	r4, [r5, #0]
 800a2c0:	0025      	movs	r5, r4
 800a2c2:	2d00      	cmp	r5, #0
 800a2c4:	d14a      	bne.n	800a35c <_malloc_r+0xd4>
 800a2c6:	6823      	ldr	r3, [r4, #0]
 800a2c8:	0029      	movs	r1, r5
 800a2ca:	18e3      	adds	r3, r4, r3
 800a2cc:	0030      	movs	r0, r6
 800a2ce:	9301      	str	r3, [sp, #4]
 800a2d0:	f000 fd08 	bl	800ace4 <_sbrk_r>
 800a2d4:	9b01      	ldr	r3, [sp, #4]
 800a2d6:	4283      	cmp	r3, r0
 800a2d8:	d143      	bne.n	800a362 <_malloc_r+0xda>
 800a2da:	6823      	ldr	r3, [r4, #0]
 800a2dc:	3703      	adds	r7, #3
 800a2de:	1aff      	subs	r7, r7, r3
 800a2e0:	2303      	movs	r3, #3
 800a2e2:	439f      	bics	r7, r3
 800a2e4:	3708      	adds	r7, #8
 800a2e6:	2f0c      	cmp	r7, #12
 800a2e8:	d200      	bcs.n	800a2ec <_malloc_r+0x64>
 800a2ea:	270c      	movs	r7, #12
 800a2ec:	0039      	movs	r1, r7
 800a2ee:	0030      	movs	r0, r6
 800a2f0:	f7ff ffa8 	bl	800a244 <sbrk_aligned>
 800a2f4:	1c43      	adds	r3, r0, #1
 800a2f6:	d034      	beq.n	800a362 <_malloc_r+0xda>
 800a2f8:	6823      	ldr	r3, [r4, #0]
 800a2fa:	19df      	adds	r7, r3, r7
 800a2fc:	6027      	str	r7, [r4, #0]
 800a2fe:	e013      	b.n	800a328 <_malloc_r+0xa0>
 800a300:	2b00      	cmp	r3, #0
 800a302:	dacb      	bge.n	800a29c <_malloc_r+0x14>
 800a304:	230c      	movs	r3, #12
 800a306:	2500      	movs	r5, #0
 800a308:	6033      	str	r3, [r6, #0]
 800a30a:	0028      	movs	r0, r5
 800a30c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a30e:	6822      	ldr	r2, [r4, #0]
 800a310:	1bd1      	subs	r1, r2, r7
 800a312:	d420      	bmi.n	800a356 <_malloc_r+0xce>
 800a314:	290b      	cmp	r1, #11
 800a316:	d917      	bls.n	800a348 <_malloc_r+0xc0>
 800a318:	19e2      	adds	r2, r4, r7
 800a31a:	6027      	str	r7, [r4, #0]
 800a31c:	42a3      	cmp	r3, r4
 800a31e:	d111      	bne.n	800a344 <_malloc_r+0xbc>
 800a320:	602a      	str	r2, [r5, #0]
 800a322:	6863      	ldr	r3, [r4, #4]
 800a324:	6011      	str	r1, [r2, #0]
 800a326:	6053      	str	r3, [r2, #4]
 800a328:	0030      	movs	r0, r6
 800a32a:	0025      	movs	r5, r4
 800a32c:	f001 f81c 	bl	800b368 <__malloc_unlock>
 800a330:	2207      	movs	r2, #7
 800a332:	350b      	adds	r5, #11
 800a334:	1d23      	adds	r3, r4, #4
 800a336:	4395      	bics	r5, r2
 800a338:	1aea      	subs	r2, r5, r3
 800a33a:	429d      	cmp	r5, r3
 800a33c:	d0e5      	beq.n	800a30a <_malloc_r+0x82>
 800a33e:	1b5b      	subs	r3, r3, r5
 800a340:	50a3      	str	r3, [r4, r2]
 800a342:	e7e2      	b.n	800a30a <_malloc_r+0x82>
 800a344:	605a      	str	r2, [r3, #4]
 800a346:	e7ec      	b.n	800a322 <_malloc_r+0x9a>
 800a348:	6862      	ldr	r2, [r4, #4]
 800a34a:	42a3      	cmp	r3, r4
 800a34c:	d101      	bne.n	800a352 <_malloc_r+0xca>
 800a34e:	602a      	str	r2, [r5, #0]
 800a350:	e7ea      	b.n	800a328 <_malloc_r+0xa0>
 800a352:	605a      	str	r2, [r3, #4]
 800a354:	e7e8      	b.n	800a328 <_malloc_r+0xa0>
 800a356:	0023      	movs	r3, r4
 800a358:	6864      	ldr	r4, [r4, #4]
 800a35a:	e7a7      	b.n	800a2ac <_malloc_r+0x24>
 800a35c:	002c      	movs	r4, r5
 800a35e:	686d      	ldr	r5, [r5, #4]
 800a360:	e7af      	b.n	800a2c2 <_malloc_r+0x3a>
 800a362:	230c      	movs	r3, #12
 800a364:	0030      	movs	r0, r6
 800a366:	6033      	str	r3, [r6, #0]
 800a368:	f000 fffe 	bl	800b368 <__malloc_unlock>
 800a36c:	e7cd      	b.n	800a30a <_malloc_r+0x82>
 800a36e:	46c0      	nop			; (mov r8, r8)
 800a370:	200003f4 	.word	0x200003f4

0800a374 <__ssputs_r>:
 800a374:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a376:	688e      	ldr	r6, [r1, #8]
 800a378:	b085      	sub	sp, #20
 800a37a:	0007      	movs	r7, r0
 800a37c:	000c      	movs	r4, r1
 800a37e:	9203      	str	r2, [sp, #12]
 800a380:	9301      	str	r3, [sp, #4]
 800a382:	429e      	cmp	r6, r3
 800a384:	d83c      	bhi.n	800a400 <__ssputs_r+0x8c>
 800a386:	2390      	movs	r3, #144	; 0x90
 800a388:	898a      	ldrh	r2, [r1, #12]
 800a38a:	00db      	lsls	r3, r3, #3
 800a38c:	421a      	tst	r2, r3
 800a38e:	d034      	beq.n	800a3fa <__ssputs_r+0x86>
 800a390:	6909      	ldr	r1, [r1, #16]
 800a392:	6823      	ldr	r3, [r4, #0]
 800a394:	6960      	ldr	r0, [r4, #20]
 800a396:	1a5b      	subs	r3, r3, r1
 800a398:	9302      	str	r3, [sp, #8]
 800a39a:	2303      	movs	r3, #3
 800a39c:	4343      	muls	r3, r0
 800a39e:	0fdd      	lsrs	r5, r3, #31
 800a3a0:	18ed      	adds	r5, r5, r3
 800a3a2:	9b01      	ldr	r3, [sp, #4]
 800a3a4:	9802      	ldr	r0, [sp, #8]
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	181b      	adds	r3, r3, r0
 800a3aa:	106d      	asrs	r5, r5, #1
 800a3ac:	42ab      	cmp	r3, r5
 800a3ae:	d900      	bls.n	800a3b2 <__ssputs_r+0x3e>
 800a3b0:	001d      	movs	r5, r3
 800a3b2:	0553      	lsls	r3, r2, #21
 800a3b4:	d532      	bpl.n	800a41c <__ssputs_r+0xa8>
 800a3b6:	0029      	movs	r1, r5
 800a3b8:	0038      	movs	r0, r7
 800a3ba:	f7ff ff65 	bl	800a288 <_malloc_r>
 800a3be:	1e06      	subs	r6, r0, #0
 800a3c0:	d109      	bne.n	800a3d6 <__ssputs_r+0x62>
 800a3c2:	230c      	movs	r3, #12
 800a3c4:	603b      	str	r3, [r7, #0]
 800a3c6:	2340      	movs	r3, #64	; 0x40
 800a3c8:	2001      	movs	r0, #1
 800a3ca:	89a2      	ldrh	r2, [r4, #12]
 800a3cc:	4240      	negs	r0, r0
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	81a3      	strh	r3, [r4, #12]
 800a3d2:	b005      	add	sp, #20
 800a3d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3d6:	9a02      	ldr	r2, [sp, #8]
 800a3d8:	6921      	ldr	r1, [r4, #16]
 800a3da:	f7ff f9ea 	bl	80097b2 <memcpy>
 800a3de:	89a3      	ldrh	r3, [r4, #12]
 800a3e0:	4a14      	ldr	r2, [pc, #80]	; (800a434 <__ssputs_r+0xc0>)
 800a3e2:	401a      	ands	r2, r3
 800a3e4:	2380      	movs	r3, #128	; 0x80
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	81a3      	strh	r3, [r4, #12]
 800a3ea:	9b02      	ldr	r3, [sp, #8]
 800a3ec:	6126      	str	r6, [r4, #16]
 800a3ee:	18f6      	adds	r6, r6, r3
 800a3f0:	6026      	str	r6, [r4, #0]
 800a3f2:	6165      	str	r5, [r4, #20]
 800a3f4:	9e01      	ldr	r6, [sp, #4]
 800a3f6:	1aed      	subs	r5, r5, r3
 800a3f8:	60a5      	str	r5, [r4, #8]
 800a3fa:	9b01      	ldr	r3, [sp, #4]
 800a3fc:	429e      	cmp	r6, r3
 800a3fe:	d900      	bls.n	800a402 <__ssputs_r+0x8e>
 800a400:	9e01      	ldr	r6, [sp, #4]
 800a402:	0032      	movs	r2, r6
 800a404:	9903      	ldr	r1, [sp, #12]
 800a406:	6820      	ldr	r0, [r4, #0]
 800a408:	f000 ff93 	bl	800b332 <memmove>
 800a40c:	68a3      	ldr	r3, [r4, #8]
 800a40e:	2000      	movs	r0, #0
 800a410:	1b9b      	subs	r3, r3, r6
 800a412:	60a3      	str	r3, [r4, #8]
 800a414:	6823      	ldr	r3, [r4, #0]
 800a416:	199e      	adds	r6, r3, r6
 800a418:	6026      	str	r6, [r4, #0]
 800a41a:	e7da      	b.n	800a3d2 <__ssputs_r+0x5e>
 800a41c:	002a      	movs	r2, r5
 800a41e:	0038      	movs	r0, r7
 800a420:	f000 ffaa 	bl	800b378 <_realloc_r>
 800a424:	1e06      	subs	r6, r0, #0
 800a426:	d1e0      	bne.n	800a3ea <__ssputs_r+0x76>
 800a428:	0038      	movs	r0, r7
 800a42a:	6921      	ldr	r1, [r4, #16]
 800a42c:	f7ff fec0 	bl	800a1b0 <_free_r>
 800a430:	e7c7      	b.n	800a3c2 <__ssputs_r+0x4e>
 800a432:	46c0      	nop			; (mov r8, r8)
 800a434:	fffffb7f 	.word	0xfffffb7f

0800a438 <_svfiprintf_r>:
 800a438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a43a:	b0a1      	sub	sp, #132	; 0x84
 800a43c:	9003      	str	r0, [sp, #12]
 800a43e:	001d      	movs	r5, r3
 800a440:	898b      	ldrh	r3, [r1, #12]
 800a442:	000f      	movs	r7, r1
 800a444:	0016      	movs	r6, r2
 800a446:	061b      	lsls	r3, r3, #24
 800a448:	d511      	bpl.n	800a46e <_svfiprintf_r+0x36>
 800a44a:	690b      	ldr	r3, [r1, #16]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d10e      	bne.n	800a46e <_svfiprintf_r+0x36>
 800a450:	2140      	movs	r1, #64	; 0x40
 800a452:	f7ff ff19 	bl	800a288 <_malloc_r>
 800a456:	6038      	str	r0, [r7, #0]
 800a458:	6138      	str	r0, [r7, #16]
 800a45a:	2800      	cmp	r0, #0
 800a45c:	d105      	bne.n	800a46a <_svfiprintf_r+0x32>
 800a45e:	230c      	movs	r3, #12
 800a460:	9a03      	ldr	r2, [sp, #12]
 800a462:	3801      	subs	r0, #1
 800a464:	6013      	str	r3, [r2, #0]
 800a466:	b021      	add	sp, #132	; 0x84
 800a468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a46a:	2340      	movs	r3, #64	; 0x40
 800a46c:	617b      	str	r3, [r7, #20]
 800a46e:	2300      	movs	r3, #0
 800a470:	ac08      	add	r4, sp, #32
 800a472:	6163      	str	r3, [r4, #20]
 800a474:	3320      	adds	r3, #32
 800a476:	7663      	strb	r3, [r4, #25]
 800a478:	3310      	adds	r3, #16
 800a47a:	76a3      	strb	r3, [r4, #26]
 800a47c:	9507      	str	r5, [sp, #28]
 800a47e:	0035      	movs	r5, r6
 800a480:	782b      	ldrb	r3, [r5, #0]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d001      	beq.n	800a48a <_svfiprintf_r+0x52>
 800a486:	2b25      	cmp	r3, #37	; 0x25
 800a488:	d147      	bne.n	800a51a <_svfiprintf_r+0xe2>
 800a48a:	1bab      	subs	r3, r5, r6
 800a48c:	9305      	str	r3, [sp, #20]
 800a48e:	42b5      	cmp	r5, r6
 800a490:	d00c      	beq.n	800a4ac <_svfiprintf_r+0x74>
 800a492:	0032      	movs	r2, r6
 800a494:	0039      	movs	r1, r7
 800a496:	9803      	ldr	r0, [sp, #12]
 800a498:	f7ff ff6c 	bl	800a374 <__ssputs_r>
 800a49c:	1c43      	adds	r3, r0, #1
 800a49e:	d100      	bne.n	800a4a2 <_svfiprintf_r+0x6a>
 800a4a0:	e0ae      	b.n	800a600 <_svfiprintf_r+0x1c8>
 800a4a2:	6962      	ldr	r2, [r4, #20]
 800a4a4:	9b05      	ldr	r3, [sp, #20]
 800a4a6:	4694      	mov	ip, r2
 800a4a8:	4463      	add	r3, ip
 800a4aa:	6163      	str	r3, [r4, #20]
 800a4ac:	782b      	ldrb	r3, [r5, #0]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d100      	bne.n	800a4b4 <_svfiprintf_r+0x7c>
 800a4b2:	e0a5      	b.n	800a600 <_svfiprintf_r+0x1c8>
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	4252      	negs	r2, r2
 800a4ba:	6062      	str	r2, [r4, #4]
 800a4bc:	a904      	add	r1, sp, #16
 800a4be:	3254      	adds	r2, #84	; 0x54
 800a4c0:	1852      	adds	r2, r2, r1
 800a4c2:	1c6e      	adds	r6, r5, #1
 800a4c4:	6023      	str	r3, [r4, #0]
 800a4c6:	60e3      	str	r3, [r4, #12]
 800a4c8:	60a3      	str	r3, [r4, #8]
 800a4ca:	7013      	strb	r3, [r2, #0]
 800a4cc:	65a3      	str	r3, [r4, #88]	; 0x58
 800a4ce:	2205      	movs	r2, #5
 800a4d0:	7831      	ldrb	r1, [r6, #0]
 800a4d2:	4854      	ldr	r0, [pc, #336]	; (800a624 <_svfiprintf_r+0x1ec>)
 800a4d4:	f7ff f962 	bl	800979c <memchr>
 800a4d8:	1c75      	adds	r5, r6, #1
 800a4da:	2800      	cmp	r0, #0
 800a4dc:	d11f      	bne.n	800a51e <_svfiprintf_r+0xe6>
 800a4de:	6822      	ldr	r2, [r4, #0]
 800a4e0:	06d3      	lsls	r3, r2, #27
 800a4e2:	d504      	bpl.n	800a4ee <_svfiprintf_r+0xb6>
 800a4e4:	2353      	movs	r3, #83	; 0x53
 800a4e6:	a904      	add	r1, sp, #16
 800a4e8:	185b      	adds	r3, r3, r1
 800a4ea:	2120      	movs	r1, #32
 800a4ec:	7019      	strb	r1, [r3, #0]
 800a4ee:	0713      	lsls	r3, r2, #28
 800a4f0:	d504      	bpl.n	800a4fc <_svfiprintf_r+0xc4>
 800a4f2:	2353      	movs	r3, #83	; 0x53
 800a4f4:	a904      	add	r1, sp, #16
 800a4f6:	185b      	adds	r3, r3, r1
 800a4f8:	212b      	movs	r1, #43	; 0x2b
 800a4fa:	7019      	strb	r1, [r3, #0]
 800a4fc:	7833      	ldrb	r3, [r6, #0]
 800a4fe:	2b2a      	cmp	r3, #42	; 0x2a
 800a500:	d016      	beq.n	800a530 <_svfiprintf_r+0xf8>
 800a502:	0035      	movs	r5, r6
 800a504:	2100      	movs	r1, #0
 800a506:	200a      	movs	r0, #10
 800a508:	68e3      	ldr	r3, [r4, #12]
 800a50a:	782a      	ldrb	r2, [r5, #0]
 800a50c:	1c6e      	adds	r6, r5, #1
 800a50e:	3a30      	subs	r2, #48	; 0x30
 800a510:	2a09      	cmp	r2, #9
 800a512:	d94e      	bls.n	800a5b2 <_svfiprintf_r+0x17a>
 800a514:	2900      	cmp	r1, #0
 800a516:	d111      	bne.n	800a53c <_svfiprintf_r+0x104>
 800a518:	e017      	b.n	800a54a <_svfiprintf_r+0x112>
 800a51a:	3501      	adds	r5, #1
 800a51c:	e7b0      	b.n	800a480 <_svfiprintf_r+0x48>
 800a51e:	4b41      	ldr	r3, [pc, #260]	; (800a624 <_svfiprintf_r+0x1ec>)
 800a520:	6822      	ldr	r2, [r4, #0]
 800a522:	1ac0      	subs	r0, r0, r3
 800a524:	2301      	movs	r3, #1
 800a526:	4083      	lsls	r3, r0
 800a528:	4313      	orrs	r3, r2
 800a52a:	002e      	movs	r6, r5
 800a52c:	6023      	str	r3, [r4, #0]
 800a52e:	e7ce      	b.n	800a4ce <_svfiprintf_r+0x96>
 800a530:	9b07      	ldr	r3, [sp, #28]
 800a532:	1d19      	adds	r1, r3, #4
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	9107      	str	r1, [sp, #28]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	db01      	blt.n	800a540 <_svfiprintf_r+0x108>
 800a53c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a53e:	e004      	b.n	800a54a <_svfiprintf_r+0x112>
 800a540:	425b      	negs	r3, r3
 800a542:	60e3      	str	r3, [r4, #12]
 800a544:	2302      	movs	r3, #2
 800a546:	4313      	orrs	r3, r2
 800a548:	6023      	str	r3, [r4, #0]
 800a54a:	782b      	ldrb	r3, [r5, #0]
 800a54c:	2b2e      	cmp	r3, #46	; 0x2e
 800a54e:	d10a      	bne.n	800a566 <_svfiprintf_r+0x12e>
 800a550:	786b      	ldrb	r3, [r5, #1]
 800a552:	2b2a      	cmp	r3, #42	; 0x2a
 800a554:	d135      	bne.n	800a5c2 <_svfiprintf_r+0x18a>
 800a556:	9b07      	ldr	r3, [sp, #28]
 800a558:	3502      	adds	r5, #2
 800a55a:	1d1a      	adds	r2, r3, #4
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	9207      	str	r2, [sp, #28]
 800a560:	2b00      	cmp	r3, #0
 800a562:	db2b      	blt.n	800a5bc <_svfiprintf_r+0x184>
 800a564:	9309      	str	r3, [sp, #36]	; 0x24
 800a566:	4e30      	ldr	r6, [pc, #192]	; (800a628 <_svfiprintf_r+0x1f0>)
 800a568:	2203      	movs	r2, #3
 800a56a:	0030      	movs	r0, r6
 800a56c:	7829      	ldrb	r1, [r5, #0]
 800a56e:	f7ff f915 	bl	800979c <memchr>
 800a572:	2800      	cmp	r0, #0
 800a574:	d006      	beq.n	800a584 <_svfiprintf_r+0x14c>
 800a576:	2340      	movs	r3, #64	; 0x40
 800a578:	1b80      	subs	r0, r0, r6
 800a57a:	4083      	lsls	r3, r0
 800a57c:	6822      	ldr	r2, [r4, #0]
 800a57e:	3501      	adds	r5, #1
 800a580:	4313      	orrs	r3, r2
 800a582:	6023      	str	r3, [r4, #0]
 800a584:	7829      	ldrb	r1, [r5, #0]
 800a586:	2206      	movs	r2, #6
 800a588:	4828      	ldr	r0, [pc, #160]	; (800a62c <_svfiprintf_r+0x1f4>)
 800a58a:	1c6e      	adds	r6, r5, #1
 800a58c:	7621      	strb	r1, [r4, #24]
 800a58e:	f7ff f905 	bl	800979c <memchr>
 800a592:	2800      	cmp	r0, #0
 800a594:	d03c      	beq.n	800a610 <_svfiprintf_r+0x1d8>
 800a596:	4b26      	ldr	r3, [pc, #152]	; (800a630 <_svfiprintf_r+0x1f8>)
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d125      	bne.n	800a5e8 <_svfiprintf_r+0x1b0>
 800a59c:	2207      	movs	r2, #7
 800a59e:	9b07      	ldr	r3, [sp, #28]
 800a5a0:	3307      	adds	r3, #7
 800a5a2:	4393      	bics	r3, r2
 800a5a4:	3308      	adds	r3, #8
 800a5a6:	9307      	str	r3, [sp, #28]
 800a5a8:	6963      	ldr	r3, [r4, #20]
 800a5aa:	9a04      	ldr	r2, [sp, #16]
 800a5ac:	189b      	adds	r3, r3, r2
 800a5ae:	6163      	str	r3, [r4, #20]
 800a5b0:	e765      	b.n	800a47e <_svfiprintf_r+0x46>
 800a5b2:	4343      	muls	r3, r0
 800a5b4:	0035      	movs	r5, r6
 800a5b6:	2101      	movs	r1, #1
 800a5b8:	189b      	adds	r3, r3, r2
 800a5ba:	e7a6      	b.n	800a50a <_svfiprintf_r+0xd2>
 800a5bc:	2301      	movs	r3, #1
 800a5be:	425b      	negs	r3, r3
 800a5c0:	e7d0      	b.n	800a564 <_svfiprintf_r+0x12c>
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	200a      	movs	r0, #10
 800a5c6:	001a      	movs	r2, r3
 800a5c8:	3501      	adds	r5, #1
 800a5ca:	6063      	str	r3, [r4, #4]
 800a5cc:	7829      	ldrb	r1, [r5, #0]
 800a5ce:	1c6e      	adds	r6, r5, #1
 800a5d0:	3930      	subs	r1, #48	; 0x30
 800a5d2:	2909      	cmp	r1, #9
 800a5d4:	d903      	bls.n	800a5de <_svfiprintf_r+0x1a6>
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d0c5      	beq.n	800a566 <_svfiprintf_r+0x12e>
 800a5da:	9209      	str	r2, [sp, #36]	; 0x24
 800a5dc:	e7c3      	b.n	800a566 <_svfiprintf_r+0x12e>
 800a5de:	4342      	muls	r2, r0
 800a5e0:	0035      	movs	r5, r6
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	1852      	adds	r2, r2, r1
 800a5e6:	e7f1      	b.n	800a5cc <_svfiprintf_r+0x194>
 800a5e8:	ab07      	add	r3, sp, #28
 800a5ea:	9300      	str	r3, [sp, #0]
 800a5ec:	003a      	movs	r2, r7
 800a5ee:	0021      	movs	r1, r4
 800a5f0:	4b10      	ldr	r3, [pc, #64]	; (800a634 <_svfiprintf_r+0x1fc>)
 800a5f2:	9803      	ldr	r0, [sp, #12]
 800a5f4:	f7fc f920 	bl	8006838 <_printf_float>
 800a5f8:	9004      	str	r0, [sp, #16]
 800a5fa:	9b04      	ldr	r3, [sp, #16]
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	d1d3      	bne.n	800a5a8 <_svfiprintf_r+0x170>
 800a600:	89bb      	ldrh	r3, [r7, #12]
 800a602:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a604:	065b      	lsls	r3, r3, #25
 800a606:	d400      	bmi.n	800a60a <_svfiprintf_r+0x1d2>
 800a608:	e72d      	b.n	800a466 <_svfiprintf_r+0x2e>
 800a60a:	2001      	movs	r0, #1
 800a60c:	4240      	negs	r0, r0
 800a60e:	e72a      	b.n	800a466 <_svfiprintf_r+0x2e>
 800a610:	ab07      	add	r3, sp, #28
 800a612:	9300      	str	r3, [sp, #0]
 800a614:	003a      	movs	r2, r7
 800a616:	0021      	movs	r1, r4
 800a618:	4b06      	ldr	r3, [pc, #24]	; (800a634 <_svfiprintf_r+0x1fc>)
 800a61a:	9803      	ldr	r0, [sp, #12]
 800a61c:	f7fc fbbe 	bl	8006d9c <_printf_i>
 800a620:	e7ea      	b.n	800a5f8 <_svfiprintf_r+0x1c0>
 800a622:	46c0      	nop			; (mov r8, r8)
 800a624:	0800c054 	.word	0x0800c054
 800a628:	0800c05a 	.word	0x0800c05a
 800a62c:	0800c05e 	.word	0x0800c05e
 800a630:	08006839 	.word	0x08006839
 800a634:	0800a375 	.word	0x0800a375

0800a638 <_sungetc_r>:
 800a638:	b570      	push	{r4, r5, r6, lr}
 800a63a:	0014      	movs	r4, r2
 800a63c:	1c4b      	adds	r3, r1, #1
 800a63e:	d103      	bne.n	800a648 <_sungetc_r+0x10>
 800a640:	2501      	movs	r5, #1
 800a642:	426d      	negs	r5, r5
 800a644:	0028      	movs	r0, r5
 800a646:	bd70      	pop	{r4, r5, r6, pc}
 800a648:	8993      	ldrh	r3, [r2, #12]
 800a64a:	2220      	movs	r2, #32
 800a64c:	4393      	bics	r3, r2
 800a64e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a650:	81a3      	strh	r3, [r4, #12]
 800a652:	b2ce      	uxtb	r6, r1
 800a654:	6863      	ldr	r3, [r4, #4]
 800a656:	b2cd      	uxtb	r5, r1
 800a658:	2a00      	cmp	r2, #0
 800a65a:	d010      	beq.n	800a67e <_sungetc_r+0x46>
 800a65c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a65e:	429a      	cmp	r2, r3
 800a660:	dd07      	ble.n	800a672 <_sungetc_r+0x3a>
 800a662:	6823      	ldr	r3, [r4, #0]
 800a664:	3b01      	subs	r3, #1
 800a666:	6023      	str	r3, [r4, #0]
 800a668:	701e      	strb	r6, [r3, #0]
 800a66a:	6863      	ldr	r3, [r4, #4]
 800a66c:	3301      	adds	r3, #1
 800a66e:	6063      	str	r3, [r4, #4]
 800a670:	e7e8      	b.n	800a644 <_sungetc_r+0xc>
 800a672:	0021      	movs	r1, r4
 800a674:	f000 fc12 	bl	800ae9c <__submore>
 800a678:	2800      	cmp	r0, #0
 800a67a:	d0f2      	beq.n	800a662 <_sungetc_r+0x2a>
 800a67c:	e7e0      	b.n	800a640 <_sungetc_r+0x8>
 800a67e:	6921      	ldr	r1, [r4, #16]
 800a680:	6822      	ldr	r2, [r4, #0]
 800a682:	2900      	cmp	r1, #0
 800a684:	d007      	beq.n	800a696 <_sungetc_r+0x5e>
 800a686:	4291      	cmp	r1, r2
 800a688:	d205      	bcs.n	800a696 <_sungetc_r+0x5e>
 800a68a:	1e51      	subs	r1, r2, #1
 800a68c:	7808      	ldrb	r0, [r1, #0]
 800a68e:	42a8      	cmp	r0, r5
 800a690:	d101      	bne.n	800a696 <_sungetc_r+0x5e>
 800a692:	6021      	str	r1, [r4, #0]
 800a694:	e7ea      	b.n	800a66c <_sungetc_r+0x34>
 800a696:	6423      	str	r3, [r4, #64]	; 0x40
 800a698:	0023      	movs	r3, r4
 800a69a:	3344      	adds	r3, #68	; 0x44
 800a69c:	6363      	str	r3, [r4, #52]	; 0x34
 800a69e:	2303      	movs	r3, #3
 800a6a0:	63a3      	str	r3, [r4, #56]	; 0x38
 800a6a2:	0023      	movs	r3, r4
 800a6a4:	3346      	adds	r3, #70	; 0x46
 800a6a6:	63e2      	str	r2, [r4, #60]	; 0x3c
 800a6a8:	701e      	strb	r6, [r3, #0]
 800a6aa:	6023      	str	r3, [r4, #0]
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	e7de      	b.n	800a66e <_sungetc_r+0x36>

0800a6b0 <__ssrefill_r>:
 800a6b0:	b510      	push	{r4, lr}
 800a6b2:	000c      	movs	r4, r1
 800a6b4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a6b6:	2900      	cmp	r1, #0
 800a6b8:	d00e      	beq.n	800a6d8 <__ssrefill_r+0x28>
 800a6ba:	0023      	movs	r3, r4
 800a6bc:	3344      	adds	r3, #68	; 0x44
 800a6be:	4299      	cmp	r1, r3
 800a6c0:	d001      	beq.n	800a6c6 <__ssrefill_r+0x16>
 800a6c2:	f7ff fd75 	bl	800a1b0 <_free_r>
 800a6c6:	2000      	movs	r0, #0
 800a6c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a6ca:	6360      	str	r0, [r4, #52]	; 0x34
 800a6cc:	6063      	str	r3, [r4, #4]
 800a6ce:	4283      	cmp	r3, r0
 800a6d0:	d002      	beq.n	800a6d8 <__ssrefill_r+0x28>
 800a6d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a6d4:	6023      	str	r3, [r4, #0]
 800a6d6:	bd10      	pop	{r4, pc}
 800a6d8:	6923      	ldr	r3, [r4, #16]
 800a6da:	2001      	movs	r0, #1
 800a6dc:	6023      	str	r3, [r4, #0]
 800a6de:	2300      	movs	r3, #0
 800a6e0:	89a2      	ldrh	r2, [r4, #12]
 800a6e2:	6063      	str	r3, [r4, #4]
 800a6e4:	3320      	adds	r3, #32
 800a6e6:	4313      	orrs	r3, r2
 800a6e8:	81a3      	strh	r3, [r4, #12]
 800a6ea:	4240      	negs	r0, r0
 800a6ec:	e7f3      	b.n	800a6d6 <__ssrefill_r+0x26>
	...

0800a6f0 <__ssvfiscanf_r>:
 800a6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6f2:	4cb8      	ldr	r4, [pc, #736]	; (800a9d4 <__ssvfiscanf_r+0x2e4>)
 800a6f4:	0006      	movs	r6, r0
 800a6f6:	44a5      	add	sp, r4
 800a6f8:	000c      	movs	r4, r1
 800a6fa:	2100      	movs	r1, #0
 800a6fc:	9146      	str	r1, [sp, #280]	; 0x118
 800a6fe:	9147      	str	r1, [sp, #284]	; 0x11c
 800a700:	a903      	add	r1, sp, #12
 800a702:	9148      	str	r1, [sp, #288]	; 0x120
 800a704:	21be      	movs	r1, #190	; 0xbe
 800a706:	48b4      	ldr	r0, [pc, #720]	; (800a9d8 <__ssvfiscanf_r+0x2e8>)
 800a708:	0049      	lsls	r1, r1, #1
 800a70a:	ad43      	add	r5, sp, #268	; 0x10c
 800a70c:	5068      	str	r0, [r5, r1]
 800a70e:	25c0      	movs	r5, #192	; 0xc0
 800a710:	49b2      	ldr	r1, [pc, #712]	; (800a9dc <__ssvfiscanf_r+0x2ec>)
 800a712:	006d      	lsls	r5, r5, #1
 800a714:	a843      	add	r0, sp, #268	; 0x10c
 800a716:	5141      	str	r1, [r0, r5]
 800a718:	9302      	str	r3, [sp, #8]
 800a71a:	7813      	ldrb	r3, [r2, #0]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d100      	bne.n	800a722 <__ssvfiscanf_r+0x32>
 800a720:	e155      	b.n	800a9ce <__ssvfiscanf_r+0x2de>
 800a722:	49af      	ldr	r1, [pc, #700]	; (800a9e0 <__ssvfiscanf_r+0x2f0>)
 800a724:	2508      	movs	r5, #8
 800a726:	5cc8      	ldrb	r0, [r1, r3]
 800a728:	2108      	movs	r1, #8
 800a72a:	1c57      	adds	r7, r2, #1
 800a72c:	4001      	ands	r1, r0
 800a72e:	4228      	tst	r0, r5
 800a730:	d020      	beq.n	800a774 <__ssvfiscanf_r+0x84>
 800a732:	6863      	ldr	r3, [r4, #4]
 800a734:	2b00      	cmp	r3, #0
 800a736:	dd12      	ble.n	800a75e <__ssvfiscanf_r+0x6e>
 800a738:	6823      	ldr	r3, [r4, #0]
 800a73a:	49a9      	ldr	r1, [pc, #676]	; (800a9e0 <__ssvfiscanf_r+0x2f0>)
 800a73c:	781a      	ldrb	r2, [r3, #0]
 800a73e:	5c8a      	ldrb	r2, [r1, r2]
 800a740:	2108      	movs	r1, #8
 800a742:	420a      	tst	r2, r1
 800a744:	d101      	bne.n	800a74a <__ssvfiscanf_r+0x5a>
 800a746:	003a      	movs	r2, r7
 800a748:	e7e7      	b.n	800a71a <__ssvfiscanf_r+0x2a>
 800a74a:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800a74c:	3301      	adds	r3, #1
 800a74e:	9200      	str	r2, [sp, #0]
 800a750:	3201      	adds	r2, #1
 800a752:	9247      	str	r2, [sp, #284]	; 0x11c
 800a754:	6862      	ldr	r2, [r4, #4]
 800a756:	6023      	str	r3, [r4, #0]
 800a758:	3a01      	subs	r2, #1
 800a75a:	6062      	str	r2, [r4, #4]
 800a75c:	e7e9      	b.n	800a732 <__ssvfiscanf_r+0x42>
 800a75e:	22c0      	movs	r2, #192	; 0xc0
 800a760:	ab43      	add	r3, sp, #268	; 0x10c
 800a762:	0052      	lsls	r2, r2, #1
 800a764:	589b      	ldr	r3, [r3, r2]
 800a766:	0021      	movs	r1, r4
 800a768:	0030      	movs	r0, r6
 800a76a:	9300      	str	r3, [sp, #0]
 800a76c:	4798      	blx	r3
 800a76e:	2800      	cmp	r0, #0
 800a770:	d0e2      	beq.n	800a738 <__ssvfiscanf_r+0x48>
 800a772:	e7e8      	b.n	800a746 <__ssvfiscanf_r+0x56>
 800a774:	001d      	movs	r5, r3
 800a776:	2b25      	cmp	r3, #37	; 0x25
 800a778:	d164      	bne.n	800a844 <__ssvfiscanf_r+0x154>
 800a77a:	9145      	str	r1, [sp, #276]	; 0x114
 800a77c:	9143      	str	r1, [sp, #268]	; 0x10c
 800a77e:	7853      	ldrb	r3, [r2, #1]
 800a780:	2b2a      	cmp	r3, #42	; 0x2a
 800a782:	d102      	bne.n	800a78a <__ssvfiscanf_r+0x9a>
 800a784:	3b1a      	subs	r3, #26
 800a786:	9343      	str	r3, [sp, #268]	; 0x10c
 800a788:	1c97      	adds	r7, r2, #2
 800a78a:	003d      	movs	r5, r7
 800a78c:	220a      	movs	r2, #10
 800a78e:	7829      	ldrb	r1, [r5, #0]
 800a790:	1c6b      	adds	r3, r5, #1
 800a792:	9300      	str	r3, [sp, #0]
 800a794:	000b      	movs	r3, r1
 800a796:	3b30      	subs	r3, #48	; 0x30
 800a798:	2b09      	cmp	r3, #9
 800a79a:	d91f      	bls.n	800a7dc <__ssvfiscanf_r+0xec>
 800a79c:	4f91      	ldr	r7, [pc, #580]	; (800a9e4 <__ssvfiscanf_r+0x2f4>)
 800a79e:	2203      	movs	r2, #3
 800a7a0:	0038      	movs	r0, r7
 800a7a2:	f7fe fffb 	bl	800979c <memchr>
 800a7a6:	2800      	cmp	r0, #0
 800a7a8:	d007      	beq.n	800a7ba <__ssvfiscanf_r+0xca>
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	1bc0      	subs	r0, r0, r7
 800a7ae:	4083      	lsls	r3, r0
 800a7b0:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800a7b2:	9d00      	ldr	r5, [sp, #0]
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	9201      	str	r2, [sp, #4]
 800a7b8:	9343      	str	r3, [sp, #268]	; 0x10c
 800a7ba:	1c6f      	adds	r7, r5, #1
 800a7bc:	782d      	ldrb	r5, [r5, #0]
 800a7be:	2d78      	cmp	r5, #120	; 0x78
 800a7c0:	d807      	bhi.n	800a7d2 <__ssvfiscanf_r+0xe2>
 800a7c2:	2d57      	cmp	r5, #87	; 0x57
 800a7c4:	d812      	bhi.n	800a7ec <__ssvfiscanf_r+0xfc>
 800a7c6:	2d25      	cmp	r5, #37	; 0x25
 800a7c8:	d03c      	beq.n	800a844 <__ssvfiscanf_r+0x154>
 800a7ca:	d836      	bhi.n	800a83a <__ssvfiscanf_r+0x14a>
 800a7cc:	2d00      	cmp	r5, #0
 800a7ce:	d100      	bne.n	800a7d2 <__ssvfiscanf_r+0xe2>
 800a7d0:	e0fa      	b.n	800a9c8 <__ssvfiscanf_r+0x2d8>
 800a7d2:	2303      	movs	r3, #3
 800a7d4:	9349      	str	r3, [sp, #292]	; 0x124
 800a7d6:	3307      	adds	r3, #7
 800a7d8:	9344      	str	r3, [sp, #272]	; 0x110
 800a7da:	e06d      	b.n	800a8b8 <__ssvfiscanf_r+0x1c8>
 800a7dc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a7de:	9d00      	ldr	r5, [sp, #0]
 800a7e0:	9301      	str	r3, [sp, #4]
 800a7e2:	4353      	muls	r3, r2
 800a7e4:	3b30      	subs	r3, #48	; 0x30
 800a7e6:	185b      	adds	r3, r3, r1
 800a7e8:	9345      	str	r3, [sp, #276]	; 0x114
 800a7ea:	e7d0      	b.n	800a78e <__ssvfiscanf_r+0x9e>
 800a7ec:	0028      	movs	r0, r5
 800a7ee:	3858      	subs	r0, #88	; 0x58
 800a7f0:	2820      	cmp	r0, #32
 800a7f2:	d8ee      	bhi.n	800a7d2 <__ssvfiscanf_r+0xe2>
 800a7f4:	f7f5 fc9a 	bl	800012c <__gnu_thumb1_case_shi>
 800a7f8:	ffed0051 	.word	0xffed0051
 800a7fc:	0087ffed 	.word	0x0087ffed
 800a800:	ffedffed 	.word	0xffedffed
 800a804:	ffedffed 	.word	0xffedffed
 800a808:	ffedffed 	.word	0xffedffed
 800a80c:	0095ffed 	.word	0x0095ffed
 800a810:	0024007d 	.word	0x0024007d
 800a814:	00240024 	.word	0x00240024
 800a818:	007fffed 	.word	0x007fffed
 800a81c:	ffedffed 	.word	0xffedffed
 800a820:	ffedffed 	.word	0xffedffed
 800a824:	0083009f 	.word	0x0083009f
 800a828:	ffed004b 	.word	0xffed004b
 800a82c:	009dffed 	.word	0x009dffed
 800a830:	007dffed 	.word	0x007dffed
 800a834:	ffedffed 	.word	0xffedffed
 800a838:	0051      	.short	0x0051
 800a83a:	3d45      	subs	r5, #69	; 0x45
 800a83c:	2d02      	cmp	r5, #2
 800a83e:	d8c8      	bhi.n	800a7d2 <__ssvfiscanf_r+0xe2>
 800a840:	2305      	movs	r3, #5
 800a842:	e06c      	b.n	800a91e <__ssvfiscanf_r+0x22e>
 800a844:	6863      	ldr	r3, [r4, #4]
 800a846:	2b00      	cmp	r3, #0
 800a848:	dd0e      	ble.n	800a868 <__ssvfiscanf_r+0x178>
 800a84a:	6823      	ldr	r3, [r4, #0]
 800a84c:	781a      	ldrb	r2, [r3, #0]
 800a84e:	42aa      	cmp	r2, r5
 800a850:	d000      	beq.n	800a854 <__ssvfiscanf_r+0x164>
 800a852:	e0bc      	b.n	800a9ce <__ssvfiscanf_r+0x2de>
 800a854:	3301      	adds	r3, #1
 800a856:	6862      	ldr	r2, [r4, #4]
 800a858:	6023      	str	r3, [r4, #0]
 800a85a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a85c:	3a01      	subs	r2, #1
 800a85e:	9300      	str	r3, [sp, #0]
 800a860:	3301      	adds	r3, #1
 800a862:	6062      	str	r2, [r4, #4]
 800a864:	9347      	str	r3, [sp, #284]	; 0x11c
 800a866:	e76e      	b.n	800a746 <__ssvfiscanf_r+0x56>
 800a868:	22c0      	movs	r2, #192	; 0xc0
 800a86a:	ab43      	add	r3, sp, #268	; 0x10c
 800a86c:	0052      	lsls	r2, r2, #1
 800a86e:	589b      	ldr	r3, [r3, r2]
 800a870:	0021      	movs	r1, r4
 800a872:	0030      	movs	r0, r6
 800a874:	9300      	str	r3, [sp, #0]
 800a876:	4798      	blx	r3
 800a878:	2800      	cmp	r0, #0
 800a87a:	d0e6      	beq.n	800a84a <__ssvfiscanf_r+0x15a>
 800a87c:	9846      	ldr	r0, [sp, #280]	; 0x118
 800a87e:	2800      	cmp	r0, #0
 800a880:	d000      	beq.n	800a884 <__ssvfiscanf_r+0x194>
 800a882:	e09d      	b.n	800a9c0 <__ssvfiscanf_r+0x2d0>
 800a884:	3801      	subs	r0, #1
 800a886:	23a5      	movs	r3, #165	; 0xa5
 800a888:	009b      	lsls	r3, r3, #2
 800a88a:	449d      	add	sp, r3
 800a88c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a88e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a890:	9300      	str	r3, [sp, #0]
 800a892:	2320      	movs	r3, #32
 800a894:	9a00      	ldr	r2, [sp, #0]
 800a896:	4313      	orrs	r3, r2
 800a898:	9343      	str	r3, [sp, #268]	; 0x10c
 800a89a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a89c:	9300      	str	r3, [sp, #0]
 800a89e:	2380      	movs	r3, #128	; 0x80
 800a8a0:	9a00      	ldr	r2, [sp, #0]
 800a8a2:	009b      	lsls	r3, r3, #2
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	9343      	str	r3, [sp, #268]	; 0x10c
 800a8a8:	2310      	movs	r3, #16
 800a8aa:	9344      	str	r3, [sp, #272]	; 0x110
 800a8ac:	236e      	movs	r3, #110	; 0x6e
 800a8ae:	42ab      	cmp	r3, r5
 800a8b0:	41ad      	sbcs	r5, r5
 800a8b2:	426d      	negs	r5, r5
 800a8b4:	3503      	adds	r5, #3
 800a8b6:	9549      	str	r5, [sp, #292]	; 0x124
 800a8b8:	6863      	ldr	r3, [r4, #4]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	dd4a      	ble.n	800a954 <__ssvfiscanf_r+0x264>
 800a8be:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a8c0:	9300      	str	r3, [sp, #0]
 800a8c2:	065b      	lsls	r3, r3, #25
 800a8c4:	d406      	bmi.n	800a8d4 <__ssvfiscanf_r+0x1e4>
 800a8c6:	6823      	ldr	r3, [r4, #0]
 800a8c8:	4945      	ldr	r1, [pc, #276]	; (800a9e0 <__ssvfiscanf_r+0x2f0>)
 800a8ca:	781a      	ldrb	r2, [r3, #0]
 800a8cc:	5c8a      	ldrb	r2, [r1, r2]
 800a8ce:	2108      	movs	r1, #8
 800a8d0:	420a      	tst	r2, r1
 800a8d2:	d14a      	bne.n	800a96a <__ssvfiscanf_r+0x27a>
 800a8d4:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800a8d6:	2b02      	cmp	r3, #2
 800a8d8:	dc5e      	bgt.n	800a998 <__ssvfiscanf_r+0x2a8>
 800a8da:	0022      	movs	r2, r4
 800a8dc:	0030      	movs	r0, r6
 800a8de:	ab02      	add	r3, sp, #8
 800a8e0:	a943      	add	r1, sp, #268	; 0x10c
 800a8e2:	f000 f883 	bl	800a9ec <_scanf_chars>
 800a8e6:	2801      	cmp	r0, #1
 800a8e8:	d071      	beq.n	800a9ce <__ssvfiscanf_r+0x2de>
 800a8ea:	2802      	cmp	r0, #2
 800a8ec:	d000      	beq.n	800a8f0 <__ssvfiscanf_r+0x200>
 800a8ee:	e72a      	b.n	800a746 <__ssvfiscanf_r+0x56>
 800a8f0:	e7c4      	b.n	800a87c <__ssvfiscanf_r+0x18c>
 800a8f2:	230a      	movs	r3, #10
 800a8f4:	e7d9      	b.n	800a8aa <__ssvfiscanf_r+0x1ba>
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	2503      	movs	r5, #3
 800a8fa:	9344      	str	r3, [sp, #272]	; 0x110
 800a8fc:	e7db      	b.n	800a8b6 <__ssvfiscanf_r+0x1c6>
 800a8fe:	2308      	movs	r3, #8
 800a900:	2504      	movs	r5, #4
 800a902:	9344      	str	r3, [sp, #272]	; 0x110
 800a904:	e7d7      	b.n	800a8b6 <__ssvfiscanf_r+0x1c6>
 800a906:	0039      	movs	r1, r7
 800a908:	a803      	add	r0, sp, #12
 800a90a:	f000 f9fd 	bl	800ad08 <__sccl>
 800a90e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a910:	0007      	movs	r7, r0
 800a912:	9300      	str	r3, [sp, #0]
 800a914:	2340      	movs	r3, #64	; 0x40
 800a916:	9a00      	ldr	r2, [sp, #0]
 800a918:	4313      	orrs	r3, r2
 800a91a:	9343      	str	r3, [sp, #268]	; 0x10c
 800a91c:	2301      	movs	r3, #1
 800a91e:	9349      	str	r3, [sp, #292]	; 0x124
 800a920:	e7ca      	b.n	800a8b8 <__ssvfiscanf_r+0x1c8>
 800a922:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a924:	9300      	str	r3, [sp, #0]
 800a926:	2340      	movs	r3, #64	; 0x40
 800a928:	9a00      	ldr	r2, [sp, #0]
 800a92a:	4313      	orrs	r3, r2
 800a92c:	9343      	str	r3, [sp, #268]	; 0x10c
 800a92e:	2300      	movs	r3, #0
 800a930:	e7f5      	b.n	800a91e <__ssvfiscanf_r+0x22e>
 800a932:	2302      	movs	r3, #2
 800a934:	e7f3      	b.n	800a91e <__ssvfiscanf_r+0x22e>
 800a936:	9843      	ldr	r0, [sp, #268]	; 0x10c
 800a938:	06c3      	lsls	r3, r0, #27
 800a93a:	d500      	bpl.n	800a93e <__ssvfiscanf_r+0x24e>
 800a93c:	e703      	b.n	800a746 <__ssvfiscanf_r+0x56>
 800a93e:	9b02      	ldr	r3, [sp, #8]
 800a940:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800a942:	1d19      	adds	r1, r3, #4
 800a944:	9102      	str	r1, [sp, #8]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	07c5      	lsls	r5, r0, #31
 800a94a:	d501      	bpl.n	800a950 <__ssvfiscanf_r+0x260>
 800a94c:	801a      	strh	r2, [r3, #0]
 800a94e:	e6fa      	b.n	800a746 <__ssvfiscanf_r+0x56>
 800a950:	601a      	str	r2, [r3, #0]
 800a952:	e6f8      	b.n	800a746 <__ssvfiscanf_r+0x56>
 800a954:	22c0      	movs	r2, #192	; 0xc0
 800a956:	ab43      	add	r3, sp, #268	; 0x10c
 800a958:	0052      	lsls	r2, r2, #1
 800a95a:	589b      	ldr	r3, [r3, r2]
 800a95c:	0021      	movs	r1, r4
 800a95e:	0030      	movs	r0, r6
 800a960:	9300      	str	r3, [sp, #0]
 800a962:	4798      	blx	r3
 800a964:	2800      	cmp	r0, #0
 800a966:	d0aa      	beq.n	800a8be <__ssvfiscanf_r+0x1ce>
 800a968:	e788      	b.n	800a87c <__ssvfiscanf_r+0x18c>
 800a96a:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800a96c:	9200      	str	r2, [sp, #0]
 800a96e:	3201      	adds	r2, #1
 800a970:	9247      	str	r2, [sp, #284]	; 0x11c
 800a972:	6862      	ldr	r2, [r4, #4]
 800a974:	3a01      	subs	r2, #1
 800a976:	6062      	str	r2, [r4, #4]
 800a978:	2a00      	cmp	r2, #0
 800a97a:	dd02      	ble.n	800a982 <__ssvfiscanf_r+0x292>
 800a97c:	3301      	adds	r3, #1
 800a97e:	6023      	str	r3, [r4, #0]
 800a980:	e7a1      	b.n	800a8c6 <__ssvfiscanf_r+0x1d6>
 800a982:	22c0      	movs	r2, #192	; 0xc0
 800a984:	ab43      	add	r3, sp, #268	; 0x10c
 800a986:	0052      	lsls	r2, r2, #1
 800a988:	589b      	ldr	r3, [r3, r2]
 800a98a:	0021      	movs	r1, r4
 800a98c:	0030      	movs	r0, r6
 800a98e:	9300      	str	r3, [sp, #0]
 800a990:	4798      	blx	r3
 800a992:	2800      	cmp	r0, #0
 800a994:	d097      	beq.n	800a8c6 <__ssvfiscanf_r+0x1d6>
 800a996:	e771      	b.n	800a87c <__ssvfiscanf_r+0x18c>
 800a998:	2b04      	cmp	r3, #4
 800a99a:	dc06      	bgt.n	800a9aa <__ssvfiscanf_r+0x2ba>
 800a99c:	0022      	movs	r2, r4
 800a99e:	0030      	movs	r0, r6
 800a9a0:	ab02      	add	r3, sp, #8
 800a9a2:	a943      	add	r1, sp, #268	; 0x10c
 800a9a4:	f000 f880 	bl	800aaa8 <_scanf_i>
 800a9a8:	e79d      	b.n	800a8e6 <__ssvfiscanf_r+0x1f6>
 800a9aa:	4b0f      	ldr	r3, [pc, #60]	; (800a9e8 <__ssvfiscanf_r+0x2f8>)
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d100      	bne.n	800a9b2 <__ssvfiscanf_r+0x2c2>
 800a9b0:	e6c9      	b.n	800a746 <__ssvfiscanf_r+0x56>
 800a9b2:	0022      	movs	r2, r4
 800a9b4:	0030      	movs	r0, r6
 800a9b6:	ab02      	add	r3, sp, #8
 800a9b8:	a943      	add	r1, sp, #268	; 0x10c
 800a9ba:	f7fc fb01 	bl	8006fc0 <_scanf_float>
 800a9be:	e792      	b.n	800a8e6 <__ssvfiscanf_r+0x1f6>
 800a9c0:	89a3      	ldrh	r3, [r4, #12]
 800a9c2:	065b      	lsls	r3, r3, #25
 800a9c4:	d400      	bmi.n	800a9c8 <__ssvfiscanf_r+0x2d8>
 800a9c6:	e75e      	b.n	800a886 <__ssvfiscanf_r+0x196>
 800a9c8:	2001      	movs	r0, #1
 800a9ca:	4240      	negs	r0, r0
 800a9cc:	e75b      	b.n	800a886 <__ssvfiscanf_r+0x196>
 800a9ce:	9846      	ldr	r0, [sp, #280]	; 0x118
 800a9d0:	e759      	b.n	800a886 <__ssvfiscanf_r+0x196>
 800a9d2:	46c0      	nop			; (mov r8, r8)
 800a9d4:	fffffd6c 	.word	0xfffffd6c
 800a9d8:	0800a639 	.word	0x0800a639
 800a9dc:	0800a6b1 	.word	0x0800a6b1
 800a9e0:	0800bcf1 	.word	0x0800bcf1
 800a9e4:	0800c05a 	.word	0x0800c05a
 800a9e8:	08006fc1 	.word	0x08006fc1

0800a9ec <_scanf_chars>:
 800a9ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9ee:	0015      	movs	r5, r2
 800a9f0:	688a      	ldr	r2, [r1, #8]
 800a9f2:	000c      	movs	r4, r1
 800a9f4:	9001      	str	r0, [sp, #4]
 800a9f6:	2a00      	cmp	r2, #0
 800a9f8:	d105      	bne.n	800aa06 <_scanf_chars+0x1a>
 800a9fa:	6989      	ldr	r1, [r1, #24]
 800a9fc:	3201      	adds	r2, #1
 800a9fe:	2900      	cmp	r1, #0
 800aa00:	d000      	beq.n	800aa04 <_scanf_chars+0x18>
 800aa02:	3a02      	subs	r2, #2
 800aa04:	60a2      	str	r2, [r4, #8]
 800aa06:	6822      	ldr	r2, [r4, #0]
 800aa08:	06d2      	lsls	r2, r2, #27
 800aa0a:	d403      	bmi.n	800aa14 <_scanf_chars+0x28>
 800aa0c:	681a      	ldr	r2, [r3, #0]
 800aa0e:	1d11      	adds	r1, r2, #4
 800aa10:	6019      	str	r1, [r3, #0]
 800aa12:	6817      	ldr	r7, [r2, #0]
 800aa14:	2600      	movs	r6, #0
 800aa16:	69a0      	ldr	r0, [r4, #24]
 800aa18:	2800      	cmp	r0, #0
 800aa1a:	d013      	beq.n	800aa44 <_scanf_chars+0x58>
 800aa1c:	2801      	cmp	r0, #1
 800aa1e:	d108      	bne.n	800aa32 <_scanf_chars+0x46>
 800aa20:	682b      	ldr	r3, [r5, #0]
 800aa22:	6962      	ldr	r2, [r4, #20]
 800aa24:	781b      	ldrb	r3, [r3, #0]
 800aa26:	5cd3      	ldrb	r3, [r2, r3]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d10b      	bne.n	800aa44 <_scanf_chars+0x58>
 800aa2c:	2e00      	cmp	r6, #0
 800aa2e:	d038      	beq.n	800aaa2 <_scanf_chars+0xb6>
 800aa30:	e026      	b.n	800aa80 <_scanf_chars+0x94>
 800aa32:	2802      	cmp	r0, #2
 800aa34:	d124      	bne.n	800aa80 <_scanf_chars+0x94>
 800aa36:	682b      	ldr	r3, [r5, #0]
 800aa38:	4a1a      	ldr	r2, [pc, #104]	; (800aaa4 <_scanf_chars+0xb8>)
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	5cd3      	ldrb	r3, [r2, r3]
 800aa3e:	2208      	movs	r2, #8
 800aa40:	4213      	tst	r3, r2
 800aa42:	d11d      	bne.n	800aa80 <_scanf_chars+0x94>
 800aa44:	2210      	movs	r2, #16
 800aa46:	6823      	ldr	r3, [r4, #0]
 800aa48:	3601      	adds	r6, #1
 800aa4a:	4213      	tst	r3, r2
 800aa4c:	d103      	bne.n	800aa56 <_scanf_chars+0x6a>
 800aa4e:	682b      	ldr	r3, [r5, #0]
 800aa50:	781b      	ldrb	r3, [r3, #0]
 800aa52:	703b      	strb	r3, [r7, #0]
 800aa54:	3701      	adds	r7, #1
 800aa56:	682a      	ldr	r2, [r5, #0]
 800aa58:	686b      	ldr	r3, [r5, #4]
 800aa5a:	3201      	adds	r2, #1
 800aa5c:	602a      	str	r2, [r5, #0]
 800aa5e:	68a2      	ldr	r2, [r4, #8]
 800aa60:	3b01      	subs	r3, #1
 800aa62:	3a01      	subs	r2, #1
 800aa64:	606b      	str	r3, [r5, #4]
 800aa66:	60a2      	str	r2, [r4, #8]
 800aa68:	2a00      	cmp	r2, #0
 800aa6a:	d009      	beq.n	800aa80 <_scanf_chars+0x94>
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	dcd2      	bgt.n	800aa16 <_scanf_chars+0x2a>
 800aa70:	23c0      	movs	r3, #192	; 0xc0
 800aa72:	005b      	lsls	r3, r3, #1
 800aa74:	0029      	movs	r1, r5
 800aa76:	58e3      	ldr	r3, [r4, r3]
 800aa78:	9801      	ldr	r0, [sp, #4]
 800aa7a:	4798      	blx	r3
 800aa7c:	2800      	cmp	r0, #0
 800aa7e:	d0ca      	beq.n	800aa16 <_scanf_chars+0x2a>
 800aa80:	6822      	ldr	r2, [r4, #0]
 800aa82:	2310      	movs	r3, #16
 800aa84:	0011      	movs	r1, r2
 800aa86:	4019      	ands	r1, r3
 800aa88:	421a      	tst	r2, r3
 800aa8a:	d106      	bne.n	800aa9a <_scanf_chars+0xae>
 800aa8c:	68e3      	ldr	r3, [r4, #12]
 800aa8e:	3301      	adds	r3, #1
 800aa90:	60e3      	str	r3, [r4, #12]
 800aa92:	69a3      	ldr	r3, [r4, #24]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d000      	beq.n	800aa9a <_scanf_chars+0xae>
 800aa98:	7039      	strb	r1, [r7, #0]
 800aa9a:	2000      	movs	r0, #0
 800aa9c:	6923      	ldr	r3, [r4, #16]
 800aa9e:	199e      	adds	r6, r3, r6
 800aaa0:	6126      	str	r6, [r4, #16]
 800aaa2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aaa4:	0800bcf1 	.word	0x0800bcf1

0800aaa8 <_scanf_i>:
 800aaa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aaaa:	000c      	movs	r4, r1
 800aaac:	b08d      	sub	sp, #52	; 0x34
 800aaae:	9302      	str	r3, [sp, #8]
 800aab0:	4b79      	ldr	r3, [pc, #484]	; (800ac98 <_scanf_i+0x1f0>)
 800aab2:	0016      	movs	r6, r2
 800aab4:	9005      	str	r0, [sp, #20]
 800aab6:	aa09      	add	r2, sp, #36	; 0x24
 800aab8:	cb23      	ldmia	r3!, {r0, r1, r5}
 800aaba:	c223      	stmia	r2!, {r0, r1, r5}
 800aabc:	4b77      	ldr	r3, [pc, #476]	; (800ac9c <_scanf_i+0x1f4>)
 800aabe:	9306      	str	r3, [sp, #24]
 800aac0:	69a3      	ldr	r3, [r4, #24]
 800aac2:	2b03      	cmp	r3, #3
 800aac4:	d001      	beq.n	800aaca <_scanf_i+0x22>
 800aac6:	4b76      	ldr	r3, [pc, #472]	; (800aca0 <_scanf_i+0x1f8>)
 800aac8:	9306      	str	r3, [sp, #24]
 800aaca:	22ae      	movs	r2, #174	; 0xae
 800aacc:	2000      	movs	r0, #0
 800aace:	68a3      	ldr	r3, [r4, #8]
 800aad0:	0052      	lsls	r2, r2, #1
 800aad2:	1e59      	subs	r1, r3, #1
 800aad4:	9004      	str	r0, [sp, #16]
 800aad6:	4291      	cmp	r1, r2
 800aad8:	d905      	bls.n	800aae6 <_scanf_i+0x3e>
 800aada:	3b5e      	subs	r3, #94	; 0x5e
 800aadc:	3bff      	subs	r3, #255	; 0xff
 800aade:	9304      	str	r3, [sp, #16]
 800aae0:	235e      	movs	r3, #94	; 0x5e
 800aae2:	33ff      	adds	r3, #255	; 0xff
 800aae4:	60a3      	str	r3, [r4, #8]
 800aae6:	0023      	movs	r3, r4
 800aae8:	331c      	adds	r3, #28
 800aaea:	9301      	str	r3, [sp, #4]
 800aaec:	23d0      	movs	r3, #208	; 0xd0
 800aaee:	2700      	movs	r7, #0
 800aaf0:	6822      	ldr	r2, [r4, #0]
 800aaf2:	011b      	lsls	r3, r3, #4
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	6023      	str	r3, [r4, #0]
 800aaf8:	9b01      	ldr	r3, [sp, #4]
 800aafa:	9303      	str	r3, [sp, #12]
 800aafc:	6833      	ldr	r3, [r6, #0]
 800aafe:	a809      	add	r0, sp, #36	; 0x24
 800ab00:	7819      	ldrb	r1, [r3, #0]
 800ab02:	00bb      	lsls	r3, r7, #2
 800ab04:	2202      	movs	r2, #2
 800ab06:	5818      	ldr	r0, [r3, r0]
 800ab08:	f7fe fe48 	bl	800979c <memchr>
 800ab0c:	2800      	cmp	r0, #0
 800ab0e:	d02b      	beq.n	800ab68 <_scanf_i+0xc0>
 800ab10:	2f01      	cmp	r7, #1
 800ab12:	d162      	bne.n	800abda <_scanf_i+0x132>
 800ab14:	6863      	ldr	r3, [r4, #4]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d106      	bne.n	800ab28 <_scanf_i+0x80>
 800ab1a:	3308      	adds	r3, #8
 800ab1c:	6822      	ldr	r2, [r4, #0]
 800ab1e:	6063      	str	r3, [r4, #4]
 800ab20:	33f9      	adds	r3, #249	; 0xf9
 800ab22:	33ff      	adds	r3, #255	; 0xff
 800ab24:	4313      	orrs	r3, r2
 800ab26:	6023      	str	r3, [r4, #0]
 800ab28:	4b5e      	ldr	r3, [pc, #376]	; (800aca4 <_scanf_i+0x1fc>)
 800ab2a:	6822      	ldr	r2, [r4, #0]
 800ab2c:	4013      	ands	r3, r2
 800ab2e:	6023      	str	r3, [r4, #0]
 800ab30:	68a3      	ldr	r3, [r4, #8]
 800ab32:	1e5a      	subs	r2, r3, #1
 800ab34:	60a2      	str	r2, [r4, #8]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d016      	beq.n	800ab68 <_scanf_i+0xc0>
 800ab3a:	6833      	ldr	r3, [r6, #0]
 800ab3c:	1c5a      	adds	r2, r3, #1
 800ab3e:	6032      	str	r2, [r6, #0]
 800ab40:	781b      	ldrb	r3, [r3, #0]
 800ab42:	9a03      	ldr	r2, [sp, #12]
 800ab44:	7013      	strb	r3, [r2, #0]
 800ab46:	6873      	ldr	r3, [r6, #4]
 800ab48:	1c55      	adds	r5, r2, #1
 800ab4a:	3b01      	subs	r3, #1
 800ab4c:	6073      	str	r3, [r6, #4]
 800ab4e:	9503      	str	r5, [sp, #12]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	dc09      	bgt.n	800ab68 <_scanf_i+0xc0>
 800ab54:	23c0      	movs	r3, #192	; 0xc0
 800ab56:	005b      	lsls	r3, r3, #1
 800ab58:	58e3      	ldr	r3, [r4, r3]
 800ab5a:	0031      	movs	r1, r6
 800ab5c:	9805      	ldr	r0, [sp, #20]
 800ab5e:	9307      	str	r3, [sp, #28]
 800ab60:	4798      	blx	r3
 800ab62:	2800      	cmp	r0, #0
 800ab64:	d000      	beq.n	800ab68 <_scanf_i+0xc0>
 800ab66:	e081      	b.n	800ac6c <_scanf_i+0x1c4>
 800ab68:	3701      	adds	r7, #1
 800ab6a:	2f03      	cmp	r7, #3
 800ab6c:	d1c6      	bne.n	800aafc <_scanf_i+0x54>
 800ab6e:	6863      	ldr	r3, [r4, #4]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d101      	bne.n	800ab78 <_scanf_i+0xd0>
 800ab74:	330a      	adds	r3, #10
 800ab76:	6063      	str	r3, [r4, #4]
 800ab78:	2110      	movs	r1, #16
 800ab7a:	2700      	movs	r7, #0
 800ab7c:	6863      	ldr	r3, [r4, #4]
 800ab7e:	6960      	ldr	r0, [r4, #20]
 800ab80:	1ac9      	subs	r1, r1, r3
 800ab82:	4b49      	ldr	r3, [pc, #292]	; (800aca8 <_scanf_i+0x200>)
 800ab84:	18c9      	adds	r1, r1, r3
 800ab86:	f000 f8bf 	bl	800ad08 <__sccl>
 800ab8a:	9d03      	ldr	r5, [sp, #12]
 800ab8c:	68a3      	ldr	r3, [r4, #8]
 800ab8e:	6822      	ldr	r2, [r4, #0]
 800ab90:	9303      	str	r3, [sp, #12]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d041      	beq.n	800ac1a <_scanf_i+0x172>
 800ab96:	6831      	ldr	r1, [r6, #0]
 800ab98:	6963      	ldr	r3, [r4, #20]
 800ab9a:	7808      	ldrb	r0, [r1, #0]
 800ab9c:	5c1b      	ldrb	r3, [r3, r0]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d03b      	beq.n	800ac1a <_scanf_i+0x172>
 800aba2:	2830      	cmp	r0, #48	; 0x30
 800aba4:	d129      	bne.n	800abfa <_scanf_i+0x152>
 800aba6:	2380      	movs	r3, #128	; 0x80
 800aba8:	011b      	lsls	r3, r3, #4
 800abaa:	421a      	tst	r2, r3
 800abac:	d025      	beq.n	800abfa <_scanf_i+0x152>
 800abae:	9b04      	ldr	r3, [sp, #16]
 800abb0:	3701      	adds	r7, #1
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d005      	beq.n	800abc2 <_scanf_i+0x11a>
 800abb6:	001a      	movs	r2, r3
 800abb8:	9b03      	ldr	r3, [sp, #12]
 800abba:	3a01      	subs	r2, #1
 800abbc:	3301      	adds	r3, #1
 800abbe:	9204      	str	r2, [sp, #16]
 800abc0:	60a3      	str	r3, [r4, #8]
 800abc2:	6873      	ldr	r3, [r6, #4]
 800abc4:	3b01      	subs	r3, #1
 800abc6:	6073      	str	r3, [r6, #4]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	dd1d      	ble.n	800ac08 <_scanf_i+0x160>
 800abcc:	6833      	ldr	r3, [r6, #0]
 800abce:	3301      	adds	r3, #1
 800abd0:	6033      	str	r3, [r6, #0]
 800abd2:	68a3      	ldr	r3, [r4, #8]
 800abd4:	3b01      	subs	r3, #1
 800abd6:	60a3      	str	r3, [r4, #8]
 800abd8:	e7d8      	b.n	800ab8c <_scanf_i+0xe4>
 800abda:	2f02      	cmp	r7, #2
 800abdc:	d1a8      	bne.n	800ab30 <_scanf_i+0x88>
 800abde:	21c0      	movs	r1, #192	; 0xc0
 800abe0:	2380      	movs	r3, #128	; 0x80
 800abe2:	6822      	ldr	r2, [r4, #0]
 800abe4:	00c9      	lsls	r1, r1, #3
 800abe6:	4011      	ands	r1, r2
 800abe8:	009b      	lsls	r3, r3, #2
 800abea:	4299      	cmp	r1, r3
 800abec:	d1bf      	bne.n	800ab6e <_scanf_i+0xc6>
 800abee:	3bf1      	subs	r3, #241	; 0xf1
 800abf0:	3bff      	subs	r3, #255	; 0xff
 800abf2:	6063      	str	r3, [r4, #4]
 800abf4:	33f0      	adds	r3, #240	; 0xf0
 800abf6:	4313      	orrs	r3, r2
 800abf8:	e799      	b.n	800ab2e <_scanf_i+0x86>
 800abfa:	4b2c      	ldr	r3, [pc, #176]	; (800acac <_scanf_i+0x204>)
 800abfc:	4013      	ands	r3, r2
 800abfe:	6023      	str	r3, [r4, #0]
 800ac00:	780b      	ldrb	r3, [r1, #0]
 800ac02:	702b      	strb	r3, [r5, #0]
 800ac04:	3501      	adds	r5, #1
 800ac06:	e7dc      	b.n	800abc2 <_scanf_i+0x11a>
 800ac08:	23c0      	movs	r3, #192	; 0xc0
 800ac0a:	005b      	lsls	r3, r3, #1
 800ac0c:	58e3      	ldr	r3, [r4, r3]
 800ac0e:	0031      	movs	r1, r6
 800ac10:	9805      	ldr	r0, [sp, #20]
 800ac12:	9303      	str	r3, [sp, #12]
 800ac14:	4798      	blx	r3
 800ac16:	2800      	cmp	r0, #0
 800ac18:	d0db      	beq.n	800abd2 <_scanf_i+0x12a>
 800ac1a:	6823      	ldr	r3, [r4, #0]
 800ac1c:	05db      	lsls	r3, r3, #23
 800ac1e:	d50e      	bpl.n	800ac3e <_scanf_i+0x196>
 800ac20:	9b01      	ldr	r3, [sp, #4]
 800ac22:	429d      	cmp	r5, r3
 800ac24:	d907      	bls.n	800ac36 <_scanf_i+0x18e>
 800ac26:	23be      	movs	r3, #190	; 0xbe
 800ac28:	3d01      	subs	r5, #1
 800ac2a:	005b      	lsls	r3, r3, #1
 800ac2c:	0032      	movs	r2, r6
 800ac2e:	7829      	ldrb	r1, [r5, #0]
 800ac30:	58e3      	ldr	r3, [r4, r3]
 800ac32:	9805      	ldr	r0, [sp, #20]
 800ac34:	4798      	blx	r3
 800ac36:	9b01      	ldr	r3, [sp, #4]
 800ac38:	2001      	movs	r0, #1
 800ac3a:	429d      	cmp	r5, r3
 800ac3c:	d029      	beq.n	800ac92 <_scanf_i+0x1ea>
 800ac3e:	6821      	ldr	r1, [r4, #0]
 800ac40:	2310      	movs	r3, #16
 800ac42:	000a      	movs	r2, r1
 800ac44:	401a      	ands	r2, r3
 800ac46:	4219      	tst	r1, r3
 800ac48:	d11c      	bne.n	800ac84 <_scanf_i+0x1dc>
 800ac4a:	702a      	strb	r2, [r5, #0]
 800ac4c:	6863      	ldr	r3, [r4, #4]
 800ac4e:	9901      	ldr	r1, [sp, #4]
 800ac50:	9805      	ldr	r0, [sp, #20]
 800ac52:	9e06      	ldr	r6, [sp, #24]
 800ac54:	47b0      	blx	r6
 800ac56:	9b02      	ldr	r3, [sp, #8]
 800ac58:	6821      	ldr	r1, [r4, #0]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	068a      	lsls	r2, r1, #26
 800ac5e:	d507      	bpl.n	800ac70 <_scanf_i+0x1c8>
 800ac60:	1d1a      	adds	r2, r3, #4
 800ac62:	9902      	ldr	r1, [sp, #8]
 800ac64:	600a      	str	r2, [r1, #0]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	6018      	str	r0, [r3, #0]
 800ac6a:	e008      	b.n	800ac7e <_scanf_i+0x1d6>
 800ac6c:	2700      	movs	r7, #0
 800ac6e:	e7d4      	b.n	800ac1a <_scanf_i+0x172>
 800ac70:	1d1a      	adds	r2, r3, #4
 800ac72:	07ce      	lsls	r6, r1, #31
 800ac74:	d5f5      	bpl.n	800ac62 <_scanf_i+0x1ba>
 800ac76:	9902      	ldr	r1, [sp, #8]
 800ac78:	600a      	str	r2, [r1, #0]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	8018      	strh	r0, [r3, #0]
 800ac7e:	68e3      	ldr	r3, [r4, #12]
 800ac80:	3301      	adds	r3, #1
 800ac82:	60e3      	str	r3, [r4, #12]
 800ac84:	2000      	movs	r0, #0
 800ac86:	9b01      	ldr	r3, [sp, #4]
 800ac88:	1aed      	subs	r5, r5, r3
 800ac8a:	6923      	ldr	r3, [r4, #16]
 800ac8c:	19ef      	adds	r7, r5, r7
 800ac8e:	19df      	adds	r7, r3, r7
 800ac90:	6127      	str	r7, [r4, #16]
 800ac92:	b00d      	add	sp, #52	; 0x34
 800ac94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac96:	46c0      	nop			; (mov r8, r8)
 800ac98:	0800baec 	.word	0x0800baec
 800ac9c:	080082ad 	.word	0x080082ad
 800aca0:	0800ae95 	.word	0x0800ae95
 800aca4:	fffffaff 	.word	0xfffffaff
 800aca8:	0800c06e 	.word	0x0800c06e
 800acac:	fffff6ff 	.word	0xfffff6ff

0800acb0 <_read_r>:
 800acb0:	b570      	push	{r4, r5, r6, lr}
 800acb2:	0004      	movs	r4, r0
 800acb4:	0008      	movs	r0, r1
 800acb6:	0011      	movs	r1, r2
 800acb8:	001a      	movs	r2, r3
 800acba:	2300      	movs	r3, #0
 800acbc:	4d05      	ldr	r5, [pc, #20]	; (800acd4 <_read_r+0x24>)
 800acbe:	602b      	str	r3, [r5, #0]
 800acc0:	f7f8 fd38 	bl	8003734 <_read>
 800acc4:	1c43      	adds	r3, r0, #1
 800acc6:	d103      	bne.n	800acd0 <_read_r+0x20>
 800acc8:	682b      	ldr	r3, [r5, #0]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d000      	beq.n	800acd0 <_read_r+0x20>
 800acce:	6023      	str	r3, [r4, #0]
 800acd0:	bd70      	pop	{r4, r5, r6, pc}
 800acd2:	46c0      	nop			; (mov r8, r8)
 800acd4:	200003fc 	.word	0x200003fc

0800acd8 <nan>:
 800acd8:	2000      	movs	r0, #0
 800acda:	4901      	ldr	r1, [pc, #4]	; (800ace0 <nan+0x8>)
 800acdc:	4770      	bx	lr
 800acde:	46c0      	nop			; (mov r8, r8)
 800ace0:	7ff80000 	.word	0x7ff80000

0800ace4 <_sbrk_r>:
 800ace4:	2300      	movs	r3, #0
 800ace6:	b570      	push	{r4, r5, r6, lr}
 800ace8:	4d06      	ldr	r5, [pc, #24]	; (800ad04 <_sbrk_r+0x20>)
 800acea:	0004      	movs	r4, r0
 800acec:	0008      	movs	r0, r1
 800acee:	602b      	str	r3, [r5, #0]
 800acf0:	f7f8 fd86 	bl	8003800 <_sbrk>
 800acf4:	1c43      	adds	r3, r0, #1
 800acf6:	d103      	bne.n	800ad00 <_sbrk_r+0x1c>
 800acf8:	682b      	ldr	r3, [r5, #0]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d000      	beq.n	800ad00 <_sbrk_r+0x1c>
 800acfe:	6023      	str	r3, [r4, #0]
 800ad00:	bd70      	pop	{r4, r5, r6, pc}
 800ad02:	46c0      	nop			; (mov r8, r8)
 800ad04:	200003fc 	.word	0x200003fc

0800ad08 <__sccl>:
 800ad08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad0a:	780b      	ldrb	r3, [r1, #0]
 800ad0c:	0004      	movs	r4, r0
 800ad0e:	2b5e      	cmp	r3, #94	; 0x5e
 800ad10:	d00c      	beq.n	800ad2c <__sccl+0x24>
 800ad12:	1c48      	adds	r0, r1, #1
 800ad14:	2100      	movs	r1, #0
 800ad16:	0022      	movs	r2, r4
 800ad18:	1c65      	adds	r5, r4, #1
 800ad1a:	35ff      	adds	r5, #255	; 0xff
 800ad1c:	7011      	strb	r1, [r2, #0]
 800ad1e:	3201      	adds	r2, #1
 800ad20:	42aa      	cmp	r2, r5
 800ad22:	d1fb      	bne.n	800ad1c <__sccl+0x14>
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d105      	bne.n	800ad34 <__sccl+0x2c>
 800ad28:	3801      	subs	r0, #1
 800ad2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad2c:	784b      	ldrb	r3, [r1, #1]
 800ad2e:	1c88      	adds	r0, r1, #2
 800ad30:	2101      	movs	r1, #1
 800ad32:	e7f0      	b.n	800ad16 <__sccl+0xe>
 800ad34:	2201      	movs	r2, #1
 800ad36:	262d      	movs	r6, #45	; 0x2d
 800ad38:	4051      	eors	r1, r2
 800ad3a:	0002      	movs	r2, r0
 800ad3c:	54e1      	strb	r1, [r4, r3]
 800ad3e:	7815      	ldrb	r5, [r2, #0]
 800ad40:	1c50      	adds	r0, r2, #1
 800ad42:	2d2d      	cmp	r5, #45	; 0x2d
 800ad44:	d009      	beq.n	800ad5a <__sccl+0x52>
 800ad46:	2d5d      	cmp	r5, #93	; 0x5d
 800ad48:	d0ef      	beq.n	800ad2a <__sccl+0x22>
 800ad4a:	2d00      	cmp	r5, #0
 800ad4c:	d101      	bne.n	800ad52 <__sccl+0x4a>
 800ad4e:	0010      	movs	r0, r2
 800ad50:	e7eb      	b.n	800ad2a <__sccl+0x22>
 800ad52:	002b      	movs	r3, r5
 800ad54:	e7f1      	b.n	800ad3a <__sccl+0x32>
 800ad56:	0033      	movs	r3, r6
 800ad58:	e7ef      	b.n	800ad3a <__sccl+0x32>
 800ad5a:	7855      	ldrb	r5, [r2, #1]
 800ad5c:	2d5d      	cmp	r5, #93	; 0x5d
 800ad5e:	d0fa      	beq.n	800ad56 <__sccl+0x4e>
 800ad60:	42ab      	cmp	r3, r5
 800ad62:	dcf8      	bgt.n	800ad56 <__sccl+0x4e>
 800ad64:	0018      	movs	r0, r3
 800ad66:	3202      	adds	r2, #2
 800ad68:	3001      	adds	r0, #1
 800ad6a:	5421      	strb	r1, [r4, r0]
 800ad6c:	4285      	cmp	r5, r0
 800ad6e:	dcfb      	bgt.n	800ad68 <__sccl+0x60>
 800ad70:	2000      	movs	r0, #0
 800ad72:	1c5f      	adds	r7, r3, #1
 800ad74:	42ab      	cmp	r3, r5
 800ad76:	da01      	bge.n	800ad7c <__sccl+0x74>
 800ad78:	1ae8      	subs	r0, r5, r3
 800ad7a:	3801      	subs	r0, #1
 800ad7c:	183b      	adds	r3, r7, r0
 800ad7e:	e7de      	b.n	800ad3e <__sccl+0x36>

0800ad80 <_strtoul_l.constprop.0>:
 800ad80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad82:	b087      	sub	sp, #28
 800ad84:	9202      	str	r2, [sp, #8]
 800ad86:	4a42      	ldr	r2, [pc, #264]	; (800ae90 <_strtoul_l.constprop.0+0x110>)
 800ad88:	001e      	movs	r6, r3
 800ad8a:	9101      	str	r1, [sp, #4]
 800ad8c:	000b      	movs	r3, r1
 800ad8e:	4694      	mov	ip, r2
 800ad90:	2108      	movs	r1, #8
 800ad92:	9005      	str	r0, [sp, #20]
 800ad94:	001a      	movs	r2, r3
 800ad96:	4660      	mov	r0, ip
 800ad98:	7814      	ldrb	r4, [r2, #0]
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	5d00      	ldrb	r0, [r0, r4]
 800ad9e:	001d      	movs	r5, r3
 800ada0:	0007      	movs	r7, r0
 800ada2:	400f      	ands	r7, r1
 800ada4:	4208      	tst	r0, r1
 800ada6:	d1f5      	bne.n	800ad94 <_strtoul_l.constprop.0+0x14>
 800ada8:	2c2d      	cmp	r4, #45	; 0x2d
 800adaa:	d13a      	bne.n	800ae22 <_strtoul_l.constprop.0+0xa2>
 800adac:	2701      	movs	r7, #1
 800adae:	781c      	ldrb	r4, [r3, #0]
 800adb0:	1c95      	adds	r5, r2, #2
 800adb2:	2e00      	cmp	r6, #0
 800adb4:	d067      	beq.n	800ae86 <_strtoul_l.constprop.0+0x106>
 800adb6:	2e10      	cmp	r6, #16
 800adb8:	d109      	bne.n	800adce <_strtoul_l.constprop.0+0x4e>
 800adba:	2c30      	cmp	r4, #48	; 0x30
 800adbc:	d107      	bne.n	800adce <_strtoul_l.constprop.0+0x4e>
 800adbe:	2220      	movs	r2, #32
 800adc0:	782b      	ldrb	r3, [r5, #0]
 800adc2:	4393      	bics	r3, r2
 800adc4:	2b58      	cmp	r3, #88	; 0x58
 800adc6:	d159      	bne.n	800ae7c <_strtoul_l.constprop.0+0xfc>
 800adc8:	2610      	movs	r6, #16
 800adca:	786c      	ldrb	r4, [r5, #1]
 800adcc:	3502      	adds	r5, #2
 800adce:	2001      	movs	r0, #1
 800add0:	0031      	movs	r1, r6
 800add2:	4240      	negs	r0, r0
 800add4:	f7f5 f9b4 	bl	8000140 <__udivsi3>
 800add8:	9003      	str	r0, [sp, #12]
 800adda:	2001      	movs	r0, #1
 800addc:	0031      	movs	r1, r6
 800adde:	4240      	negs	r0, r0
 800ade0:	f7f5 fa34 	bl	800024c <__aeabi_uidivmod>
 800ade4:	2300      	movs	r3, #0
 800ade6:	9104      	str	r1, [sp, #16]
 800ade8:	2101      	movs	r1, #1
 800adea:	2201      	movs	r2, #1
 800adec:	0018      	movs	r0, r3
 800adee:	468c      	mov	ip, r1
 800adf0:	4252      	negs	r2, r2
 800adf2:	0021      	movs	r1, r4
 800adf4:	3930      	subs	r1, #48	; 0x30
 800adf6:	2909      	cmp	r1, #9
 800adf8:	d818      	bhi.n	800ae2c <_strtoul_l.constprop.0+0xac>
 800adfa:	000c      	movs	r4, r1
 800adfc:	42a6      	cmp	r6, r4
 800adfe:	dd23      	ble.n	800ae48 <_strtoul_l.constprop.0+0xc8>
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	db1f      	blt.n	800ae44 <_strtoul_l.constprop.0+0xc4>
 800ae04:	9903      	ldr	r1, [sp, #12]
 800ae06:	0013      	movs	r3, r2
 800ae08:	4281      	cmp	r1, r0
 800ae0a:	d307      	bcc.n	800ae1c <_strtoul_l.constprop.0+0x9c>
 800ae0c:	d103      	bne.n	800ae16 <_strtoul_l.constprop.0+0x96>
 800ae0e:	9904      	ldr	r1, [sp, #16]
 800ae10:	0013      	movs	r3, r2
 800ae12:	42a1      	cmp	r1, r4
 800ae14:	db02      	blt.n	800ae1c <_strtoul_l.constprop.0+0x9c>
 800ae16:	4663      	mov	r3, ip
 800ae18:	4370      	muls	r0, r6
 800ae1a:	1820      	adds	r0, r4, r0
 800ae1c:	782c      	ldrb	r4, [r5, #0]
 800ae1e:	3501      	adds	r5, #1
 800ae20:	e7e7      	b.n	800adf2 <_strtoul_l.constprop.0+0x72>
 800ae22:	2c2b      	cmp	r4, #43	; 0x2b
 800ae24:	d1c5      	bne.n	800adb2 <_strtoul_l.constprop.0+0x32>
 800ae26:	781c      	ldrb	r4, [r3, #0]
 800ae28:	1c95      	adds	r5, r2, #2
 800ae2a:	e7c2      	b.n	800adb2 <_strtoul_l.constprop.0+0x32>
 800ae2c:	0021      	movs	r1, r4
 800ae2e:	3941      	subs	r1, #65	; 0x41
 800ae30:	2919      	cmp	r1, #25
 800ae32:	d801      	bhi.n	800ae38 <_strtoul_l.constprop.0+0xb8>
 800ae34:	3c37      	subs	r4, #55	; 0x37
 800ae36:	e7e1      	b.n	800adfc <_strtoul_l.constprop.0+0x7c>
 800ae38:	0021      	movs	r1, r4
 800ae3a:	3961      	subs	r1, #97	; 0x61
 800ae3c:	2919      	cmp	r1, #25
 800ae3e:	d803      	bhi.n	800ae48 <_strtoul_l.constprop.0+0xc8>
 800ae40:	3c57      	subs	r4, #87	; 0x57
 800ae42:	e7db      	b.n	800adfc <_strtoul_l.constprop.0+0x7c>
 800ae44:	0013      	movs	r3, r2
 800ae46:	e7e9      	b.n	800ae1c <_strtoul_l.constprop.0+0x9c>
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	da09      	bge.n	800ae60 <_strtoul_l.constprop.0+0xe0>
 800ae4c:	2322      	movs	r3, #34	; 0x22
 800ae4e:	2001      	movs	r0, #1
 800ae50:	9a05      	ldr	r2, [sp, #20]
 800ae52:	4240      	negs	r0, r0
 800ae54:	6013      	str	r3, [r2, #0]
 800ae56:	9b02      	ldr	r3, [sp, #8]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d109      	bne.n	800ae70 <_strtoul_l.constprop.0+0xf0>
 800ae5c:	b007      	add	sp, #28
 800ae5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae60:	2f00      	cmp	r7, #0
 800ae62:	d000      	beq.n	800ae66 <_strtoul_l.constprop.0+0xe6>
 800ae64:	4240      	negs	r0, r0
 800ae66:	9a02      	ldr	r2, [sp, #8]
 800ae68:	2a00      	cmp	r2, #0
 800ae6a:	d0f7      	beq.n	800ae5c <_strtoul_l.constprop.0+0xdc>
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d001      	beq.n	800ae74 <_strtoul_l.constprop.0+0xf4>
 800ae70:	1e6b      	subs	r3, r5, #1
 800ae72:	9301      	str	r3, [sp, #4]
 800ae74:	9b02      	ldr	r3, [sp, #8]
 800ae76:	9a01      	ldr	r2, [sp, #4]
 800ae78:	601a      	str	r2, [r3, #0]
 800ae7a:	e7ef      	b.n	800ae5c <_strtoul_l.constprop.0+0xdc>
 800ae7c:	2430      	movs	r4, #48	; 0x30
 800ae7e:	2e00      	cmp	r6, #0
 800ae80:	d1a5      	bne.n	800adce <_strtoul_l.constprop.0+0x4e>
 800ae82:	3608      	adds	r6, #8
 800ae84:	e7a3      	b.n	800adce <_strtoul_l.constprop.0+0x4e>
 800ae86:	2c30      	cmp	r4, #48	; 0x30
 800ae88:	d099      	beq.n	800adbe <_strtoul_l.constprop.0+0x3e>
 800ae8a:	260a      	movs	r6, #10
 800ae8c:	e79f      	b.n	800adce <_strtoul_l.constprop.0+0x4e>
 800ae8e:	46c0      	nop			; (mov r8, r8)
 800ae90:	0800bcf1 	.word	0x0800bcf1

0800ae94 <_strtoul_r>:
 800ae94:	b510      	push	{r4, lr}
 800ae96:	f7ff ff73 	bl	800ad80 <_strtoul_l.constprop.0>
 800ae9a:	bd10      	pop	{r4, pc}

0800ae9c <__submore>:
 800ae9c:	000b      	movs	r3, r1
 800ae9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aea0:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800aea2:	3344      	adds	r3, #68	; 0x44
 800aea4:	000c      	movs	r4, r1
 800aea6:	429d      	cmp	r5, r3
 800aea8:	d11c      	bne.n	800aee4 <__submore+0x48>
 800aeaa:	2680      	movs	r6, #128	; 0x80
 800aeac:	00f6      	lsls	r6, r6, #3
 800aeae:	0031      	movs	r1, r6
 800aeb0:	f7ff f9ea 	bl	800a288 <_malloc_r>
 800aeb4:	2800      	cmp	r0, #0
 800aeb6:	d102      	bne.n	800aebe <__submore+0x22>
 800aeb8:	2001      	movs	r0, #1
 800aeba:	4240      	negs	r0, r0
 800aebc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aebe:	0023      	movs	r3, r4
 800aec0:	6360      	str	r0, [r4, #52]	; 0x34
 800aec2:	63a6      	str	r6, [r4, #56]	; 0x38
 800aec4:	3346      	adds	r3, #70	; 0x46
 800aec6:	781a      	ldrb	r2, [r3, #0]
 800aec8:	4b10      	ldr	r3, [pc, #64]	; (800af0c <__submore+0x70>)
 800aeca:	54c2      	strb	r2, [r0, r3]
 800aecc:	0023      	movs	r3, r4
 800aece:	3345      	adds	r3, #69	; 0x45
 800aed0:	781a      	ldrb	r2, [r3, #0]
 800aed2:	4b0f      	ldr	r3, [pc, #60]	; (800af10 <__submore+0x74>)
 800aed4:	54c2      	strb	r2, [r0, r3]
 800aed6:	782a      	ldrb	r2, [r5, #0]
 800aed8:	4b0e      	ldr	r3, [pc, #56]	; (800af14 <__submore+0x78>)
 800aeda:	54c2      	strb	r2, [r0, r3]
 800aedc:	18c0      	adds	r0, r0, r3
 800aede:	6020      	str	r0, [r4, #0]
 800aee0:	2000      	movs	r0, #0
 800aee2:	e7eb      	b.n	800aebc <__submore+0x20>
 800aee4:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 800aee6:	0029      	movs	r1, r5
 800aee8:	0073      	lsls	r3, r6, #1
 800aeea:	001a      	movs	r2, r3
 800aeec:	9301      	str	r3, [sp, #4]
 800aeee:	f000 fa43 	bl	800b378 <_realloc_r>
 800aef2:	1e05      	subs	r5, r0, #0
 800aef4:	d0e0      	beq.n	800aeb8 <__submore+0x1c>
 800aef6:	1987      	adds	r7, r0, r6
 800aef8:	0001      	movs	r1, r0
 800aefa:	0032      	movs	r2, r6
 800aefc:	0038      	movs	r0, r7
 800aefe:	f7fe fc58 	bl	80097b2 <memcpy>
 800af02:	9b01      	ldr	r3, [sp, #4]
 800af04:	6027      	str	r7, [r4, #0]
 800af06:	6365      	str	r5, [r4, #52]	; 0x34
 800af08:	63a3      	str	r3, [r4, #56]	; 0x38
 800af0a:	e7e9      	b.n	800aee0 <__submore+0x44>
 800af0c:	000003ff 	.word	0x000003ff
 800af10:	000003fe 	.word	0x000003fe
 800af14:	000003fd 	.word	0x000003fd

0800af18 <__ascii_wctomb>:
 800af18:	0003      	movs	r3, r0
 800af1a:	1e08      	subs	r0, r1, #0
 800af1c:	d005      	beq.n	800af2a <__ascii_wctomb+0x12>
 800af1e:	2aff      	cmp	r2, #255	; 0xff
 800af20:	d904      	bls.n	800af2c <__ascii_wctomb+0x14>
 800af22:	228a      	movs	r2, #138	; 0x8a
 800af24:	2001      	movs	r0, #1
 800af26:	601a      	str	r2, [r3, #0]
 800af28:	4240      	negs	r0, r0
 800af2a:	4770      	bx	lr
 800af2c:	2001      	movs	r0, #1
 800af2e:	700a      	strb	r2, [r1, #0]
 800af30:	e7fb      	b.n	800af2a <__ascii_wctomb+0x12>
	...

0800af34 <__assert_func>:
 800af34:	b530      	push	{r4, r5, lr}
 800af36:	0014      	movs	r4, r2
 800af38:	001a      	movs	r2, r3
 800af3a:	4b09      	ldr	r3, [pc, #36]	; (800af60 <__assert_func+0x2c>)
 800af3c:	0005      	movs	r5, r0
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	b085      	sub	sp, #20
 800af42:	68d8      	ldr	r0, [r3, #12]
 800af44:	4b07      	ldr	r3, [pc, #28]	; (800af64 <__assert_func+0x30>)
 800af46:	2c00      	cmp	r4, #0
 800af48:	d101      	bne.n	800af4e <__assert_func+0x1a>
 800af4a:	4b07      	ldr	r3, [pc, #28]	; (800af68 <__assert_func+0x34>)
 800af4c:	001c      	movs	r4, r3
 800af4e:	9301      	str	r3, [sp, #4]
 800af50:	9100      	str	r1, [sp, #0]
 800af52:	002b      	movs	r3, r5
 800af54:	4905      	ldr	r1, [pc, #20]	; (800af6c <__assert_func+0x38>)
 800af56:	9402      	str	r4, [sp, #8]
 800af58:	f000 f9b8 	bl	800b2cc <fiprintf>
 800af5c:	f000 fc6a 	bl	800b834 <abort>
 800af60:	2000000c 	.word	0x2000000c
 800af64:	0800c080 	.word	0x0800c080
 800af68:	0800c0bb 	.word	0x0800c0bb
 800af6c:	0800c08d 	.word	0x0800c08d

0800af70 <__sflush_r>:
 800af70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af72:	898b      	ldrh	r3, [r1, #12]
 800af74:	0005      	movs	r5, r0
 800af76:	000c      	movs	r4, r1
 800af78:	071a      	lsls	r2, r3, #28
 800af7a:	d45f      	bmi.n	800b03c <__sflush_r+0xcc>
 800af7c:	684a      	ldr	r2, [r1, #4]
 800af7e:	2a00      	cmp	r2, #0
 800af80:	dc04      	bgt.n	800af8c <__sflush_r+0x1c>
 800af82:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800af84:	2a00      	cmp	r2, #0
 800af86:	dc01      	bgt.n	800af8c <__sflush_r+0x1c>
 800af88:	2000      	movs	r0, #0
 800af8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800af8c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800af8e:	2f00      	cmp	r7, #0
 800af90:	d0fa      	beq.n	800af88 <__sflush_r+0x18>
 800af92:	2200      	movs	r2, #0
 800af94:	2180      	movs	r1, #128	; 0x80
 800af96:	682e      	ldr	r6, [r5, #0]
 800af98:	602a      	str	r2, [r5, #0]
 800af9a:	001a      	movs	r2, r3
 800af9c:	0149      	lsls	r1, r1, #5
 800af9e:	400a      	ands	r2, r1
 800afa0:	420b      	tst	r3, r1
 800afa2:	d034      	beq.n	800b00e <__sflush_r+0x9e>
 800afa4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800afa6:	89a3      	ldrh	r3, [r4, #12]
 800afa8:	075b      	lsls	r3, r3, #29
 800afaa:	d506      	bpl.n	800afba <__sflush_r+0x4a>
 800afac:	6863      	ldr	r3, [r4, #4]
 800afae:	1ac0      	subs	r0, r0, r3
 800afb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d001      	beq.n	800afba <__sflush_r+0x4a>
 800afb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800afb8:	1ac0      	subs	r0, r0, r3
 800afba:	0002      	movs	r2, r0
 800afbc:	6a21      	ldr	r1, [r4, #32]
 800afbe:	2300      	movs	r3, #0
 800afc0:	0028      	movs	r0, r5
 800afc2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800afc4:	47b8      	blx	r7
 800afc6:	89a1      	ldrh	r1, [r4, #12]
 800afc8:	1c43      	adds	r3, r0, #1
 800afca:	d106      	bne.n	800afda <__sflush_r+0x6a>
 800afcc:	682b      	ldr	r3, [r5, #0]
 800afce:	2b1d      	cmp	r3, #29
 800afd0:	d831      	bhi.n	800b036 <__sflush_r+0xc6>
 800afd2:	4a2c      	ldr	r2, [pc, #176]	; (800b084 <__sflush_r+0x114>)
 800afd4:	40da      	lsrs	r2, r3
 800afd6:	07d3      	lsls	r3, r2, #31
 800afd8:	d52d      	bpl.n	800b036 <__sflush_r+0xc6>
 800afda:	2300      	movs	r3, #0
 800afdc:	6063      	str	r3, [r4, #4]
 800afde:	6923      	ldr	r3, [r4, #16]
 800afe0:	6023      	str	r3, [r4, #0]
 800afe2:	04cb      	lsls	r3, r1, #19
 800afe4:	d505      	bpl.n	800aff2 <__sflush_r+0x82>
 800afe6:	1c43      	adds	r3, r0, #1
 800afe8:	d102      	bne.n	800aff0 <__sflush_r+0x80>
 800afea:	682b      	ldr	r3, [r5, #0]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d100      	bne.n	800aff2 <__sflush_r+0x82>
 800aff0:	6560      	str	r0, [r4, #84]	; 0x54
 800aff2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aff4:	602e      	str	r6, [r5, #0]
 800aff6:	2900      	cmp	r1, #0
 800aff8:	d0c6      	beq.n	800af88 <__sflush_r+0x18>
 800affa:	0023      	movs	r3, r4
 800affc:	3344      	adds	r3, #68	; 0x44
 800affe:	4299      	cmp	r1, r3
 800b000:	d002      	beq.n	800b008 <__sflush_r+0x98>
 800b002:	0028      	movs	r0, r5
 800b004:	f7ff f8d4 	bl	800a1b0 <_free_r>
 800b008:	2000      	movs	r0, #0
 800b00a:	6360      	str	r0, [r4, #52]	; 0x34
 800b00c:	e7bd      	b.n	800af8a <__sflush_r+0x1a>
 800b00e:	2301      	movs	r3, #1
 800b010:	0028      	movs	r0, r5
 800b012:	6a21      	ldr	r1, [r4, #32]
 800b014:	47b8      	blx	r7
 800b016:	1c43      	adds	r3, r0, #1
 800b018:	d1c5      	bne.n	800afa6 <__sflush_r+0x36>
 800b01a:	682b      	ldr	r3, [r5, #0]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d0c2      	beq.n	800afa6 <__sflush_r+0x36>
 800b020:	2b1d      	cmp	r3, #29
 800b022:	d001      	beq.n	800b028 <__sflush_r+0xb8>
 800b024:	2b16      	cmp	r3, #22
 800b026:	d101      	bne.n	800b02c <__sflush_r+0xbc>
 800b028:	602e      	str	r6, [r5, #0]
 800b02a:	e7ad      	b.n	800af88 <__sflush_r+0x18>
 800b02c:	2340      	movs	r3, #64	; 0x40
 800b02e:	89a2      	ldrh	r2, [r4, #12]
 800b030:	4313      	orrs	r3, r2
 800b032:	81a3      	strh	r3, [r4, #12]
 800b034:	e7a9      	b.n	800af8a <__sflush_r+0x1a>
 800b036:	2340      	movs	r3, #64	; 0x40
 800b038:	430b      	orrs	r3, r1
 800b03a:	e7fa      	b.n	800b032 <__sflush_r+0xc2>
 800b03c:	690f      	ldr	r7, [r1, #16]
 800b03e:	2f00      	cmp	r7, #0
 800b040:	d0a2      	beq.n	800af88 <__sflush_r+0x18>
 800b042:	680a      	ldr	r2, [r1, #0]
 800b044:	600f      	str	r7, [r1, #0]
 800b046:	1bd2      	subs	r2, r2, r7
 800b048:	9201      	str	r2, [sp, #4]
 800b04a:	2200      	movs	r2, #0
 800b04c:	079b      	lsls	r3, r3, #30
 800b04e:	d100      	bne.n	800b052 <__sflush_r+0xe2>
 800b050:	694a      	ldr	r2, [r1, #20]
 800b052:	60a2      	str	r2, [r4, #8]
 800b054:	9b01      	ldr	r3, [sp, #4]
 800b056:	2b00      	cmp	r3, #0
 800b058:	dc00      	bgt.n	800b05c <__sflush_r+0xec>
 800b05a:	e795      	b.n	800af88 <__sflush_r+0x18>
 800b05c:	003a      	movs	r2, r7
 800b05e:	0028      	movs	r0, r5
 800b060:	9b01      	ldr	r3, [sp, #4]
 800b062:	6a21      	ldr	r1, [r4, #32]
 800b064:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b066:	47b0      	blx	r6
 800b068:	2800      	cmp	r0, #0
 800b06a:	dc06      	bgt.n	800b07a <__sflush_r+0x10a>
 800b06c:	2340      	movs	r3, #64	; 0x40
 800b06e:	2001      	movs	r0, #1
 800b070:	89a2      	ldrh	r2, [r4, #12]
 800b072:	4240      	negs	r0, r0
 800b074:	4313      	orrs	r3, r2
 800b076:	81a3      	strh	r3, [r4, #12]
 800b078:	e787      	b.n	800af8a <__sflush_r+0x1a>
 800b07a:	9b01      	ldr	r3, [sp, #4]
 800b07c:	183f      	adds	r7, r7, r0
 800b07e:	1a1b      	subs	r3, r3, r0
 800b080:	9301      	str	r3, [sp, #4]
 800b082:	e7e7      	b.n	800b054 <__sflush_r+0xe4>
 800b084:	20400001 	.word	0x20400001

0800b088 <_fflush_r>:
 800b088:	690b      	ldr	r3, [r1, #16]
 800b08a:	b570      	push	{r4, r5, r6, lr}
 800b08c:	0005      	movs	r5, r0
 800b08e:	000c      	movs	r4, r1
 800b090:	2b00      	cmp	r3, #0
 800b092:	d102      	bne.n	800b09a <_fflush_r+0x12>
 800b094:	2500      	movs	r5, #0
 800b096:	0028      	movs	r0, r5
 800b098:	bd70      	pop	{r4, r5, r6, pc}
 800b09a:	2800      	cmp	r0, #0
 800b09c:	d004      	beq.n	800b0a8 <_fflush_r+0x20>
 800b09e:	6983      	ldr	r3, [r0, #24]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d101      	bne.n	800b0a8 <_fflush_r+0x20>
 800b0a4:	f000 f892 	bl	800b1cc <__sinit>
 800b0a8:	4b14      	ldr	r3, [pc, #80]	; (800b0fc <_fflush_r+0x74>)
 800b0aa:	429c      	cmp	r4, r3
 800b0ac:	d11b      	bne.n	800b0e6 <_fflush_r+0x5e>
 800b0ae:	686c      	ldr	r4, [r5, #4]
 800b0b0:	220c      	movs	r2, #12
 800b0b2:	5ea3      	ldrsh	r3, [r4, r2]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d0ed      	beq.n	800b094 <_fflush_r+0xc>
 800b0b8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b0ba:	07d2      	lsls	r2, r2, #31
 800b0bc:	d404      	bmi.n	800b0c8 <_fflush_r+0x40>
 800b0be:	059b      	lsls	r3, r3, #22
 800b0c0:	d402      	bmi.n	800b0c8 <_fflush_r+0x40>
 800b0c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0c4:	f000 f933 	bl	800b32e <__retarget_lock_acquire_recursive>
 800b0c8:	0028      	movs	r0, r5
 800b0ca:	0021      	movs	r1, r4
 800b0cc:	f7ff ff50 	bl	800af70 <__sflush_r>
 800b0d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0d2:	0005      	movs	r5, r0
 800b0d4:	07db      	lsls	r3, r3, #31
 800b0d6:	d4de      	bmi.n	800b096 <_fflush_r+0xe>
 800b0d8:	89a3      	ldrh	r3, [r4, #12]
 800b0da:	059b      	lsls	r3, r3, #22
 800b0dc:	d4db      	bmi.n	800b096 <_fflush_r+0xe>
 800b0de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0e0:	f000 f926 	bl	800b330 <__retarget_lock_release_recursive>
 800b0e4:	e7d7      	b.n	800b096 <_fflush_r+0xe>
 800b0e6:	4b06      	ldr	r3, [pc, #24]	; (800b100 <_fflush_r+0x78>)
 800b0e8:	429c      	cmp	r4, r3
 800b0ea:	d101      	bne.n	800b0f0 <_fflush_r+0x68>
 800b0ec:	68ac      	ldr	r4, [r5, #8]
 800b0ee:	e7df      	b.n	800b0b0 <_fflush_r+0x28>
 800b0f0:	4b04      	ldr	r3, [pc, #16]	; (800b104 <_fflush_r+0x7c>)
 800b0f2:	429c      	cmp	r4, r3
 800b0f4:	d1dc      	bne.n	800b0b0 <_fflush_r+0x28>
 800b0f6:	68ec      	ldr	r4, [r5, #12]
 800b0f8:	e7da      	b.n	800b0b0 <_fflush_r+0x28>
 800b0fa:	46c0      	nop			; (mov r8, r8)
 800b0fc:	0800c0dc 	.word	0x0800c0dc
 800b100:	0800c0fc 	.word	0x0800c0fc
 800b104:	0800c0bc 	.word	0x0800c0bc

0800b108 <std>:
 800b108:	2300      	movs	r3, #0
 800b10a:	b510      	push	{r4, lr}
 800b10c:	0004      	movs	r4, r0
 800b10e:	6003      	str	r3, [r0, #0]
 800b110:	6043      	str	r3, [r0, #4]
 800b112:	6083      	str	r3, [r0, #8]
 800b114:	8181      	strh	r1, [r0, #12]
 800b116:	6643      	str	r3, [r0, #100]	; 0x64
 800b118:	0019      	movs	r1, r3
 800b11a:	81c2      	strh	r2, [r0, #14]
 800b11c:	6103      	str	r3, [r0, #16]
 800b11e:	6143      	str	r3, [r0, #20]
 800b120:	6183      	str	r3, [r0, #24]
 800b122:	2208      	movs	r2, #8
 800b124:	305c      	adds	r0, #92	; 0x5c
 800b126:	f7fb fad5 	bl	80066d4 <memset>
 800b12a:	4b05      	ldr	r3, [pc, #20]	; (800b140 <std+0x38>)
 800b12c:	6224      	str	r4, [r4, #32]
 800b12e:	6263      	str	r3, [r4, #36]	; 0x24
 800b130:	4b04      	ldr	r3, [pc, #16]	; (800b144 <std+0x3c>)
 800b132:	62a3      	str	r3, [r4, #40]	; 0x28
 800b134:	4b04      	ldr	r3, [pc, #16]	; (800b148 <std+0x40>)
 800b136:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b138:	4b04      	ldr	r3, [pc, #16]	; (800b14c <std+0x44>)
 800b13a:	6323      	str	r3, [r4, #48]	; 0x30
 800b13c:	bd10      	pop	{r4, pc}
 800b13e:	46c0      	nop			; (mov r8, r8)
 800b140:	08007469 	.word	0x08007469
 800b144:	08007495 	.word	0x08007495
 800b148:	080074cd 	.word	0x080074cd
 800b14c:	080074f9 	.word	0x080074f9

0800b150 <_cleanup_r>:
 800b150:	b510      	push	{r4, lr}
 800b152:	4902      	ldr	r1, [pc, #8]	; (800b15c <_cleanup_r+0xc>)
 800b154:	f000 f8ca 	bl	800b2ec <_fwalk_reent>
 800b158:	bd10      	pop	{r4, pc}
 800b15a:	46c0      	nop			; (mov r8, r8)
 800b15c:	0800b089 	.word	0x0800b089

0800b160 <__sfmoreglue>:
 800b160:	b570      	push	{r4, r5, r6, lr}
 800b162:	2568      	movs	r5, #104	; 0x68
 800b164:	1e4a      	subs	r2, r1, #1
 800b166:	4355      	muls	r5, r2
 800b168:	000e      	movs	r6, r1
 800b16a:	0029      	movs	r1, r5
 800b16c:	3174      	adds	r1, #116	; 0x74
 800b16e:	f7ff f88b 	bl	800a288 <_malloc_r>
 800b172:	1e04      	subs	r4, r0, #0
 800b174:	d008      	beq.n	800b188 <__sfmoreglue+0x28>
 800b176:	2100      	movs	r1, #0
 800b178:	002a      	movs	r2, r5
 800b17a:	6001      	str	r1, [r0, #0]
 800b17c:	6046      	str	r6, [r0, #4]
 800b17e:	300c      	adds	r0, #12
 800b180:	60a0      	str	r0, [r4, #8]
 800b182:	3268      	adds	r2, #104	; 0x68
 800b184:	f7fb faa6 	bl	80066d4 <memset>
 800b188:	0020      	movs	r0, r4
 800b18a:	bd70      	pop	{r4, r5, r6, pc}

0800b18c <__sfp_lock_acquire>:
 800b18c:	b510      	push	{r4, lr}
 800b18e:	4802      	ldr	r0, [pc, #8]	; (800b198 <__sfp_lock_acquire+0xc>)
 800b190:	f000 f8cd 	bl	800b32e <__retarget_lock_acquire_recursive>
 800b194:	bd10      	pop	{r4, pc}
 800b196:	46c0      	nop			; (mov r8, r8)
 800b198:	20000401 	.word	0x20000401

0800b19c <__sfp_lock_release>:
 800b19c:	b510      	push	{r4, lr}
 800b19e:	4802      	ldr	r0, [pc, #8]	; (800b1a8 <__sfp_lock_release+0xc>)
 800b1a0:	f000 f8c6 	bl	800b330 <__retarget_lock_release_recursive>
 800b1a4:	bd10      	pop	{r4, pc}
 800b1a6:	46c0      	nop			; (mov r8, r8)
 800b1a8:	20000401 	.word	0x20000401

0800b1ac <__sinit_lock_acquire>:
 800b1ac:	b510      	push	{r4, lr}
 800b1ae:	4802      	ldr	r0, [pc, #8]	; (800b1b8 <__sinit_lock_acquire+0xc>)
 800b1b0:	f000 f8bd 	bl	800b32e <__retarget_lock_acquire_recursive>
 800b1b4:	bd10      	pop	{r4, pc}
 800b1b6:	46c0      	nop			; (mov r8, r8)
 800b1b8:	20000402 	.word	0x20000402

0800b1bc <__sinit_lock_release>:
 800b1bc:	b510      	push	{r4, lr}
 800b1be:	4802      	ldr	r0, [pc, #8]	; (800b1c8 <__sinit_lock_release+0xc>)
 800b1c0:	f000 f8b6 	bl	800b330 <__retarget_lock_release_recursive>
 800b1c4:	bd10      	pop	{r4, pc}
 800b1c6:	46c0      	nop			; (mov r8, r8)
 800b1c8:	20000402 	.word	0x20000402

0800b1cc <__sinit>:
 800b1cc:	b513      	push	{r0, r1, r4, lr}
 800b1ce:	0004      	movs	r4, r0
 800b1d0:	f7ff ffec 	bl	800b1ac <__sinit_lock_acquire>
 800b1d4:	69a3      	ldr	r3, [r4, #24]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d002      	beq.n	800b1e0 <__sinit+0x14>
 800b1da:	f7ff ffef 	bl	800b1bc <__sinit_lock_release>
 800b1de:	bd13      	pop	{r0, r1, r4, pc}
 800b1e0:	64a3      	str	r3, [r4, #72]	; 0x48
 800b1e2:	64e3      	str	r3, [r4, #76]	; 0x4c
 800b1e4:	6523      	str	r3, [r4, #80]	; 0x50
 800b1e6:	4b13      	ldr	r3, [pc, #76]	; (800b234 <__sinit+0x68>)
 800b1e8:	4a13      	ldr	r2, [pc, #76]	; (800b238 <__sinit+0x6c>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	62a2      	str	r2, [r4, #40]	; 0x28
 800b1ee:	9301      	str	r3, [sp, #4]
 800b1f0:	42a3      	cmp	r3, r4
 800b1f2:	d101      	bne.n	800b1f8 <__sinit+0x2c>
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	61a3      	str	r3, [r4, #24]
 800b1f8:	0020      	movs	r0, r4
 800b1fa:	f000 f81f 	bl	800b23c <__sfp>
 800b1fe:	6060      	str	r0, [r4, #4]
 800b200:	0020      	movs	r0, r4
 800b202:	f000 f81b 	bl	800b23c <__sfp>
 800b206:	60a0      	str	r0, [r4, #8]
 800b208:	0020      	movs	r0, r4
 800b20a:	f000 f817 	bl	800b23c <__sfp>
 800b20e:	2200      	movs	r2, #0
 800b210:	2104      	movs	r1, #4
 800b212:	60e0      	str	r0, [r4, #12]
 800b214:	6860      	ldr	r0, [r4, #4]
 800b216:	f7ff ff77 	bl	800b108 <std>
 800b21a:	2201      	movs	r2, #1
 800b21c:	2109      	movs	r1, #9
 800b21e:	68a0      	ldr	r0, [r4, #8]
 800b220:	f7ff ff72 	bl	800b108 <std>
 800b224:	2202      	movs	r2, #2
 800b226:	2112      	movs	r1, #18
 800b228:	68e0      	ldr	r0, [r4, #12]
 800b22a:	f7ff ff6d 	bl	800b108 <std>
 800b22e:	2301      	movs	r3, #1
 800b230:	61a3      	str	r3, [r4, #24]
 800b232:	e7d2      	b.n	800b1da <__sinit+0xe>
 800b234:	0800bc64 	.word	0x0800bc64
 800b238:	0800b151 	.word	0x0800b151

0800b23c <__sfp>:
 800b23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b23e:	0007      	movs	r7, r0
 800b240:	f7ff ffa4 	bl	800b18c <__sfp_lock_acquire>
 800b244:	4b1f      	ldr	r3, [pc, #124]	; (800b2c4 <__sfp+0x88>)
 800b246:	681e      	ldr	r6, [r3, #0]
 800b248:	69b3      	ldr	r3, [r6, #24]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d102      	bne.n	800b254 <__sfp+0x18>
 800b24e:	0030      	movs	r0, r6
 800b250:	f7ff ffbc 	bl	800b1cc <__sinit>
 800b254:	3648      	adds	r6, #72	; 0x48
 800b256:	68b4      	ldr	r4, [r6, #8]
 800b258:	6873      	ldr	r3, [r6, #4]
 800b25a:	3b01      	subs	r3, #1
 800b25c:	d504      	bpl.n	800b268 <__sfp+0x2c>
 800b25e:	6833      	ldr	r3, [r6, #0]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d022      	beq.n	800b2aa <__sfp+0x6e>
 800b264:	6836      	ldr	r6, [r6, #0]
 800b266:	e7f6      	b.n	800b256 <__sfp+0x1a>
 800b268:	220c      	movs	r2, #12
 800b26a:	5ea5      	ldrsh	r5, [r4, r2]
 800b26c:	2d00      	cmp	r5, #0
 800b26e:	d11a      	bne.n	800b2a6 <__sfp+0x6a>
 800b270:	0020      	movs	r0, r4
 800b272:	4b15      	ldr	r3, [pc, #84]	; (800b2c8 <__sfp+0x8c>)
 800b274:	3058      	adds	r0, #88	; 0x58
 800b276:	60e3      	str	r3, [r4, #12]
 800b278:	6665      	str	r5, [r4, #100]	; 0x64
 800b27a:	f000 f857 	bl	800b32c <__retarget_lock_init_recursive>
 800b27e:	f7ff ff8d 	bl	800b19c <__sfp_lock_release>
 800b282:	0020      	movs	r0, r4
 800b284:	2208      	movs	r2, #8
 800b286:	0029      	movs	r1, r5
 800b288:	6025      	str	r5, [r4, #0]
 800b28a:	60a5      	str	r5, [r4, #8]
 800b28c:	6065      	str	r5, [r4, #4]
 800b28e:	6125      	str	r5, [r4, #16]
 800b290:	6165      	str	r5, [r4, #20]
 800b292:	61a5      	str	r5, [r4, #24]
 800b294:	305c      	adds	r0, #92	; 0x5c
 800b296:	f7fb fa1d 	bl	80066d4 <memset>
 800b29a:	6365      	str	r5, [r4, #52]	; 0x34
 800b29c:	63a5      	str	r5, [r4, #56]	; 0x38
 800b29e:	64a5      	str	r5, [r4, #72]	; 0x48
 800b2a0:	64e5      	str	r5, [r4, #76]	; 0x4c
 800b2a2:	0020      	movs	r0, r4
 800b2a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2a6:	3468      	adds	r4, #104	; 0x68
 800b2a8:	e7d7      	b.n	800b25a <__sfp+0x1e>
 800b2aa:	2104      	movs	r1, #4
 800b2ac:	0038      	movs	r0, r7
 800b2ae:	f7ff ff57 	bl	800b160 <__sfmoreglue>
 800b2b2:	1e04      	subs	r4, r0, #0
 800b2b4:	6030      	str	r0, [r6, #0]
 800b2b6:	d1d5      	bne.n	800b264 <__sfp+0x28>
 800b2b8:	f7ff ff70 	bl	800b19c <__sfp_lock_release>
 800b2bc:	230c      	movs	r3, #12
 800b2be:	603b      	str	r3, [r7, #0]
 800b2c0:	e7ef      	b.n	800b2a2 <__sfp+0x66>
 800b2c2:	46c0      	nop			; (mov r8, r8)
 800b2c4:	0800bc64 	.word	0x0800bc64
 800b2c8:	ffff0001 	.word	0xffff0001

0800b2cc <fiprintf>:
 800b2cc:	b40e      	push	{r1, r2, r3}
 800b2ce:	b503      	push	{r0, r1, lr}
 800b2d0:	0001      	movs	r1, r0
 800b2d2:	ab03      	add	r3, sp, #12
 800b2d4:	4804      	ldr	r0, [pc, #16]	; (800b2e8 <fiprintf+0x1c>)
 800b2d6:	cb04      	ldmia	r3!, {r2}
 800b2d8:	6800      	ldr	r0, [r0, #0]
 800b2da:	9301      	str	r3, [sp, #4]
 800b2dc:	f000 f8a2 	bl	800b424 <_vfiprintf_r>
 800b2e0:	b002      	add	sp, #8
 800b2e2:	bc08      	pop	{r3}
 800b2e4:	b003      	add	sp, #12
 800b2e6:	4718      	bx	r3
 800b2e8:	2000000c 	.word	0x2000000c

0800b2ec <_fwalk_reent>:
 800b2ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2ee:	0004      	movs	r4, r0
 800b2f0:	0006      	movs	r6, r0
 800b2f2:	2700      	movs	r7, #0
 800b2f4:	9101      	str	r1, [sp, #4]
 800b2f6:	3448      	adds	r4, #72	; 0x48
 800b2f8:	6863      	ldr	r3, [r4, #4]
 800b2fa:	68a5      	ldr	r5, [r4, #8]
 800b2fc:	9300      	str	r3, [sp, #0]
 800b2fe:	9b00      	ldr	r3, [sp, #0]
 800b300:	3b01      	subs	r3, #1
 800b302:	9300      	str	r3, [sp, #0]
 800b304:	d504      	bpl.n	800b310 <_fwalk_reent+0x24>
 800b306:	6824      	ldr	r4, [r4, #0]
 800b308:	2c00      	cmp	r4, #0
 800b30a:	d1f5      	bne.n	800b2f8 <_fwalk_reent+0xc>
 800b30c:	0038      	movs	r0, r7
 800b30e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b310:	89ab      	ldrh	r3, [r5, #12]
 800b312:	2b01      	cmp	r3, #1
 800b314:	d908      	bls.n	800b328 <_fwalk_reent+0x3c>
 800b316:	220e      	movs	r2, #14
 800b318:	5eab      	ldrsh	r3, [r5, r2]
 800b31a:	3301      	adds	r3, #1
 800b31c:	d004      	beq.n	800b328 <_fwalk_reent+0x3c>
 800b31e:	0029      	movs	r1, r5
 800b320:	0030      	movs	r0, r6
 800b322:	9b01      	ldr	r3, [sp, #4]
 800b324:	4798      	blx	r3
 800b326:	4307      	orrs	r7, r0
 800b328:	3568      	adds	r5, #104	; 0x68
 800b32a:	e7e8      	b.n	800b2fe <_fwalk_reent+0x12>

0800b32c <__retarget_lock_init_recursive>:
 800b32c:	4770      	bx	lr

0800b32e <__retarget_lock_acquire_recursive>:
 800b32e:	4770      	bx	lr

0800b330 <__retarget_lock_release_recursive>:
 800b330:	4770      	bx	lr

0800b332 <memmove>:
 800b332:	b510      	push	{r4, lr}
 800b334:	4288      	cmp	r0, r1
 800b336:	d902      	bls.n	800b33e <memmove+0xc>
 800b338:	188b      	adds	r3, r1, r2
 800b33a:	4298      	cmp	r0, r3
 800b33c:	d303      	bcc.n	800b346 <memmove+0x14>
 800b33e:	2300      	movs	r3, #0
 800b340:	e007      	b.n	800b352 <memmove+0x20>
 800b342:	5c8b      	ldrb	r3, [r1, r2]
 800b344:	5483      	strb	r3, [r0, r2]
 800b346:	3a01      	subs	r2, #1
 800b348:	d2fb      	bcs.n	800b342 <memmove+0x10>
 800b34a:	bd10      	pop	{r4, pc}
 800b34c:	5ccc      	ldrb	r4, [r1, r3]
 800b34e:	54c4      	strb	r4, [r0, r3]
 800b350:	3301      	adds	r3, #1
 800b352:	429a      	cmp	r2, r3
 800b354:	d1fa      	bne.n	800b34c <memmove+0x1a>
 800b356:	e7f8      	b.n	800b34a <memmove+0x18>

0800b358 <__malloc_lock>:
 800b358:	b510      	push	{r4, lr}
 800b35a:	4802      	ldr	r0, [pc, #8]	; (800b364 <__malloc_lock+0xc>)
 800b35c:	f7ff ffe7 	bl	800b32e <__retarget_lock_acquire_recursive>
 800b360:	bd10      	pop	{r4, pc}
 800b362:	46c0      	nop			; (mov r8, r8)
 800b364:	20000400 	.word	0x20000400

0800b368 <__malloc_unlock>:
 800b368:	b510      	push	{r4, lr}
 800b36a:	4802      	ldr	r0, [pc, #8]	; (800b374 <__malloc_unlock+0xc>)
 800b36c:	f7ff ffe0 	bl	800b330 <__retarget_lock_release_recursive>
 800b370:	bd10      	pop	{r4, pc}
 800b372:	46c0      	nop			; (mov r8, r8)
 800b374:	20000400 	.word	0x20000400

0800b378 <_realloc_r>:
 800b378:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b37a:	0007      	movs	r7, r0
 800b37c:	000e      	movs	r6, r1
 800b37e:	0014      	movs	r4, r2
 800b380:	2900      	cmp	r1, #0
 800b382:	d105      	bne.n	800b390 <_realloc_r+0x18>
 800b384:	0011      	movs	r1, r2
 800b386:	f7fe ff7f 	bl	800a288 <_malloc_r>
 800b38a:	0005      	movs	r5, r0
 800b38c:	0028      	movs	r0, r5
 800b38e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b390:	2a00      	cmp	r2, #0
 800b392:	d103      	bne.n	800b39c <_realloc_r+0x24>
 800b394:	f7fe ff0c 	bl	800a1b0 <_free_r>
 800b398:	0025      	movs	r5, r4
 800b39a:	e7f7      	b.n	800b38c <_realloc_r+0x14>
 800b39c:	f000 fabe 	bl	800b91c <_malloc_usable_size_r>
 800b3a0:	9001      	str	r0, [sp, #4]
 800b3a2:	4284      	cmp	r4, r0
 800b3a4:	d803      	bhi.n	800b3ae <_realloc_r+0x36>
 800b3a6:	0035      	movs	r5, r6
 800b3a8:	0843      	lsrs	r3, r0, #1
 800b3aa:	42a3      	cmp	r3, r4
 800b3ac:	d3ee      	bcc.n	800b38c <_realloc_r+0x14>
 800b3ae:	0021      	movs	r1, r4
 800b3b0:	0038      	movs	r0, r7
 800b3b2:	f7fe ff69 	bl	800a288 <_malloc_r>
 800b3b6:	1e05      	subs	r5, r0, #0
 800b3b8:	d0e8      	beq.n	800b38c <_realloc_r+0x14>
 800b3ba:	9b01      	ldr	r3, [sp, #4]
 800b3bc:	0022      	movs	r2, r4
 800b3be:	429c      	cmp	r4, r3
 800b3c0:	d900      	bls.n	800b3c4 <_realloc_r+0x4c>
 800b3c2:	001a      	movs	r2, r3
 800b3c4:	0031      	movs	r1, r6
 800b3c6:	0028      	movs	r0, r5
 800b3c8:	f7fe f9f3 	bl	80097b2 <memcpy>
 800b3cc:	0031      	movs	r1, r6
 800b3ce:	0038      	movs	r0, r7
 800b3d0:	f7fe feee 	bl	800a1b0 <_free_r>
 800b3d4:	e7da      	b.n	800b38c <_realloc_r+0x14>

0800b3d6 <__sfputc_r>:
 800b3d6:	6893      	ldr	r3, [r2, #8]
 800b3d8:	b510      	push	{r4, lr}
 800b3da:	3b01      	subs	r3, #1
 800b3dc:	6093      	str	r3, [r2, #8]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	da04      	bge.n	800b3ec <__sfputc_r+0x16>
 800b3e2:	6994      	ldr	r4, [r2, #24]
 800b3e4:	42a3      	cmp	r3, r4
 800b3e6:	db07      	blt.n	800b3f8 <__sfputc_r+0x22>
 800b3e8:	290a      	cmp	r1, #10
 800b3ea:	d005      	beq.n	800b3f8 <__sfputc_r+0x22>
 800b3ec:	6813      	ldr	r3, [r2, #0]
 800b3ee:	1c58      	adds	r0, r3, #1
 800b3f0:	6010      	str	r0, [r2, #0]
 800b3f2:	7019      	strb	r1, [r3, #0]
 800b3f4:	0008      	movs	r0, r1
 800b3f6:	bd10      	pop	{r4, pc}
 800b3f8:	f000 f94e 	bl	800b698 <__swbuf_r>
 800b3fc:	0001      	movs	r1, r0
 800b3fe:	e7f9      	b.n	800b3f4 <__sfputc_r+0x1e>

0800b400 <__sfputs_r>:
 800b400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b402:	0006      	movs	r6, r0
 800b404:	000f      	movs	r7, r1
 800b406:	0014      	movs	r4, r2
 800b408:	18d5      	adds	r5, r2, r3
 800b40a:	42ac      	cmp	r4, r5
 800b40c:	d101      	bne.n	800b412 <__sfputs_r+0x12>
 800b40e:	2000      	movs	r0, #0
 800b410:	e007      	b.n	800b422 <__sfputs_r+0x22>
 800b412:	7821      	ldrb	r1, [r4, #0]
 800b414:	003a      	movs	r2, r7
 800b416:	0030      	movs	r0, r6
 800b418:	f7ff ffdd 	bl	800b3d6 <__sfputc_r>
 800b41c:	3401      	adds	r4, #1
 800b41e:	1c43      	adds	r3, r0, #1
 800b420:	d1f3      	bne.n	800b40a <__sfputs_r+0xa>
 800b422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b424 <_vfiprintf_r>:
 800b424:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b426:	b0a1      	sub	sp, #132	; 0x84
 800b428:	0006      	movs	r6, r0
 800b42a:	000c      	movs	r4, r1
 800b42c:	001f      	movs	r7, r3
 800b42e:	9203      	str	r2, [sp, #12]
 800b430:	2800      	cmp	r0, #0
 800b432:	d004      	beq.n	800b43e <_vfiprintf_r+0x1a>
 800b434:	6983      	ldr	r3, [r0, #24]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d101      	bne.n	800b43e <_vfiprintf_r+0x1a>
 800b43a:	f7ff fec7 	bl	800b1cc <__sinit>
 800b43e:	4b8e      	ldr	r3, [pc, #568]	; (800b678 <_vfiprintf_r+0x254>)
 800b440:	429c      	cmp	r4, r3
 800b442:	d11c      	bne.n	800b47e <_vfiprintf_r+0x5a>
 800b444:	6874      	ldr	r4, [r6, #4]
 800b446:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b448:	07db      	lsls	r3, r3, #31
 800b44a:	d405      	bmi.n	800b458 <_vfiprintf_r+0x34>
 800b44c:	89a3      	ldrh	r3, [r4, #12]
 800b44e:	059b      	lsls	r3, r3, #22
 800b450:	d402      	bmi.n	800b458 <_vfiprintf_r+0x34>
 800b452:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b454:	f7ff ff6b 	bl	800b32e <__retarget_lock_acquire_recursive>
 800b458:	89a3      	ldrh	r3, [r4, #12]
 800b45a:	071b      	lsls	r3, r3, #28
 800b45c:	d502      	bpl.n	800b464 <_vfiprintf_r+0x40>
 800b45e:	6923      	ldr	r3, [r4, #16]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d11d      	bne.n	800b4a0 <_vfiprintf_r+0x7c>
 800b464:	0021      	movs	r1, r4
 800b466:	0030      	movs	r0, r6
 800b468:	f000 f96c 	bl	800b744 <__swsetup_r>
 800b46c:	2800      	cmp	r0, #0
 800b46e:	d017      	beq.n	800b4a0 <_vfiprintf_r+0x7c>
 800b470:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b472:	07db      	lsls	r3, r3, #31
 800b474:	d50d      	bpl.n	800b492 <_vfiprintf_r+0x6e>
 800b476:	2001      	movs	r0, #1
 800b478:	4240      	negs	r0, r0
 800b47a:	b021      	add	sp, #132	; 0x84
 800b47c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b47e:	4b7f      	ldr	r3, [pc, #508]	; (800b67c <_vfiprintf_r+0x258>)
 800b480:	429c      	cmp	r4, r3
 800b482:	d101      	bne.n	800b488 <_vfiprintf_r+0x64>
 800b484:	68b4      	ldr	r4, [r6, #8]
 800b486:	e7de      	b.n	800b446 <_vfiprintf_r+0x22>
 800b488:	4b7d      	ldr	r3, [pc, #500]	; (800b680 <_vfiprintf_r+0x25c>)
 800b48a:	429c      	cmp	r4, r3
 800b48c:	d1db      	bne.n	800b446 <_vfiprintf_r+0x22>
 800b48e:	68f4      	ldr	r4, [r6, #12]
 800b490:	e7d9      	b.n	800b446 <_vfiprintf_r+0x22>
 800b492:	89a3      	ldrh	r3, [r4, #12]
 800b494:	059b      	lsls	r3, r3, #22
 800b496:	d4ee      	bmi.n	800b476 <_vfiprintf_r+0x52>
 800b498:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b49a:	f7ff ff49 	bl	800b330 <__retarget_lock_release_recursive>
 800b49e:	e7ea      	b.n	800b476 <_vfiprintf_r+0x52>
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	ad08      	add	r5, sp, #32
 800b4a4:	616b      	str	r3, [r5, #20]
 800b4a6:	3320      	adds	r3, #32
 800b4a8:	766b      	strb	r3, [r5, #25]
 800b4aa:	3310      	adds	r3, #16
 800b4ac:	76ab      	strb	r3, [r5, #26]
 800b4ae:	9707      	str	r7, [sp, #28]
 800b4b0:	9f03      	ldr	r7, [sp, #12]
 800b4b2:	783b      	ldrb	r3, [r7, #0]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d001      	beq.n	800b4bc <_vfiprintf_r+0x98>
 800b4b8:	2b25      	cmp	r3, #37	; 0x25
 800b4ba:	d14e      	bne.n	800b55a <_vfiprintf_r+0x136>
 800b4bc:	9b03      	ldr	r3, [sp, #12]
 800b4be:	1afb      	subs	r3, r7, r3
 800b4c0:	9305      	str	r3, [sp, #20]
 800b4c2:	9b03      	ldr	r3, [sp, #12]
 800b4c4:	429f      	cmp	r7, r3
 800b4c6:	d00d      	beq.n	800b4e4 <_vfiprintf_r+0xc0>
 800b4c8:	9b05      	ldr	r3, [sp, #20]
 800b4ca:	0021      	movs	r1, r4
 800b4cc:	0030      	movs	r0, r6
 800b4ce:	9a03      	ldr	r2, [sp, #12]
 800b4d0:	f7ff ff96 	bl	800b400 <__sfputs_r>
 800b4d4:	1c43      	adds	r3, r0, #1
 800b4d6:	d100      	bne.n	800b4da <_vfiprintf_r+0xb6>
 800b4d8:	e0b5      	b.n	800b646 <_vfiprintf_r+0x222>
 800b4da:	696a      	ldr	r2, [r5, #20]
 800b4dc:	9b05      	ldr	r3, [sp, #20]
 800b4de:	4694      	mov	ip, r2
 800b4e0:	4463      	add	r3, ip
 800b4e2:	616b      	str	r3, [r5, #20]
 800b4e4:	783b      	ldrb	r3, [r7, #0]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d100      	bne.n	800b4ec <_vfiprintf_r+0xc8>
 800b4ea:	e0ac      	b.n	800b646 <_vfiprintf_r+0x222>
 800b4ec:	2201      	movs	r2, #1
 800b4ee:	1c7b      	adds	r3, r7, #1
 800b4f0:	9303      	str	r3, [sp, #12]
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	4252      	negs	r2, r2
 800b4f6:	606a      	str	r2, [r5, #4]
 800b4f8:	a904      	add	r1, sp, #16
 800b4fa:	3254      	adds	r2, #84	; 0x54
 800b4fc:	1852      	adds	r2, r2, r1
 800b4fe:	602b      	str	r3, [r5, #0]
 800b500:	60eb      	str	r3, [r5, #12]
 800b502:	60ab      	str	r3, [r5, #8]
 800b504:	7013      	strb	r3, [r2, #0]
 800b506:	65ab      	str	r3, [r5, #88]	; 0x58
 800b508:	9b03      	ldr	r3, [sp, #12]
 800b50a:	2205      	movs	r2, #5
 800b50c:	7819      	ldrb	r1, [r3, #0]
 800b50e:	485d      	ldr	r0, [pc, #372]	; (800b684 <_vfiprintf_r+0x260>)
 800b510:	f7fe f944 	bl	800979c <memchr>
 800b514:	9b03      	ldr	r3, [sp, #12]
 800b516:	1c5f      	adds	r7, r3, #1
 800b518:	2800      	cmp	r0, #0
 800b51a:	d120      	bne.n	800b55e <_vfiprintf_r+0x13a>
 800b51c:	682a      	ldr	r2, [r5, #0]
 800b51e:	06d3      	lsls	r3, r2, #27
 800b520:	d504      	bpl.n	800b52c <_vfiprintf_r+0x108>
 800b522:	2353      	movs	r3, #83	; 0x53
 800b524:	a904      	add	r1, sp, #16
 800b526:	185b      	adds	r3, r3, r1
 800b528:	2120      	movs	r1, #32
 800b52a:	7019      	strb	r1, [r3, #0]
 800b52c:	0713      	lsls	r3, r2, #28
 800b52e:	d504      	bpl.n	800b53a <_vfiprintf_r+0x116>
 800b530:	2353      	movs	r3, #83	; 0x53
 800b532:	a904      	add	r1, sp, #16
 800b534:	185b      	adds	r3, r3, r1
 800b536:	212b      	movs	r1, #43	; 0x2b
 800b538:	7019      	strb	r1, [r3, #0]
 800b53a:	9b03      	ldr	r3, [sp, #12]
 800b53c:	781b      	ldrb	r3, [r3, #0]
 800b53e:	2b2a      	cmp	r3, #42	; 0x2a
 800b540:	d016      	beq.n	800b570 <_vfiprintf_r+0x14c>
 800b542:	2100      	movs	r1, #0
 800b544:	68eb      	ldr	r3, [r5, #12]
 800b546:	9f03      	ldr	r7, [sp, #12]
 800b548:	783a      	ldrb	r2, [r7, #0]
 800b54a:	1c78      	adds	r0, r7, #1
 800b54c:	3a30      	subs	r2, #48	; 0x30
 800b54e:	4684      	mov	ip, r0
 800b550:	2a09      	cmp	r2, #9
 800b552:	d94f      	bls.n	800b5f4 <_vfiprintf_r+0x1d0>
 800b554:	2900      	cmp	r1, #0
 800b556:	d111      	bne.n	800b57c <_vfiprintf_r+0x158>
 800b558:	e017      	b.n	800b58a <_vfiprintf_r+0x166>
 800b55a:	3701      	adds	r7, #1
 800b55c:	e7a9      	b.n	800b4b2 <_vfiprintf_r+0x8e>
 800b55e:	4b49      	ldr	r3, [pc, #292]	; (800b684 <_vfiprintf_r+0x260>)
 800b560:	682a      	ldr	r2, [r5, #0]
 800b562:	1ac0      	subs	r0, r0, r3
 800b564:	2301      	movs	r3, #1
 800b566:	4083      	lsls	r3, r0
 800b568:	4313      	orrs	r3, r2
 800b56a:	602b      	str	r3, [r5, #0]
 800b56c:	9703      	str	r7, [sp, #12]
 800b56e:	e7cb      	b.n	800b508 <_vfiprintf_r+0xe4>
 800b570:	9b07      	ldr	r3, [sp, #28]
 800b572:	1d19      	adds	r1, r3, #4
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	9107      	str	r1, [sp, #28]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	db01      	blt.n	800b580 <_vfiprintf_r+0x15c>
 800b57c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b57e:	e004      	b.n	800b58a <_vfiprintf_r+0x166>
 800b580:	425b      	negs	r3, r3
 800b582:	60eb      	str	r3, [r5, #12]
 800b584:	2302      	movs	r3, #2
 800b586:	4313      	orrs	r3, r2
 800b588:	602b      	str	r3, [r5, #0]
 800b58a:	783b      	ldrb	r3, [r7, #0]
 800b58c:	2b2e      	cmp	r3, #46	; 0x2e
 800b58e:	d10a      	bne.n	800b5a6 <_vfiprintf_r+0x182>
 800b590:	787b      	ldrb	r3, [r7, #1]
 800b592:	2b2a      	cmp	r3, #42	; 0x2a
 800b594:	d137      	bne.n	800b606 <_vfiprintf_r+0x1e2>
 800b596:	9b07      	ldr	r3, [sp, #28]
 800b598:	3702      	adds	r7, #2
 800b59a:	1d1a      	adds	r2, r3, #4
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	9207      	str	r2, [sp, #28]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	db2d      	blt.n	800b600 <_vfiprintf_r+0x1dc>
 800b5a4:	9309      	str	r3, [sp, #36]	; 0x24
 800b5a6:	2203      	movs	r2, #3
 800b5a8:	7839      	ldrb	r1, [r7, #0]
 800b5aa:	4837      	ldr	r0, [pc, #220]	; (800b688 <_vfiprintf_r+0x264>)
 800b5ac:	f7fe f8f6 	bl	800979c <memchr>
 800b5b0:	2800      	cmp	r0, #0
 800b5b2:	d007      	beq.n	800b5c4 <_vfiprintf_r+0x1a0>
 800b5b4:	4b34      	ldr	r3, [pc, #208]	; (800b688 <_vfiprintf_r+0x264>)
 800b5b6:	682a      	ldr	r2, [r5, #0]
 800b5b8:	1ac0      	subs	r0, r0, r3
 800b5ba:	2340      	movs	r3, #64	; 0x40
 800b5bc:	4083      	lsls	r3, r0
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	3701      	adds	r7, #1
 800b5c2:	602b      	str	r3, [r5, #0]
 800b5c4:	7839      	ldrb	r1, [r7, #0]
 800b5c6:	1c7b      	adds	r3, r7, #1
 800b5c8:	2206      	movs	r2, #6
 800b5ca:	4830      	ldr	r0, [pc, #192]	; (800b68c <_vfiprintf_r+0x268>)
 800b5cc:	9303      	str	r3, [sp, #12]
 800b5ce:	7629      	strb	r1, [r5, #24]
 800b5d0:	f7fe f8e4 	bl	800979c <memchr>
 800b5d4:	2800      	cmp	r0, #0
 800b5d6:	d045      	beq.n	800b664 <_vfiprintf_r+0x240>
 800b5d8:	4b2d      	ldr	r3, [pc, #180]	; (800b690 <_vfiprintf_r+0x26c>)
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d127      	bne.n	800b62e <_vfiprintf_r+0x20a>
 800b5de:	2207      	movs	r2, #7
 800b5e0:	9b07      	ldr	r3, [sp, #28]
 800b5e2:	3307      	adds	r3, #7
 800b5e4:	4393      	bics	r3, r2
 800b5e6:	3308      	adds	r3, #8
 800b5e8:	9307      	str	r3, [sp, #28]
 800b5ea:	696b      	ldr	r3, [r5, #20]
 800b5ec:	9a04      	ldr	r2, [sp, #16]
 800b5ee:	189b      	adds	r3, r3, r2
 800b5f0:	616b      	str	r3, [r5, #20]
 800b5f2:	e75d      	b.n	800b4b0 <_vfiprintf_r+0x8c>
 800b5f4:	210a      	movs	r1, #10
 800b5f6:	434b      	muls	r3, r1
 800b5f8:	4667      	mov	r7, ip
 800b5fa:	189b      	adds	r3, r3, r2
 800b5fc:	3909      	subs	r1, #9
 800b5fe:	e7a3      	b.n	800b548 <_vfiprintf_r+0x124>
 800b600:	2301      	movs	r3, #1
 800b602:	425b      	negs	r3, r3
 800b604:	e7ce      	b.n	800b5a4 <_vfiprintf_r+0x180>
 800b606:	2300      	movs	r3, #0
 800b608:	001a      	movs	r2, r3
 800b60a:	3701      	adds	r7, #1
 800b60c:	606b      	str	r3, [r5, #4]
 800b60e:	7839      	ldrb	r1, [r7, #0]
 800b610:	1c78      	adds	r0, r7, #1
 800b612:	3930      	subs	r1, #48	; 0x30
 800b614:	4684      	mov	ip, r0
 800b616:	2909      	cmp	r1, #9
 800b618:	d903      	bls.n	800b622 <_vfiprintf_r+0x1fe>
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d0c3      	beq.n	800b5a6 <_vfiprintf_r+0x182>
 800b61e:	9209      	str	r2, [sp, #36]	; 0x24
 800b620:	e7c1      	b.n	800b5a6 <_vfiprintf_r+0x182>
 800b622:	230a      	movs	r3, #10
 800b624:	435a      	muls	r2, r3
 800b626:	4667      	mov	r7, ip
 800b628:	1852      	adds	r2, r2, r1
 800b62a:	3b09      	subs	r3, #9
 800b62c:	e7ef      	b.n	800b60e <_vfiprintf_r+0x1ea>
 800b62e:	ab07      	add	r3, sp, #28
 800b630:	9300      	str	r3, [sp, #0]
 800b632:	0022      	movs	r2, r4
 800b634:	0029      	movs	r1, r5
 800b636:	0030      	movs	r0, r6
 800b638:	4b16      	ldr	r3, [pc, #88]	; (800b694 <_vfiprintf_r+0x270>)
 800b63a:	f7fb f8fd 	bl	8006838 <_printf_float>
 800b63e:	9004      	str	r0, [sp, #16]
 800b640:	9b04      	ldr	r3, [sp, #16]
 800b642:	3301      	adds	r3, #1
 800b644:	d1d1      	bne.n	800b5ea <_vfiprintf_r+0x1c6>
 800b646:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b648:	07db      	lsls	r3, r3, #31
 800b64a:	d405      	bmi.n	800b658 <_vfiprintf_r+0x234>
 800b64c:	89a3      	ldrh	r3, [r4, #12]
 800b64e:	059b      	lsls	r3, r3, #22
 800b650:	d402      	bmi.n	800b658 <_vfiprintf_r+0x234>
 800b652:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b654:	f7ff fe6c 	bl	800b330 <__retarget_lock_release_recursive>
 800b658:	89a3      	ldrh	r3, [r4, #12]
 800b65a:	065b      	lsls	r3, r3, #25
 800b65c:	d500      	bpl.n	800b660 <_vfiprintf_r+0x23c>
 800b65e:	e70a      	b.n	800b476 <_vfiprintf_r+0x52>
 800b660:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b662:	e70a      	b.n	800b47a <_vfiprintf_r+0x56>
 800b664:	ab07      	add	r3, sp, #28
 800b666:	9300      	str	r3, [sp, #0]
 800b668:	0022      	movs	r2, r4
 800b66a:	0029      	movs	r1, r5
 800b66c:	0030      	movs	r0, r6
 800b66e:	4b09      	ldr	r3, [pc, #36]	; (800b694 <_vfiprintf_r+0x270>)
 800b670:	f7fb fb94 	bl	8006d9c <_printf_i>
 800b674:	e7e3      	b.n	800b63e <_vfiprintf_r+0x21a>
 800b676:	46c0      	nop			; (mov r8, r8)
 800b678:	0800c0dc 	.word	0x0800c0dc
 800b67c:	0800c0fc 	.word	0x0800c0fc
 800b680:	0800c0bc 	.word	0x0800c0bc
 800b684:	0800c054 	.word	0x0800c054
 800b688:	0800c05a 	.word	0x0800c05a
 800b68c:	0800c05e 	.word	0x0800c05e
 800b690:	08006839 	.word	0x08006839
 800b694:	0800b401 	.word	0x0800b401

0800b698 <__swbuf_r>:
 800b698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b69a:	0005      	movs	r5, r0
 800b69c:	000e      	movs	r6, r1
 800b69e:	0014      	movs	r4, r2
 800b6a0:	2800      	cmp	r0, #0
 800b6a2:	d004      	beq.n	800b6ae <__swbuf_r+0x16>
 800b6a4:	6983      	ldr	r3, [r0, #24]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d101      	bne.n	800b6ae <__swbuf_r+0x16>
 800b6aa:	f7ff fd8f 	bl	800b1cc <__sinit>
 800b6ae:	4b22      	ldr	r3, [pc, #136]	; (800b738 <__swbuf_r+0xa0>)
 800b6b0:	429c      	cmp	r4, r3
 800b6b2:	d12e      	bne.n	800b712 <__swbuf_r+0x7a>
 800b6b4:	686c      	ldr	r4, [r5, #4]
 800b6b6:	69a3      	ldr	r3, [r4, #24]
 800b6b8:	60a3      	str	r3, [r4, #8]
 800b6ba:	89a3      	ldrh	r3, [r4, #12]
 800b6bc:	071b      	lsls	r3, r3, #28
 800b6be:	d532      	bpl.n	800b726 <__swbuf_r+0x8e>
 800b6c0:	6923      	ldr	r3, [r4, #16]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d02f      	beq.n	800b726 <__swbuf_r+0x8e>
 800b6c6:	6823      	ldr	r3, [r4, #0]
 800b6c8:	6922      	ldr	r2, [r4, #16]
 800b6ca:	b2f7      	uxtb	r7, r6
 800b6cc:	1a98      	subs	r0, r3, r2
 800b6ce:	6963      	ldr	r3, [r4, #20]
 800b6d0:	b2f6      	uxtb	r6, r6
 800b6d2:	4283      	cmp	r3, r0
 800b6d4:	dc05      	bgt.n	800b6e2 <__swbuf_r+0x4a>
 800b6d6:	0021      	movs	r1, r4
 800b6d8:	0028      	movs	r0, r5
 800b6da:	f7ff fcd5 	bl	800b088 <_fflush_r>
 800b6de:	2800      	cmp	r0, #0
 800b6e0:	d127      	bne.n	800b732 <__swbuf_r+0x9a>
 800b6e2:	68a3      	ldr	r3, [r4, #8]
 800b6e4:	3001      	adds	r0, #1
 800b6e6:	3b01      	subs	r3, #1
 800b6e8:	60a3      	str	r3, [r4, #8]
 800b6ea:	6823      	ldr	r3, [r4, #0]
 800b6ec:	1c5a      	adds	r2, r3, #1
 800b6ee:	6022      	str	r2, [r4, #0]
 800b6f0:	701f      	strb	r7, [r3, #0]
 800b6f2:	6963      	ldr	r3, [r4, #20]
 800b6f4:	4283      	cmp	r3, r0
 800b6f6:	d004      	beq.n	800b702 <__swbuf_r+0x6a>
 800b6f8:	89a3      	ldrh	r3, [r4, #12]
 800b6fa:	07db      	lsls	r3, r3, #31
 800b6fc:	d507      	bpl.n	800b70e <__swbuf_r+0x76>
 800b6fe:	2e0a      	cmp	r6, #10
 800b700:	d105      	bne.n	800b70e <__swbuf_r+0x76>
 800b702:	0021      	movs	r1, r4
 800b704:	0028      	movs	r0, r5
 800b706:	f7ff fcbf 	bl	800b088 <_fflush_r>
 800b70a:	2800      	cmp	r0, #0
 800b70c:	d111      	bne.n	800b732 <__swbuf_r+0x9a>
 800b70e:	0030      	movs	r0, r6
 800b710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b712:	4b0a      	ldr	r3, [pc, #40]	; (800b73c <__swbuf_r+0xa4>)
 800b714:	429c      	cmp	r4, r3
 800b716:	d101      	bne.n	800b71c <__swbuf_r+0x84>
 800b718:	68ac      	ldr	r4, [r5, #8]
 800b71a:	e7cc      	b.n	800b6b6 <__swbuf_r+0x1e>
 800b71c:	4b08      	ldr	r3, [pc, #32]	; (800b740 <__swbuf_r+0xa8>)
 800b71e:	429c      	cmp	r4, r3
 800b720:	d1c9      	bne.n	800b6b6 <__swbuf_r+0x1e>
 800b722:	68ec      	ldr	r4, [r5, #12]
 800b724:	e7c7      	b.n	800b6b6 <__swbuf_r+0x1e>
 800b726:	0021      	movs	r1, r4
 800b728:	0028      	movs	r0, r5
 800b72a:	f000 f80b 	bl	800b744 <__swsetup_r>
 800b72e:	2800      	cmp	r0, #0
 800b730:	d0c9      	beq.n	800b6c6 <__swbuf_r+0x2e>
 800b732:	2601      	movs	r6, #1
 800b734:	4276      	negs	r6, r6
 800b736:	e7ea      	b.n	800b70e <__swbuf_r+0x76>
 800b738:	0800c0dc 	.word	0x0800c0dc
 800b73c:	0800c0fc 	.word	0x0800c0fc
 800b740:	0800c0bc 	.word	0x0800c0bc

0800b744 <__swsetup_r>:
 800b744:	4b37      	ldr	r3, [pc, #220]	; (800b824 <__swsetup_r+0xe0>)
 800b746:	b570      	push	{r4, r5, r6, lr}
 800b748:	681d      	ldr	r5, [r3, #0]
 800b74a:	0006      	movs	r6, r0
 800b74c:	000c      	movs	r4, r1
 800b74e:	2d00      	cmp	r5, #0
 800b750:	d005      	beq.n	800b75e <__swsetup_r+0x1a>
 800b752:	69ab      	ldr	r3, [r5, #24]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d102      	bne.n	800b75e <__swsetup_r+0x1a>
 800b758:	0028      	movs	r0, r5
 800b75a:	f7ff fd37 	bl	800b1cc <__sinit>
 800b75e:	4b32      	ldr	r3, [pc, #200]	; (800b828 <__swsetup_r+0xe4>)
 800b760:	429c      	cmp	r4, r3
 800b762:	d10f      	bne.n	800b784 <__swsetup_r+0x40>
 800b764:	686c      	ldr	r4, [r5, #4]
 800b766:	230c      	movs	r3, #12
 800b768:	5ee2      	ldrsh	r2, [r4, r3]
 800b76a:	b293      	uxth	r3, r2
 800b76c:	0711      	lsls	r1, r2, #28
 800b76e:	d42d      	bmi.n	800b7cc <__swsetup_r+0x88>
 800b770:	06d9      	lsls	r1, r3, #27
 800b772:	d411      	bmi.n	800b798 <__swsetup_r+0x54>
 800b774:	2309      	movs	r3, #9
 800b776:	2001      	movs	r0, #1
 800b778:	6033      	str	r3, [r6, #0]
 800b77a:	3337      	adds	r3, #55	; 0x37
 800b77c:	4313      	orrs	r3, r2
 800b77e:	81a3      	strh	r3, [r4, #12]
 800b780:	4240      	negs	r0, r0
 800b782:	bd70      	pop	{r4, r5, r6, pc}
 800b784:	4b29      	ldr	r3, [pc, #164]	; (800b82c <__swsetup_r+0xe8>)
 800b786:	429c      	cmp	r4, r3
 800b788:	d101      	bne.n	800b78e <__swsetup_r+0x4a>
 800b78a:	68ac      	ldr	r4, [r5, #8]
 800b78c:	e7eb      	b.n	800b766 <__swsetup_r+0x22>
 800b78e:	4b28      	ldr	r3, [pc, #160]	; (800b830 <__swsetup_r+0xec>)
 800b790:	429c      	cmp	r4, r3
 800b792:	d1e8      	bne.n	800b766 <__swsetup_r+0x22>
 800b794:	68ec      	ldr	r4, [r5, #12]
 800b796:	e7e6      	b.n	800b766 <__swsetup_r+0x22>
 800b798:	075b      	lsls	r3, r3, #29
 800b79a:	d513      	bpl.n	800b7c4 <__swsetup_r+0x80>
 800b79c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b79e:	2900      	cmp	r1, #0
 800b7a0:	d008      	beq.n	800b7b4 <__swsetup_r+0x70>
 800b7a2:	0023      	movs	r3, r4
 800b7a4:	3344      	adds	r3, #68	; 0x44
 800b7a6:	4299      	cmp	r1, r3
 800b7a8:	d002      	beq.n	800b7b0 <__swsetup_r+0x6c>
 800b7aa:	0030      	movs	r0, r6
 800b7ac:	f7fe fd00 	bl	800a1b0 <_free_r>
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	6363      	str	r3, [r4, #52]	; 0x34
 800b7b4:	2224      	movs	r2, #36	; 0x24
 800b7b6:	89a3      	ldrh	r3, [r4, #12]
 800b7b8:	4393      	bics	r3, r2
 800b7ba:	81a3      	strh	r3, [r4, #12]
 800b7bc:	2300      	movs	r3, #0
 800b7be:	6063      	str	r3, [r4, #4]
 800b7c0:	6923      	ldr	r3, [r4, #16]
 800b7c2:	6023      	str	r3, [r4, #0]
 800b7c4:	2308      	movs	r3, #8
 800b7c6:	89a2      	ldrh	r2, [r4, #12]
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	81a3      	strh	r3, [r4, #12]
 800b7cc:	6923      	ldr	r3, [r4, #16]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d10b      	bne.n	800b7ea <__swsetup_r+0xa6>
 800b7d2:	21a0      	movs	r1, #160	; 0xa0
 800b7d4:	2280      	movs	r2, #128	; 0x80
 800b7d6:	89a3      	ldrh	r3, [r4, #12]
 800b7d8:	0089      	lsls	r1, r1, #2
 800b7da:	0092      	lsls	r2, r2, #2
 800b7dc:	400b      	ands	r3, r1
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d003      	beq.n	800b7ea <__swsetup_r+0xa6>
 800b7e2:	0021      	movs	r1, r4
 800b7e4:	0030      	movs	r0, r6
 800b7e6:	f000 f855 	bl	800b894 <__smakebuf_r>
 800b7ea:	220c      	movs	r2, #12
 800b7ec:	5ea3      	ldrsh	r3, [r4, r2]
 800b7ee:	2001      	movs	r0, #1
 800b7f0:	001a      	movs	r2, r3
 800b7f2:	b299      	uxth	r1, r3
 800b7f4:	4002      	ands	r2, r0
 800b7f6:	4203      	tst	r3, r0
 800b7f8:	d00f      	beq.n	800b81a <__swsetup_r+0xd6>
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	60a2      	str	r2, [r4, #8]
 800b7fe:	6962      	ldr	r2, [r4, #20]
 800b800:	4252      	negs	r2, r2
 800b802:	61a2      	str	r2, [r4, #24]
 800b804:	2000      	movs	r0, #0
 800b806:	6922      	ldr	r2, [r4, #16]
 800b808:	4282      	cmp	r2, r0
 800b80a:	d1ba      	bne.n	800b782 <__swsetup_r+0x3e>
 800b80c:	060a      	lsls	r2, r1, #24
 800b80e:	d5b8      	bpl.n	800b782 <__swsetup_r+0x3e>
 800b810:	2240      	movs	r2, #64	; 0x40
 800b812:	4313      	orrs	r3, r2
 800b814:	81a3      	strh	r3, [r4, #12]
 800b816:	3801      	subs	r0, #1
 800b818:	e7b3      	b.n	800b782 <__swsetup_r+0x3e>
 800b81a:	0788      	lsls	r0, r1, #30
 800b81c:	d400      	bmi.n	800b820 <__swsetup_r+0xdc>
 800b81e:	6962      	ldr	r2, [r4, #20]
 800b820:	60a2      	str	r2, [r4, #8]
 800b822:	e7ef      	b.n	800b804 <__swsetup_r+0xc0>
 800b824:	2000000c 	.word	0x2000000c
 800b828:	0800c0dc 	.word	0x0800c0dc
 800b82c:	0800c0fc 	.word	0x0800c0fc
 800b830:	0800c0bc 	.word	0x0800c0bc

0800b834 <abort>:
 800b834:	2006      	movs	r0, #6
 800b836:	b510      	push	{r4, lr}
 800b838:	f000 f8a2 	bl	800b980 <raise>
 800b83c:	2001      	movs	r0, #1
 800b83e:	f7f7 ff6d 	bl	800371c <_exit>
	...

0800b844 <__swhatbuf_r>:
 800b844:	b570      	push	{r4, r5, r6, lr}
 800b846:	000e      	movs	r6, r1
 800b848:	001d      	movs	r5, r3
 800b84a:	230e      	movs	r3, #14
 800b84c:	5ec9      	ldrsh	r1, [r1, r3]
 800b84e:	0014      	movs	r4, r2
 800b850:	b096      	sub	sp, #88	; 0x58
 800b852:	2900      	cmp	r1, #0
 800b854:	da08      	bge.n	800b868 <__swhatbuf_r+0x24>
 800b856:	220c      	movs	r2, #12
 800b858:	5eb3      	ldrsh	r3, [r6, r2]
 800b85a:	2200      	movs	r2, #0
 800b85c:	602a      	str	r2, [r5, #0]
 800b85e:	061b      	lsls	r3, r3, #24
 800b860:	d411      	bmi.n	800b886 <__swhatbuf_r+0x42>
 800b862:	2380      	movs	r3, #128	; 0x80
 800b864:	00db      	lsls	r3, r3, #3
 800b866:	e00f      	b.n	800b888 <__swhatbuf_r+0x44>
 800b868:	466a      	mov	r2, sp
 800b86a:	f000 f8a9 	bl	800b9c0 <_fstat_r>
 800b86e:	2800      	cmp	r0, #0
 800b870:	dbf1      	blt.n	800b856 <__swhatbuf_r+0x12>
 800b872:	23f0      	movs	r3, #240	; 0xf0
 800b874:	9901      	ldr	r1, [sp, #4]
 800b876:	021b      	lsls	r3, r3, #8
 800b878:	4019      	ands	r1, r3
 800b87a:	4b05      	ldr	r3, [pc, #20]	; (800b890 <__swhatbuf_r+0x4c>)
 800b87c:	18c9      	adds	r1, r1, r3
 800b87e:	424b      	negs	r3, r1
 800b880:	4159      	adcs	r1, r3
 800b882:	6029      	str	r1, [r5, #0]
 800b884:	e7ed      	b.n	800b862 <__swhatbuf_r+0x1e>
 800b886:	2340      	movs	r3, #64	; 0x40
 800b888:	2000      	movs	r0, #0
 800b88a:	6023      	str	r3, [r4, #0]
 800b88c:	b016      	add	sp, #88	; 0x58
 800b88e:	bd70      	pop	{r4, r5, r6, pc}
 800b890:	ffffe000 	.word	0xffffe000

0800b894 <__smakebuf_r>:
 800b894:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b896:	2602      	movs	r6, #2
 800b898:	898b      	ldrh	r3, [r1, #12]
 800b89a:	0005      	movs	r5, r0
 800b89c:	000c      	movs	r4, r1
 800b89e:	4233      	tst	r3, r6
 800b8a0:	d006      	beq.n	800b8b0 <__smakebuf_r+0x1c>
 800b8a2:	0023      	movs	r3, r4
 800b8a4:	3347      	adds	r3, #71	; 0x47
 800b8a6:	6023      	str	r3, [r4, #0]
 800b8a8:	6123      	str	r3, [r4, #16]
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	6163      	str	r3, [r4, #20]
 800b8ae:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800b8b0:	466a      	mov	r2, sp
 800b8b2:	ab01      	add	r3, sp, #4
 800b8b4:	f7ff ffc6 	bl	800b844 <__swhatbuf_r>
 800b8b8:	9900      	ldr	r1, [sp, #0]
 800b8ba:	0007      	movs	r7, r0
 800b8bc:	0028      	movs	r0, r5
 800b8be:	f7fe fce3 	bl	800a288 <_malloc_r>
 800b8c2:	2800      	cmp	r0, #0
 800b8c4:	d108      	bne.n	800b8d8 <__smakebuf_r+0x44>
 800b8c6:	220c      	movs	r2, #12
 800b8c8:	5ea3      	ldrsh	r3, [r4, r2]
 800b8ca:	059a      	lsls	r2, r3, #22
 800b8cc:	d4ef      	bmi.n	800b8ae <__smakebuf_r+0x1a>
 800b8ce:	2203      	movs	r2, #3
 800b8d0:	4393      	bics	r3, r2
 800b8d2:	431e      	orrs	r6, r3
 800b8d4:	81a6      	strh	r6, [r4, #12]
 800b8d6:	e7e4      	b.n	800b8a2 <__smakebuf_r+0xe>
 800b8d8:	4b0f      	ldr	r3, [pc, #60]	; (800b918 <__smakebuf_r+0x84>)
 800b8da:	62ab      	str	r3, [r5, #40]	; 0x28
 800b8dc:	2380      	movs	r3, #128	; 0x80
 800b8de:	89a2      	ldrh	r2, [r4, #12]
 800b8e0:	6020      	str	r0, [r4, #0]
 800b8e2:	4313      	orrs	r3, r2
 800b8e4:	81a3      	strh	r3, [r4, #12]
 800b8e6:	9b00      	ldr	r3, [sp, #0]
 800b8e8:	6120      	str	r0, [r4, #16]
 800b8ea:	6163      	str	r3, [r4, #20]
 800b8ec:	9b01      	ldr	r3, [sp, #4]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d00d      	beq.n	800b90e <__smakebuf_r+0x7a>
 800b8f2:	0028      	movs	r0, r5
 800b8f4:	230e      	movs	r3, #14
 800b8f6:	5ee1      	ldrsh	r1, [r4, r3]
 800b8f8:	f000 f874 	bl	800b9e4 <_isatty_r>
 800b8fc:	2800      	cmp	r0, #0
 800b8fe:	d006      	beq.n	800b90e <__smakebuf_r+0x7a>
 800b900:	2203      	movs	r2, #3
 800b902:	89a3      	ldrh	r3, [r4, #12]
 800b904:	4393      	bics	r3, r2
 800b906:	001a      	movs	r2, r3
 800b908:	2301      	movs	r3, #1
 800b90a:	4313      	orrs	r3, r2
 800b90c:	81a3      	strh	r3, [r4, #12]
 800b90e:	89a0      	ldrh	r0, [r4, #12]
 800b910:	4307      	orrs	r7, r0
 800b912:	81a7      	strh	r7, [r4, #12]
 800b914:	e7cb      	b.n	800b8ae <__smakebuf_r+0x1a>
 800b916:	46c0      	nop			; (mov r8, r8)
 800b918:	0800b151 	.word	0x0800b151

0800b91c <_malloc_usable_size_r>:
 800b91c:	1f0b      	subs	r3, r1, #4
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	1f18      	subs	r0, r3, #4
 800b922:	2b00      	cmp	r3, #0
 800b924:	da01      	bge.n	800b92a <_malloc_usable_size_r+0xe>
 800b926:	580b      	ldr	r3, [r1, r0]
 800b928:	18c0      	adds	r0, r0, r3
 800b92a:	4770      	bx	lr

0800b92c <_raise_r>:
 800b92c:	b570      	push	{r4, r5, r6, lr}
 800b92e:	0004      	movs	r4, r0
 800b930:	000d      	movs	r5, r1
 800b932:	291f      	cmp	r1, #31
 800b934:	d904      	bls.n	800b940 <_raise_r+0x14>
 800b936:	2316      	movs	r3, #22
 800b938:	6003      	str	r3, [r0, #0]
 800b93a:	2001      	movs	r0, #1
 800b93c:	4240      	negs	r0, r0
 800b93e:	bd70      	pop	{r4, r5, r6, pc}
 800b940:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800b942:	2b00      	cmp	r3, #0
 800b944:	d004      	beq.n	800b950 <_raise_r+0x24>
 800b946:	008a      	lsls	r2, r1, #2
 800b948:	189b      	adds	r3, r3, r2
 800b94a:	681a      	ldr	r2, [r3, #0]
 800b94c:	2a00      	cmp	r2, #0
 800b94e:	d108      	bne.n	800b962 <_raise_r+0x36>
 800b950:	0020      	movs	r0, r4
 800b952:	f000 f831 	bl	800b9b8 <_getpid_r>
 800b956:	002a      	movs	r2, r5
 800b958:	0001      	movs	r1, r0
 800b95a:	0020      	movs	r0, r4
 800b95c:	f000 f81a 	bl	800b994 <_kill_r>
 800b960:	e7ed      	b.n	800b93e <_raise_r+0x12>
 800b962:	2000      	movs	r0, #0
 800b964:	2a01      	cmp	r2, #1
 800b966:	d0ea      	beq.n	800b93e <_raise_r+0x12>
 800b968:	1c51      	adds	r1, r2, #1
 800b96a:	d103      	bne.n	800b974 <_raise_r+0x48>
 800b96c:	2316      	movs	r3, #22
 800b96e:	3001      	adds	r0, #1
 800b970:	6023      	str	r3, [r4, #0]
 800b972:	e7e4      	b.n	800b93e <_raise_r+0x12>
 800b974:	2400      	movs	r4, #0
 800b976:	0028      	movs	r0, r5
 800b978:	601c      	str	r4, [r3, #0]
 800b97a:	4790      	blx	r2
 800b97c:	0020      	movs	r0, r4
 800b97e:	e7de      	b.n	800b93e <_raise_r+0x12>

0800b980 <raise>:
 800b980:	b510      	push	{r4, lr}
 800b982:	4b03      	ldr	r3, [pc, #12]	; (800b990 <raise+0x10>)
 800b984:	0001      	movs	r1, r0
 800b986:	6818      	ldr	r0, [r3, #0]
 800b988:	f7ff ffd0 	bl	800b92c <_raise_r>
 800b98c:	bd10      	pop	{r4, pc}
 800b98e:	46c0      	nop			; (mov r8, r8)
 800b990:	2000000c 	.word	0x2000000c

0800b994 <_kill_r>:
 800b994:	2300      	movs	r3, #0
 800b996:	b570      	push	{r4, r5, r6, lr}
 800b998:	4d06      	ldr	r5, [pc, #24]	; (800b9b4 <_kill_r+0x20>)
 800b99a:	0004      	movs	r4, r0
 800b99c:	0008      	movs	r0, r1
 800b99e:	0011      	movs	r1, r2
 800b9a0:	602b      	str	r3, [r5, #0]
 800b9a2:	f7f7 feab 	bl	80036fc <_kill>
 800b9a6:	1c43      	adds	r3, r0, #1
 800b9a8:	d103      	bne.n	800b9b2 <_kill_r+0x1e>
 800b9aa:	682b      	ldr	r3, [r5, #0]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d000      	beq.n	800b9b2 <_kill_r+0x1e>
 800b9b0:	6023      	str	r3, [r4, #0]
 800b9b2:	bd70      	pop	{r4, r5, r6, pc}
 800b9b4:	200003fc 	.word	0x200003fc

0800b9b8 <_getpid_r>:
 800b9b8:	b510      	push	{r4, lr}
 800b9ba:	f7f7 fe99 	bl	80036f0 <_getpid>
 800b9be:	bd10      	pop	{r4, pc}

0800b9c0 <_fstat_r>:
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	b570      	push	{r4, r5, r6, lr}
 800b9c4:	4d06      	ldr	r5, [pc, #24]	; (800b9e0 <_fstat_r+0x20>)
 800b9c6:	0004      	movs	r4, r0
 800b9c8:	0008      	movs	r0, r1
 800b9ca:	0011      	movs	r1, r2
 800b9cc:	602b      	str	r3, [r5, #0]
 800b9ce:	f7f7 fef4 	bl	80037ba <_fstat>
 800b9d2:	1c43      	adds	r3, r0, #1
 800b9d4:	d103      	bne.n	800b9de <_fstat_r+0x1e>
 800b9d6:	682b      	ldr	r3, [r5, #0]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d000      	beq.n	800b9de <_fstat_r+0x1e>
 800b9dc:	6023      	str	r3, [r4, #0]
 800b9de:	bd70      	pop	{r4, r5, r6, pc}
 800b9e0:	200003fc 	.word	0x200003fc

0800b9e4 <_isatty_r>:
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	b570      	push	{r4, r5, r6, lr}
 800b9e8:	4d06      	ldr	r5, [pc, #24]	; (800ba04 <_isatty_r+0x20>)
 800b9ea:	0004      	movs	r4, r0
 800b9ec:	0008      	movs	r0, r1
 800b9ee:	602b      	str	r3, [r5, #0]
 800b9f0:	f7f7 fef1 	bl	80037d6 <_isatty>
 800b9f4:	1c43      	adds	r3, r0, #1
 800b9f6:	d103      	bne.n	800ba00 <_isatty_r+0x1c>
 800b9f8:	682b      	ldr	r3, [r5, #0]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d000      	beq.n	800ba00 <_isatty_r+0x1c>
 800b9fe:	6023      	str	r3, [r4, #0]
 800ba00:	bd70      	pop	{r4, r5, r6, pc}
 800ba02:	46c0      	nop			; (mov r8, r8)
 800ba04:	200003fc 	.word	0x200003fc

0800ba08 <_init>:
 800ba08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba0a:	46c0      	nop			; (mov r8, r8)
 800ba0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba0e:	bc08      	pop	{r3}
 800ba10:	469e      	mov	lr, r3
 800ba12:	4770      	bx	lr

0800ba14 <_fini>:
 800ba14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba16:	46c0      	nop			; (mov r8, r8)
 800ba18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba1a:	bc08      	pop	{r3}
 800ba1c:	469e      	mov	lr, r3
 800ba1e:	4770      	bx	lr
